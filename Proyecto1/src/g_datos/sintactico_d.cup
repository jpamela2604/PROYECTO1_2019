package g_datos;
import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import errors.mng_error;
import proyecto1.var;
import java.util.Hashtable;
import codigo_gdato.*;
parser code
{:


public FileArray raiz;
public mng_error e = new mng_error();
public void syntax_error(Symbol s){
        e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); 
}
             
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); ;
}
:}
action code
{:
      
:}
terminal   String menor,er_cadena,er_id,er_decimal,er_entero,slash,mayor,i_prin,f_prin,f_lista,i_lista,tipo,is
            ;
nonterminal FileArray S,A
            ;
nonterminal LinkedList<tupla> T
            ;
nonterminal LinkedList<item> LVAL,L
            ;
nonterminal item H
            ;
nonterminal String OPC
            ;
start with S;
S ::=       A:n1
            {:
                System.out.println("aceptada");
                raiz=n1;
            :}
            ;
A::=        i_lista:i1   mayor f_lista mayor
            {:
                RESULT=new FileArray("",new LinkedList(),(i1left+1),(i1right+1),var.archivo);
            :}
            |i_lista:i1   mayor T:n1 f_lista mayor
            {:
                RESULT=new FileArray("",n1,(i1left+1),(i1right+1),var.archivo);
            :}
            | i_lista tipo is  er_cadena:i1 mayor f_lista mayor
            {:
                RESULT=new FileArray(i1,new LinkedList(),(i1left+1),(i1right+1),var.archivo);
            :}
            |i_lista tipo is er_cadena:i1 mayor T:n1 f_lista mayor
            {:
                RESULT=new FileArray(i1,n1,(i1left+1),(i1right+1),var.archivo);
            :}
            ;
T::=        T:n1 LVAL:n2
            {:
                RESULT=n1;
                if(n2!=null)
                {
                    Hashtable tup= new Hashtable();
                    for(item it:n2)
                    {
                        if(!tup.containsKey(it.clave))
                        {
                            tup.put(it.clave, it);
                        }
                    }
                    RESULT.add(new tupla(tup));
                }               
            :}
            |LVAL:n1
            {:
                RESULT=new LinkedList();
                if(n1!=null)
                {
                    Hashtable tup= new Hashtable();
                    for(item it:n1)
                    {
                        if(!tup.containsKey(it.clave))
                        {
                            tup.put(it.clave, it);
                        }
                    }
                    RESULT.add(new tupla(tup));
                }                
            :}
            ;
LVAL::=     i_prin mayor f_prin mayor
            {:
            
            :}
            |i_prin mayor L:n1 f_prin mayor
            {:
                RESULT=n1;
            :}
            ;
L::=        L:n1 H:n2
            {:
                RESULT=n1;
                if(n2!=null)
                {
                    n1.add(n2);
                }
            :}
            |H:n1
            {:
                RESULT=new LinkedList();
                if(n1!=null)
                {
                    RESULT.add(n1);
                }
            :}
            ;
H::=        menor er_id:i1  mayor OPC:n2 menor slash er_id:i2 mayor
            {:
                if(i1.equals(i2))
                {
                   RESULT=new item(i1,n2,(i1left+1),(i1right+1),var.archivo); 
                }else
                {
                    e.AddError("La etiqueta de inicio no es igual a la final",(i1left+1),(i1right+1),var.archivo,"SEMANTICO"); 
                }
            :}
            ;
OPC::=      er_cadena:n1
            {:
                RESULT=n1;
            :}
            |er_decimal:n1
            {:
                 RESULT=n1;
            :}
            |er_entero:n1
            {:
                 RESULT=n1;
            :}
            ;

