
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package g_gxml;

import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import errors.mng_error;
import proyecto1.var;
import codigo_gxml.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico_g extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return simb.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico_g() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico_g(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico_g(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\026\004\000\002\026\003" +
    "\000\002\003\004\000\002\003\003\000\002\017\005\000" +
    "\002\005\010\000\002\005\007\000\002\005\007\000\002" +
    "\005\006\000\002\005\004\000\002\027\004\000\002\027" +
    "\003\000\002\014\010\000\002\014\007\000\002\014\007" +
    "\000\002\014\006\000\002\014\004\000\002\025\004\000" +
    "\002\025\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\010\007\000\002\010\006\000\002\013\006" +
    "\000\002\013\005\000\002\011\006\000\002\011\005\000" +
    "\002\012\006\000\002\012\005\000\002\007\010\000\002" +
    "\007\007\000\002\007\007\000\002\007\006\000\002\007" +
    "\004\000\002\031\004\000\002\031\003\000\002\016\006" +
    "\000\002\016\005\000\002\022\005\000\002\006\010\000" +
    "\002\006\007\000\002\030\004\000\002\030\003\000\002" +
    "\024\003\000\002\024\003\000\002\015\005\000\002\023" +
    "\004\000\002\023\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\010\003\006\004\012\007\013\001\002\000" +
    "\012\002\ufffa\003\ufffa\004\ufffa\007\ufffa\001\002\000\010" +
    "\002\ufffc\003\ufffc\007\ufffc\001\002\000\004\006\277\001" +
    "\002\000\004\002\276\001\002\000\012\002\000\003\006" +
    "\004\012\007\013\001\002\000\010\002\ufffe\003\006\007" +
    "\013\001\002\000\004\061\271\001\002\000\056\006\044" +
    "\011\016\012\034\013\027\014\032\026\036\027\020\030" +
    "\015\031\025\032\024\033\022\034\014\035\041\036\040" +
    "\037\037\040\017\041\042\042\023\043\026\044\030\057" +
    "\043\060\031\001\002\000\004\015\267\001\002\000\004" +
    "\015\265\001\002\000\004\015\263\001\002\000\004\015" +
    "\261\001\002\000\004\015\257\001\002\000\056\006\251" +
    "\011\016\012\034\013\027\014\032\026\036\027\020\030" +
    "\015\031\025\032\024\033\022\034\014\035\041\036\040" +
    "\037\037\040\017\041\042\042\023\043\026\044\030\057" +
    "\043\060\031\001\002\000\004\015\247\001\002\000\004" +
    "\015\245\001\002\000\004\015\243\001\002\000\004\015" +
    "\241\001\002\000\004\015\237\001\002\000\004\015\235" +
    "\001\002\000\004\015\233\001\002\000\004\015\231\001" +
    "\002\000\004\015\227\001\002\000\060\006\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\057\uffca\060" +
    "\uffca\061\uffca\001\002\000\004\015\225\001\002\000\060" +
    "\006\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002\000\004\015\223" +
    "\001\002\000\004\015\221\001\002\000\004\015\217\001" +
    "\002\000\004\015\215\001\002\000\004\015\213\001\002" +
    "\000\004\015\207\001\002\000\010\003\047\010\045\055" +
    "\046\001\002\000\004\006\206\001\002\000\056\006\057" +
    "\011\016\012\034\013\027\014\032\026\036\027\020\030" +
    "\015\031\025\032\024\033\022\034\014\035\041\036\040" +
    "\037\037\040\017\041\042\042\023\043\026\044\030\057" +
    "\043\060\031\001\002\000\004\006\055\001\002\000\010" +
    "\003\ufff2\010\ufff2\055\ufff2\001\002\000\010\003\047\010" +
    "\052\055\046\001\002\000\004\006\054\001\002\000\010" +
    "\003\ufff3\010\ufff3\055\ufff3\001\002\000\010\002\ufff6\003" +
    "\ufff6\007\ufff6\001\002\000\010\003\uffed\010\uffed\055\uffed" +
    "\001\002\000\056\006\200\011\016\012\034\013\027\014" +
    "\032\026\036\027\020\030\015\031\025\032\024\033\022" +
    "\034\014\035\041\036\040\037\037\040\017\041\042\042" +
    "\023\043\026\044\030\057\043\060\031\001\002\000\020" +
    "\003\072\016\075\045\071\047\064\050\063\053\070\056" +
    "\066\001\002\000\020\003\uffe8\016\uffe8\045\uffe8\047\uffe8" +
    "\050\uffe8\053\uffe8\056\uffe8\001\002\000\020\003\uffe6\016" +
    "\uffe6\045\uffe6\047\uffe6\050\uffe6\053\uffe6\056\uffe6\001\002" +
    "\000\020\003\uffeb\016\uffeb\045\uffeb\047\uffeb\050\uffeb\053" +
    "\uffeb\056\uffeb\001\002\000\056\011\016\012\034\013\027" +
    "\014\032\026\036\027\020\030\015\031\025\032\024\033" +
    "\022\034\014\035\041\036\040\037\037\040\017\041\042" +
    "\042\023\043\026\044\030\057\043\060\031\061\173\001" +
    "\002\000\056\011\016\012\034\013\027\014\032\026\036" +
    "\027\020\030\015\031\025\032\024\033\022\034\014\035" +
    "\041\036\040\037\037\040\017\041\042\042\023\043\026" +
    "\044\030\057\043\060\031\061\166\001\002\000\020\003" +
    "\uffe9\016\uffe9\045\uffe9\047\uffe9\050\uffe9\053\uffe9\056\uffe9" +
    "\001\002\000\004\006\165\001\002\000\020\003\uffe7\016" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\053\uffe7\056\uffe7\001\002" +
    "\000\056\011\016\012\034\013\027\014\032\026\036\027" +
    "\020\030\015\031\025\032\024\033\022\034\014\035\041" +
    "\036\040\037\037\040\017\041\042\042\023\043\026\044" +
    "\030\057\043\060\031\061\160\001\002\000\056\006\152" +
    "\011\016\012\034\013\027\014\032\026\036\027\020\030" +
    "\015\031\025\032\024\033\022\034\014\035\041\036\040" +
    "\037\037\040\017\041\042\042\023\043\026\044\030\057" +
    "\043\060\031\001\002\000\004\006\150\001\002\000\020" +
    "\003\uffea\016\uffea\045\uffea\047\uffea\050\uffea\053\uffea\056" +
    "\uffea\001\002\000\020\003\072\016\075\045\071\047\064" +
    "\050\063\053\070\056\146\001\002\000\054\011\016\012" +
    "\034\013\027\014\032\026\036\027\020\030\015\031\025" +
    "\032\024\033\022\034\014\035\041\036\040\037\037\040" +
    "\017\041\042\042\023\043\026\044\030\057\043\060\031" +
    "\001\002\000\056\006\100\011\016\012\034\013\027\014" +
    "\032\026\036\027\020\030\015\031\025\032\024\033\022" +
    "\034\014\035\041\036\040\037\037\040\017\041\042\042" +
    "\023\043\026\044\030\057\043\060\031\001\002\000\060" +
    "\006\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\012\003\104" +
    "\017\102\020\110\022\103\001\002\000\012\003\104\017" +
    "\142\020\110\022\103\001\002\000\004\006\141\001\002" +
    "\000\056\006\115\011\016\012\034\013\027\014\032\026" +
    "\036\027\020\030\015\031\025\032\024\033\022\034\014" +
    "\035\041\036\040\037\037\040\017\041\042\042\023\043" +
    "\026\044\030\057\043\060\031\001\002\000\004\006\113" +
    "\001\002\000\012\003\uffce\017\uffce\020\uffce\022\uffce\001" +
    "\002\000\012\003\uffcd\017\uffcd\020\uffcd\022\uffcd\001\002" +
    "\000\012\003\uffcf\017\uffcf\020\uffcf\022\uffcf\001\002\000" +
    "\004\061\111\001\002\000\004\021\112\001\002\000\012" +
    "\003\uffcc\017\uffcc\020\uffcc\022\uffcc\001\002\000\012\003" +
    "\uffd8\017\uffd8\020\uffd8\022\uffd8\001\002\000\056\006\133" +
    "\011\016\012\034\013\027\014\032\026\036\027\020\030" +
    "\015\031\025\032\024\033\022\034\014\035\041\036\040" +
    "\037\037\040\017\041\042\042\023\043\026\044\030\057" +
    "\043\060\031\001\002\000\006\023\116\024\120\001\002" +
    "\000\004\006\132\001\002\000\006\023\127\024\120\001" +
    "\002\000\056\011\016\012\034\013\027\014\032\026\036" +
    "\027\020\030\015\031\025\032\024\033\022\034\014\035" +
    "\041\036\040\037\037\040\017\041\042\042\023\043\026" +
    "\044\030\057\043\060\031\061\122\001\002\000\006\023" +
    "\uffd6\024\uffd6\001\002\000\004\025\126\001\002\000\056" +
    "\011\016\012\034\013\027\014\032\026\036\027\020\030" +
    "\015\031\025\032\024\033\022\034\014\035\041\036\040" +
    "\037\037\040\017\041\042\042\023\043\026\044\030\057" +
    "\043\060\031\061\124\001\002\000\004\025\125\001\002" +
    "\000\006\023\uffd5\024\uffd5\001\002\000\006\023\uffd4\024" +
    "\uffd4\001\002\000\004\006\131\001\002\000\006\023\uffd7" +
    "\024\uffd7\001\002\000\012\003\uffdb\017\uffdb\020\uffdb\022" +
    "\uffdb\001\002\000\012\003\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\001\002\000\006\023\134\024\120\001\002\000\004\006" +
    "\140\001\002\000\006\023\136\024\120\001\002\000\004" +
    "\006\137\001\002\000\012\003\uffdc\017\uffdc\020\uffdc\022" +
    "\uffdc\001\002\000\012\003\uffda\017\uffda\020\uffda\022\uffda" +
    "\001\002\000\020\003\uffd1\016\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\053\uffd1\056\uffd1\001\002\000\004\006\144\001\002" +
    "\000\012\003\uffd0\017\uffd0\020\uffd0\022\uffd0\001\002\000" +
    "\020\003\uffd2\016\uffd2\045\uffd2\047\uffd2\050\uffd2\053\uffd2" +
    "\056\uffd2\001\002\000\020\003\uffec\016\uffec\045\uffec\047" +
    "\uffec\050\uffec\053\uffec\056\uffec\001\002\000\004\006\147" +
    "\001\002\000\010\003\uffef\010\uffef\055\uffef\001\002\000" +
    "\020\003\uffe5\016\uffe5\045\uffe5\047\uffe5\050\uffe5\053\uffe5" +
    "\056\uffe5\001\002\000\056\006\155\011\016\012\034\013" +
    "\027\014\032\026\036\027\020\030\015\031\025\032\024" +
    "\033\022\034\014\035\041\036\040\037\037\040\017\041" +
    "\042\042\023\043\026\044\030\057\043\060\031\001\002" +
    "\000\004\046\153\001\002\000\004\006\154\001\002\000" +
    "\020\003\uffe3\016\uffe3\045\uffe3\047\uffe3\050\uffe3\053\uffe3" +
    "\056\uffe3\001\002\000\004\046\156\001\002\000\004\006" +
    "\157\001\002\000\020\003\uffe4\016\uffe4\045\uffe4\047\uffe4" +
    "\050\uffe4\053\uffe4\056\uffe4\001\002\000\004\054\164\001" +
    "\002\000\056\011\016\012\034\013\027\014\032\026\036" +
    "\027\020\030\015\031\025\032\024\033\022\034\014\035" +
    "\041\036\040\037\037\040\017\041\042\042\023\043\026" +
    "\044\030\057\043\060\031\061\162\001\002\000\004\054" +
    "\163\001\002\000\020\003\uffe2\016\uffe2\045\uffe2\047\uffe2" +
    "\050\uffe2\053\uffe2\056\uffe2\001\002\000\020\003\uffe1\016" +
    "\uffe1\045\uffe1\047\uffe1\050\uffe1\053\uffe1\056\uffe1\001\002" +
    "\000\010\003\uffee\010\uffee\055\uffee\001\002\000\004\051" +
    "\172\001\002\000\056\011\016\012\034\013\027\014\032" +
    "\026\036\027\020\030\015\031\025\032\024\033\022\034" +
    "\014\035\041\036\040\037\037\040\017\041\042\042\023" +
    "\043\026\044\030\057\043\060\031\061\170\001\002\000" +
    "\004\051\171\001\002\000\020\003\uffe0\016\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\053\uffe0\056\uffe0\001\002\000\020\003" +
    "\uffdf\016\uffdf\045\uffdf\047\uffdf\050\uffdf\053\uffdf\056\uffdf" +
    "\001\002\000\004\052\177\001\002\000\056\011\016\012" +
    "\034\013\027\014\032\026\036\027\020\030\015\031\025" +
    "\032\024\033\022\034\014\035\041\036\040\037\037\040" +
    "\017\041\042\042\023\043\026\044\030\057\043\060\031" +
    "\061\175\001\002\000\004\052\176\001\002\000\020\003" +
    "\uffde\016\uffde\045\uffde\047\uffde\050\uffde\053\uffde\056\uffde" +
    "\001\002\000\020\003\uffdd\016\uffdd\045\uffdd\047\uffdd\050" +
    "\uffdd\053\uffdd\056\uffdd\001\002\000\020\003\072\016\075" +
    "\045\071\047\064\050\063\053\070\056\201\001\002\000" +
    "\004\006\205\001\002\000\020\003\072\016\075\045\071" +
    "\047\064\050\063\053\070\056\203\001\002\000\004\006" +
    "\204\001\002\000\010\003\ufff1\010\ufff1\055\ufff1\001\002" +
    "\000\010\003\ufff0\010\ufff0\055\ufff0\001\002\000\010\002" +
    "\ufff5\003\ufff5\007\ufff5\001\002\000\006\065\210\066\212" +
    "\001\002\000\060\006\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002" +
    "\000\060\006\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\057\uffbb\060\uffbb\061\uffbb\001\002\000\060" +
    "\006\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000\004\063\214" +
    "\001\002\000\060\006\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\057\uffba\060\uffba\061\uffba\001\002" +
    "\000\004\064\216\001\002\000\060\006\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\001\002\000\004\063\220\001\002\000\060\006" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\001\002\000\006\065\210\066" +
    "\212\001\002\000\060\006\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\057\uffbd\060\uffbd\061\uffbd\001" +
    "\002\000\004\064\224\001\002\000\060\006\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\001\002\000\004\064\226\001\002\000\060" +
    "\006\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000\004\062\230" +
    "\001\002\000\060\006\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\057\uffc5\060\uffc5\061\uffc5\001\002" +
    "\000\004\064\232\001\002\000\060\006\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\001\002\000\004\064\234\001\002\000\060\006" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\001\002\000\004\062\236\001" +
    "\002\000\060\006\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000" +
    "\006\065\210\066\212\001\002\000\060\006\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\001\002\000\004\063\242\001\002\000\060" +
    "\006\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002\000\004\063\244" +
    "\001\002\000\060\006\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002" +
    "\000\004\063\246\001\002\000\060\006\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\001\002\000\004\063\250\001\002\000\060\006" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\001\002\000\010\003\047\010" +
    "\252\055\046\001\002\000\004\006\256\001\002\000\010" +
    "\003\047\010\254\055\046\001\002\000\004\006\255\001" +
    "\002\000\010\002\ufff8\003\ufff8\007\ufff8\001\002\000\010" +
    "\002\ufff7\003\ufff7\007\ufff7\001\002\000\004\062\260\001" +
    "\002\000\060\006\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\057\uffb5\060\uffb5\061\uffb5\001\002\000" +
    "\006\065\210\066\212\001\002\000\060\006\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\001\002\000\004\064\264\001\002\000\060" +
    "\006\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\004\064\266" +
    "\001\002\000\060\006\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002" +
    "\000\004\063\270\001\002\000\060\006\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\004\005\272\001\002\000\012\002" +
    "\ufff9\003\ufff9\004\ufff9\007\ufff9\001\002\000\010\002\ufffd" +
    "\003\ufffd\007\ufffd\001\002\000\012\002\ufffb\003\ufffb\004" +
    "\ufffb\007\ufffb\001\002\000\010\002\uffff\003\006\007\013" +
    "\001\002\000\004\002\001\001\002\000\010\002\ufff4\003" +
    "\ufff4\007\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\014\002\006\003\007\005\004\017\003\026" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\004\017\273\026" +
    "\274\001\001\000\004\005\272\001\001\000\002\001\001" +
    "\000\010\021\032\022\034\023\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\076\022\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\047\027\050\001" +
    "\001\000\002\001\001\000\010\021\032\022\034\023\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\076\022\034\001" +
    "\001\000\020\004\061\006\072\010\064\011\057\012\066" +
    "\013\060\025\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\032\022\034\023\173" +
    "\001\001\000\010\021\032\022\034\023\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\032\022\034\023\160\001\001\000\010\021\032\022" +
    "\034\023\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\144\006\072\010\064\011\057\012\066\013" +
    "\060\001\001\000\010\021\032\022\034\023\075\001\001" +
    "\000\006\021\076\022\034\001\001\000\002\001\001\000" +
    "\012\007\105\015\104\024\106\030\100\001\001\000\010" +
    "\007\105\015\104\024\142\001\001\000\002\001\001\000" +
    "\010\021\032\022\034\023\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\076\022\034\001\001\000\006\016" +
    "\120\031\116\001\001\000\002\001\001\000\004\016\127" +
    "\001\001\000\010\021\032\022\034\023\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\076\022\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\120\031\134\001\001\000" +
    "\002\001\001\000\004\016\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\076\022\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\076\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\076\022\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\076\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\061\006\072\010\064" +
    "\011\057\012\066\013\060\025\201\001\001\000\002\001" +
    "\001\000\016\004\144\006\072\010\064\011\057\012\066" +
    "\013\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\047\027\252\001" +
    "\001\000\002\001\001\000\004\014\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\272\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_g$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_g$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_g$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public etiqueta raiz;
public mng_error e = new mng_error();
public void syntax_error(Symbol s){
        e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); 
}
             
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); ;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_g$actions {


      

  private final sintactico_g parser;

  /** Constructor */
  CUP$sintactico_g$actions(sintactico_g parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_g$do_action_part00000000(
    int                        CUP$sintactico_g$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_g$parser,
    java.util.Stack            CUP$sintactico_g$stack,
    int                        CUP$sintactico_g$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_g$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_g$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		etiqueta start_val = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_g$parser.done_parsing();
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LIMP 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                   // System.out.println("aceptada");
                    raiz=new e_xml(n1,new LinkedList());
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LIMP VENTANAS 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		LinkedList<etiqueta> n2 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    //System.out.println("aceptada");
                    raiz=new e_xml(n1,n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= VENTANAS 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		LinkedList<etiqueta> n1 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    //System.out.println("aceptada");
                    raiz=new e_xml(new e_Importar(),n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VENTANAS ::= VENTANAS VEN 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		LinkedList<etiqueta> n1 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n2 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                    n1.add(n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VENTANAS",20, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VENTANAS ::= VEN 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new LinkedList();
                    RESULT.add(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VENTANAS",20, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIMP ::= LIMP IMP 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		ruta n2 = (ruta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    e_Importar a=(e_Importar)n1;
                    a.rutas.add(n2);
                    RESULT=a;                
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LIMP",1, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIMP ::= IMP 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		ruta n1 = (ruta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new e_Importar(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LIMP",1, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMP ::= i_imp all f_imp 
            {
              ruta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new ruta(n1,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("IMP",13, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VEN ::= i_ven ELEMENTOS mayor LCONTE f_ven mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<etiqueta> n2 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_ventana(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VEN",3, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VEN ::= i_ven ELEMENTOS mayor f_ven mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_ventana(n1,new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VEN",3, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VEN ::= i_ven mayor LCONTE f_ven mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<etiqueta> n2 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_ventana(new LinkedList(),n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VEN",3, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VEN ::= i_ven mayor f_ven mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_ventana(new LinkedList(),new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VEN",3, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VEN ::= error mayor 
            {
              etiqueta RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    e.AddError("Falta >",(i1left+1),(i1right+1),var.archivo,"SEMANTICO"); 
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("VEN",3, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LCONTE ::= LCONTE CONTE 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		LinkedList<etiqueta> n1 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n2 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                    n1.add(n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LCONTE",21, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LCONTE ::= CONTE 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new LinkedList();
                    RESULT.add(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LCONTE",21, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTE ::= i_contenedor ELEMENTOS mayor ETIQUETAS f_contenedor mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<etiqueta> n2 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_contenedor(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTE",10, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTE ::= i_contenedor ELEMENTOS mayor f_contenedor mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_contenedor(n1,new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTE",10, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTE ::= i_contenedor mayor ETIQUETAS f_contenedor mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<etiqueta> n2 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_contenedor(new LinkedList(),n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTE",10, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTE ::= i_contenedor mayor f_contenedor mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_contenedor(new LinkedList(),new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTE",10, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTE ::= error mayor 
            {
              etiqueta RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    e.AddError("Falta >",(i1left+1),(i1right+1),var.archivo,"SEMANTICO"); 
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTE",10, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ETIQUETAS ::= ETIQUETAS ETIQUETA 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		LinkedList<etiqueta> n1 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n2 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                    n1.add(n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",19, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ETIQUETAS ::= ETIQUETA 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new LinkedList();
                    RESULT.add(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",19, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ETIQUETA ::= CONTROL 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETA",2, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ETIQUETA ::= MULTIMEDIA 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETA",2, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ETIQUETA ::= BOTON 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETA",2, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETA ::= ENVIAR 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETA",2, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ETIQUETA ::= TEXTO 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETA",2, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETIQUETA ::= error mayor 
            {
              etiqueta RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    e.AddError("Falta >",(i1left+1),(i1right+1),var.archivo,"SEMANTICO"); 
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ETIQUETA",2, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MULTIMEDIA ::= i_multi ELEMENTOS mayor f_multi mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_multimedia(n1,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",6, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MULTIMEDIA ::= i_multi mayor f_multi mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_multimedia(new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",6, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TEXTO ::= i_texto ELEMENTOS all f_texto 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_texto(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("TEXTO",9, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TEXTO ::= i_texto all f_texto 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_texto(new LinkedList(),n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("TEXTO",9, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BOTON ::= i_boton ELEMENTOS all f_boton 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                     RESULT=new e_boton(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("BOTON",7, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOTON ::= i_boton all f_boton 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_boton(new LinkedList(),n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("BOTON",7, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENVIAR ::= i_enviar ELEMENTOS all f_enviar 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_enviar(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ENVIAR",8, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENVIAR ::= i_enviar all f_enviar 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_enviar(new LinkedList(),n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ENVIAR",8, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTADATOS ::= i_lista ELEMENTOS mayor DATOS f_lista mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<e_dato> n2 = (LinkedList<e_dato>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_listaDato(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LISTADATOS",5, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTADATOS ::= i_lista mayor DATOS f_lista mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<e_dato> n2 = (LinkedList<e_dato>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_listaDato(null,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LISTADATOS",5, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTADATOS ::= i_lista ELEMENTOS mayor f_lista mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_listaDato(n1,new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LISTADATOS",5, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTADATOS ::= i_lista mayor f_lista mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_listaDato(null,new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LISTADATOS",5, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTADATOS ::= error mayor 
            {
              etiqueta RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    e.AddError("Falta >",(i1left+1),(i1right+1),var.archivo,"SEMANTICO"); 
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("LISTADATOS",5, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DATOS ::= DATOS DATO 
            {
              LinkedList<e_dato> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		LinkedList<e_dato> n1 = (LinkedList<e_dato>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		e_dato n2 = (e_dato)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                    n1.add(n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("DATOS",23, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DATOS ::= DATO 
            {
              LinkedList<e_dato> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		e_dato n1 = (e_dato)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new LinkedList();
                    RESULT.add(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("DATOS",23, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DATO ::= i_dato ELEMENTOS all f_dato 
            {
              e_dato RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		                    
                    RESULT=new e_dato(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("DATO",12, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DATO ::= i_dato all f_dato 
            {
              e_dato RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_dato(new LinkedList(),n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("DATO",12, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REFE ::= referencia is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.referencia,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("REFE",16, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTROL ::= i_control ELEMENTOS mayor OPCS_CTRL f_control mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		LinkedList<etiqueta> n2 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		
                    RESULT=new e_control(n1,n2,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTROL",4, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTROL ::= i_control ELEMENTOS mayor f_control mayor 
            {
              etiqueta RESULT =null;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-3)).value;
		
                    RESULT=new e_control(n1,new LinkedList(),(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("CONTROL",4, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPCS_CTRL ::= OPCS_CTRL OPC_CTRL 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		LinkedList<etiqueta> n1 = (LinkedList<etiqueta>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n2 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                    n1.add(n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("OPCS_CTRL",22, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPCS_CTRL ::= OPC_CTRL 
            {
              LinkedList<etiqueta> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new LinkedList();
                    RESULT.add(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("OPCS_CTRL",22, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPC_CTRL ::= DEFECTO 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("OPC_CTRL",18, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPC_CTRL ::= LISTADATOS 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		etiqueta n1 = (etiqueta)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("OPC_CTRL",18, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEFECTO ::= i_defecto all f_defecto 
            {
              etiqueta RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		
                    RESULT=new e_defecto(n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("DEFECTO",11, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              LinkedList<elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).right;
		LinkedList<elemento> n1 = (LinkedList<elemento>)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		elemento n2 = (elemento)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=n1;
                    n1.add(n2);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTOS ::= ELEMENTO 
            {
              LinkedList<elemento> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		elemento n1 = (elemento)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new LinkedList();
                    RESULT.add(n1);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",17, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO ::= id is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.id,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO ::= tipo is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.tipo,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO ::= color is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.color,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO ::= ac_in is call 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.accionInicial,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO ::= ac_fi is call 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.accionFinal,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO ::= x is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.x,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO ::= y is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.y,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO ::= nombre is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.nombre,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO ::= alto is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.alto,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO ::= ancho is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.ancho,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO ::= fuente is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.fuente,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO ::= tam is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.tam,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO ::= negrita is BOL 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		Boolean n2 = (Boolean)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.negrita,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELEMENTO ::= cursiva is BOL 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		Boolean n2 = (Boolean)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.cursiva,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELEMENTO ::= borde is BOL 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		Boolean n2 = (Boolean)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.borde,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTO ::= maximo is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.maximo,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTO ::= minimo is er_entero 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.minimo,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELEMENTO ::= REFE 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		elemento n1 = (elemento)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                        RESULT=n1;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTO ::= autoplay is BOL 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		Boolean n2 = (Boolean)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.autoplay,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTO ::= path is er_cadena 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.path,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTO ::= accion is call 
            {
              elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_g$stack.peek()).value;
		
                    RESULT=new elemento(var.accion,n2,(n1left+1),(n1right+1),var.archivo);
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.elementAt(CUP$sintactico_g$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BOL ::= verdadero 
            {
              Boolean RESULT =null;
		
                    RESULT=true;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("BOL",14, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BOL ::= falso 
            {
              Boolean RESULT =null;
		
                    RESULT=false;
                
              CUP$sintactico_g$result = parser.getSymbolFactory().newSymbol("BOL",14, ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_g$stack.peek()), RESULT);
            }
          return CUP$sintactico_g$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_g$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_g$do_action(
    int                        CUP$sintactico_g$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_g$parser,
    java.util.Stack            CUP$sintactico_g$stack,
    int                        CUP$sintactico_g$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_g$do_action_part00000000(
                               CUP$sintactico_g$act_num,
                               CUP$sintactico_g$parser,
                               CUP$sintactico_g$stack,
                               CUP$sintactico_g$top);
    }
}

}
