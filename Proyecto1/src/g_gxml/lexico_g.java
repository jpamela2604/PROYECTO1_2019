/* The following code was generated by JFlex 1.6.1 */

package g_gxml;
import java_cup.*;
import java_cup.runtime.Symbol;
import errors.mng_error;
import proyecto1.var;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_g.jflex</tt>
 */
public class lexico_g implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\42\1\43\1\42\1\42\22\0\1\42\1\0\1\3"+
    "\12\0\1\37\1\0\1\26\12\2\2\0\1\20\1\41\1\40\2\0"+
    "\1\12\1\31\1\30\1\11\1\7\1\14\1\36\1\34\1\22\2\1"+
    "\1\15\1\23\1\27\1\13\1\24\1\1\1\10\1\17\1\25\1\35"+
    "\1\6\1\1\1\32\1\33\1\1\4\0\1\1\1\0\1\12\1\31"+
    "\1\30\1\11\1\7\1\14\1\36\1\34\1\22\2\1\1\15\1\23"+
    "\1\27\1\13\1\24\1\1\1\10\1\17\1\25\1\35\1\6\1\1"+
    "\1\32\1\33\1\1\1\4\1\0\1\5\7\0\1\43\252\0\2\21"+
    "\115\0\1\16\u1ea8\0\1\43\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\4\2\2\1\6\2"+
    "\1\4\1\5\1\6\1\7\1\10\1\0\1\11\1\0"+
    "\1\12\10\2\6\0\2\13\1\2\1\0\3\2\1\0"+
    "\7\2\1\14\6\2\13\0\1\2\1\0\2\2\1\15"+
    "\1\0\7\2\1\16\1\2\1\0\2\2\1\0\2\2"+
    "\15\0\1\2\1\0\1\2\1\17\2\20\3\2\1\0"+
    "\3\2\1\21\1\0\1\2\1\0\2\22\1\2\2\0"+
    "\1\23\12\0\1\2\1\0\1\2\1\0\2\2\1\24"+
    "\1\0\3\2\2\25\1\0\1\26\6\0\1\27\4\0"+
    "\2\30\2\31\1\0\1\2\1\32\1\0\3\2\2\0"+
    "\2\2\13\0\2\33\2\34\2\2\2\0\2\2\1\0"+
    "\1\35\1\36\7\0\1\37\1\40\1\0\1\2\2\0"+
    "\2\2\2\0\1\41\1\42\1\43\2\0\1\44\2\45"+
    "\2\0\2\2\3\0\1\46\1\47\1\0\1\47\1\2"+
    "\1\0\1\50\2\0\1\2\1\0\1\51\2\52\4\0"+
    "\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\110\0\110\0\44\0\44\0\u0288\0\220"+
    "\0\44\0\264\0\44\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\44\0\110\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534"+
    "\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\110\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750"+
    "\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870"+
    "\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\110\0\u096c"+
    "\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\110"+
    "\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88"+
    "\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8"+
    "\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\110"+
    "\0\44\0\110\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c"+
    "\0\u0ea0\0\110\0\u0ec4\0\u0ee8\0\u0f0c\0\44\0\110\0\u0f30"+
    "\0\u0f54\0\u0f78\0\44\0\u0f9c\0\u0fc0\0\u0fe4\0\u1008\0\u102c"+
    "\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c"+
    "\0\u1170\0\u1194\0\u11b8\0\110\0\u11dc\0\u1200\0\u1224\0\u1248"+
    "\0\u126c\0\u1290\0\u12b4\0\110\0\u12d8\0\u12fc\0\u1320\0\u1344"+
    "\0\u1368\0\u138c\0\44\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\44"+
    "\0\110\0\44\0\110\0\u1440\0\u1464\0\110\0\u1488\0\u14ac"+
    "\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8\0\u15cc"+
    "\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8\0\u16ec"+
    "\0\u1710\0\44\0\110\0\44\0\110\0\u1734\0\u1758\0\u177c"+
    "\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\44\0\44\0\u1830\0\u1854"+
    "\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908\0\44\0\110\0\u192c"+
    "\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28\0\44"+
    "\0\44\0\44\0\u1a4c\0\u1a70\0\44\0\44\0\110\0\u1a94"+
    "\0\u1ab8\0\u1adc\0\u1b00\0\u1b24\0\u1b48\0\u1b6c\0\44\0\44"+
    "\0\u1b90\0\110\0\u1bb4\0\u1bd8\0\44\0\u1bfc\0\u1c20\0\u1c44"+
    "\0\u1c68\0\44\0\44\0\110\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8"+
    "\0\44";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\3"+
    "\1\10\1\3\1\11\1\3\1\12\1\3\1\2\1\3"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\2\1\21"+
    "\1\22\1\3\1\23\1\24\3\3\1\2\1\25\1\26"+
    "\1\27\46\0\2\3\3\0\10\3\1\0\1\3\2\0"+
    "\4\3\1\0\10\3\7\0\1\4\41\0\3\30\1\31"+
    "\40\30\5\32\1\33\36\32\1\0\2\3\3\0\1\3"+
    "\1\34\6\3\1\0\1\3\2\0\4\3\1\0\10\3"+
    "\6\0\2\3\3\0\1\3\1\35\6\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\6\0\2\3\3\0\7\3"+
    "\1\36\1\0\1\3\2\0\4\3\1\0\1\37\1\40"+
    "\4\3\1\41\1\3\6\0\2\3\3\0\4\3\1\42"+
    "\3\3\1\0\1\3\2\0\4\3\1\0\6\3\1\43"+
    "\1\3\13\0\1\44\2\0\1\45\3\0\1\46\3\0"+
    "\2\47\3\0\1\50\1\0\1\51\24\0\1\52\33\0"+
    "\2\3\3\0\3\3\1\53\4\3\1\0\1\3\2\0"+
    "\4\3\1\0\10\3\6\0\2\3\3\0\4\3\1\54"+
    "\3\3\1\0\1\3\1\0\1\55\1\56\3\3\1\0"+
    "\10\3\6\0\2\3\3\0\4\3\1\57\3\3\1\0"+
    "\1\3\2\0\4\3\1\0\10\3\6\0\2\3\3\0"+
    "\4\3\1\60\3\3\1\0\1\3\1\0\1\61\1\62"+
    "\3\3\1\0\10\3\6\0\2\3\3\0\1\3\1\63"+
    "\3\3\1\64\2\3\1\0\1\3\2\0\4\3\1\0"+
    "\10\3\6\0\2\3\3\0\5\3\1\65\2\3\1\0"+
    "\1\3\2\0\4\3\1\0\6\3\1\66\1\3\47\0"+
    "\1\27\2\0\2\3\3\0\2\3\1\67\5\3\1\0"+
    "\1\3\2\0\4\3\1\0\10\3\6\0\2\3\3\0"+
    "\6\3\1\70\1\3\1\0\1\3\2\0\4\3\1\0"+
    "\10\3\6\0\2\3\3\0\7\3\1\71\1\0\1\3"+
    "\2\0\3\3\1\72\1\0\10\3\6\0\2\3\3\0"+
    "\10\3\1\0\1\3\2\0\4\3\1\0\1\3\1\73"+
    "\6\3\6\0\2\3\3\0\10\3\1\0\1\3\2\0"+
    "\4\3\1\0\1\3\1\74\6\3\6\0\2\3\3\0"+
    "\10\3\1\0\1\3\2\0\3\3\1\75\1\0\10\3"+
    "\6\0\2\3\3\0\7\3\1\76\1\0\1\3\2\0"+
    "\4\3\1\0\10\3\6\0\2\3\3\0\1\3\1\77"+
    "\6\3\1\0\1\3\2\0\4\3\1\0\10\3\14\0"+
    "\1\100\43\0\1\101\2\0\1\102\52\0\2\103\44\0"+
    "\1\104\26\0\1\105\2\0\1\106\3\0\1\107\3\0"+
    "\2\110\5\0\1\111\26\0\1\112\31\0\2\3\3\0"+
    "\10\3\1\0\1\3\2\0\4\3\1\0\3\3\1\113"+
    "\4\3\34\0\1\114\15\0\2\3\3\0\10\3\1\0"+
    "\1\3\2\0\4\3\1\0\1\115\7\3\6\0\2\3"+
    "\3\0\10\3\1\0\1\3\2\0\3\3\1\116\1\0"+
    "\10\3\6\0\2\3\3\0\10\3\1\0\1\3\2\0"+
    "\1\3\1\117\2\3\1\0\10\3\31\0\1\120\20\0"+
    "\2\3\3\0\10\3\1\0\1\3\2\0\2\3\1\121"+
    "\1\3\1\0\10\3\6\0\2\3\3\0\10\3\1\0"+
    "\1\3\2\0\4\3\1\0\7\3\1\122\6\0\2\3"+
    "\3\0\10\3\1\0\1\3\2\0\1\3\1\123\2\3"+
    "\1\0\10\3\6\0\2\3\3\0\7\3\1\124\1\0"+
    "\1\3\2\0\4\3\1\0\10\3\6\0\2\3\3\0"+
    "\2\3\1\125\5\3\1\0\1\3\2\0\4\3\1\0"+
    "\10\3\6\0\2\3\3\0\3\3\1\126\4\3\1\0"+
    "\1\3\2\0\4\3\1\0\10\3\6\0\2\3\3\0"+
    "\1\3\1\127\6\3\1\0\1\3\2\0\4\3\1\0"+
    "\10\3\6\0\2\3\3\0\5\3\1\130\2\3\1\0"+
    "\1\3\2\0\4\3\1\0\10\3\6\0\2\3\3\0"+
    "\10\3\1\0\1\3\2\0\4\3\1\0\5\3\1\131"+
    "\2\3\6\0\2\3\3\0\10\3\1\0\1\3\1\0"+
    "\1\132\1\133\3\3\1\0\10\3\6\0\2\3\3\0"+
    "\5\3\1\134\2\3\1\0\1\3\2\0\4\3\1\0"+
    "\10\3\6\0\2\3\3\0\10\3\1\135\1\136\2\0"+
    "\4\3\1\0\10\3\6\0\2\3\3\0\10\3\1\0"+
    "\1\3\2\0\4\3\1\0\1\137\7\3\34\0\1\140"+
    "\30\0\1\141\54\0\1\142\34\0\2\143\50\0\1\144"+
    "\26\0\1\145\43\0\1\146\2\0\1\147\52\0\2\150"+
    "\44\0\1\151\33\0\1\152\57\0\1\153\15\0\2\3"+
    "\3\0\10\3\1\0\1\3\1\0\1\154\1\155\3\3"+
    "\1\0\10\3\26\0\2\156\22\0\2\3\3\0\10\3"+
    "\1\0\1\3\1\0\1\156\1\157\3\3\1\0\10\3"+
    "\6\0\2\3\3\0\10\3\1\0\1\3\2\0\4\3"+
    "\1\0\5\3\1\160\2\3\20\0\1\161\31\0\2\3"+
    "\3\0\5\3\1\162\2\3\1\0\1\3\2\0\4\3"+
    "\1\0\10\3\6\0\2\3\3\0\2\3\1\163\5\3"+
    "\1\0\1\3\2\0\4\3\1\0\10\3\6\0\2\3"+
    "\3\0\10\3\1\0\1\3\2\0\4\3\1\0\2\3"+
    "\1\164\5\3\6\0\2\3\3\0\5\3\1\165\2\3"+
    "\1\0\1\3\2\0\4\3\1\0\10\3\6\0\2\3"+
    "\3\0\10\3\1\166\1\167\2\0\4\3\1\0\10\3"+
    "\6\0\2\3\3\0\4\3\1\170\3\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\6\0\2\3\3\0\2\3"+
    "\1\171\5\3\1\0\1\3\2\0\4\3\1\0\10\3"+
    "\6\0\2\3\3\0\5\3\1\172\2\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\20\0\1\173\31\0\2\3"+
    "\3\0\5\3\1\174\2\3\1\0\1\3\2\0\4\3"+
    "\1\0\10\3\6\0\2\3\3\0\10\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\1\175\17\0\1\176\31\0"+
    "\2\3\3\0\5\3\1\177\2\3\1\0\1\3\2\0"+
    "\4\3\1\0\10\3\6\0\2\3\3\0\10\3\1\0"+
    "\1\3\2\0\3\3\1\200\1\0\10\3\32\0\1\201"+
    "\25\0\1\202\47\0\1\203\55\0\1\204\31\0\1\205"+
    "\57\0\1\206\30\0\1\207\54\0\1\210\34\0\2\211"+
    "\50\0\1\212\46\0\1\213\41\0\1\214\41\0\1\215"+
    "\21\0\2\3\3\0\10\3\1\0\1\3\2\0\1\3"+
    "\1\216\2\3\1\0\10\3\30\0\1\217\21\0\2\3"+
    "\3\0\10\3\1\0\1\3\2\0\1\3\1\220\2\3"+
    "\1\0\10\3\6\0\2\3\3\0\10\3\1\0\1\3"+
    "\1\0\1\221\1\222\3\3\1\0\10\3\6\0\2\3"+
    "\3\0\2\3\1\223\5\3\1\0\1\3\2\0\4\3"+
    "\1\0\10\3\6\0\2\3\3\0\2\3\1\224\5\3"+
    "\1\0\1\3\2\0\4\3\1\0\10\3\26\0\2\225"+
    "\22\0\2\3\3\0\10\3\1\0\1\3\1\0\1\225"+
    "\1\226\3\3\1\0\10\3\6\0\2\3\3\0\3\3"+
    "\1\227\4\3\1\0\1\3\2\0\4\3\1\0\10\3"+
    "\6\0\2\3\3\0\1\3\1\230\6\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\34\0\1\231\15\0\2\3"+
    "\3\0\10\3\1\0\1\3\2\0\4\3\1\0\1\232"+
    "\7\3\15\0\1\233\34\0\2\3\3\0\1\3\1\234"+
    "\6\3\1\0\1\3\2\0\4\3\1\0\10\3\17\0"+
    "\1\235\61\0\1\236\25\0\1\237\41\0\1\240\60\0"+
    "\1\241\25\0\1\242\47\0\1\243\55\0\1\244\31\0"+
    "\1\245\55\0\1\246\26\0\1\247\46\0\1\250\31\0"+
    "\2\3\3\0\5\3\1\251\2\3\1\0\1\3\2\0"+
    "\4\3\1\0\10\3\20\0\1\252\31\0\2\3\3\0"+
    "\5\3\1\253\2\3\1\0\1\3\2\0\4\3\1\0"+
    "\10\3\32\0\1\254\17\0\2\3\3\0\10\3\1\0"+
    "\1\3\2\0\3\3\1\255\1\0\10\3\6\0\2\3"+
    "\3\0\1\3\1\256\6\3\1\0\1\3\2\0\4\3"+
    "\1\0\10\3\13\0\1\257\36\0\2\3\3\0\1\260"+
    "\7\3\1\0\1\3\2\0\4\3\1\0\10\3\6\0"+
    "\2\3\3\0\1\3\1\261\6\3\1\0\1\3\2\0"+
    "\4\3\1\0\10\3\6\0\2\3\3\0\10\3\1\0"+
    "\1\3\2\0\4\3\1\0\1\262\7\3\21\0\1\263"+
    "\4\0\2\264\22\0\2\3\3\0\6\3\1\265\1\3"+
    "\1\0\1\3\1\0\1\264\1\266\3\3\1\0\10\3"+
    "\14\0\1\267\63\0\1\270\41\0\1\271\27\0\1\272"+
    "\57\0\1\273\30\0\1\274\61\0\1\275\25\0\1\276"+
    "\41\0\1\277\43\0\1\300\46\0\1\301\42\0\1\302"+
    "\32\0\2\3\3\0\4\3\1\303\3\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\17\0\1\304\32\0\2\3"+
    "\3\0\4\3\1\305\3\3\1\0\1\3\2\0\4\3"+
    "\1\0\10\3\6\0\2\3\3\0\2\3\1\306\5\3"+
    "\1\0\1\3\2\0\4\3\1\0\10\3\6\0\2\3"+
    "\3\0\10\3\1\0\1\3\2\0\4\3\1\0\1\3"+
    "\1\307\6\3\26\0\2\310\50\0\1\311\15\0\2\3"+
    "\3\0\10\3\1\0\1\3\1\0\1\310\1\312\3\3"+
    "\1\0\10\3\6\0\2\3\3\0\10\3\1\0\1\3"+
    "\2\0\4\3\1\0\1\313\7\3\31\0\1\314\31\0"+
    "\1\315\44\0\1\316\42\0\1\317\43\0\1\320\60\0"+
    "\1\321\41\0\1\322\27\0\1\323\57\0\1\324\31\0"+
    "\1\325\45\0\1\326\27\0\2\3\3\0\5\3\1\327"+
    "\2\3\1\0\1\3\2\0\4\3\1\0\10\3\6\0"+
    "\2\3\3\0\10\3\1\0\1\3\1\0\1\330\1\331"+
    "\3\3\1\0\10\3\34\0\1\332\35\0\2\333\22\0"+
    "\2\3\3\0\10\3\1\0\1\3\2\0\4\3\1\0"+
    "\1\334\7\3\6\0\2\3\3\0\10\3\1\0\1\3"+
    "\1\0\1\333\1\335\3\3\1\0\10\3\15\0\1\336"+
    "\60\0\1\337\26\0\1\340\45\0\1\341\44\0\1\342"+
    "\42\0\1\343\43\0\1\344\46\0\1\345\40\0\1\346"+
    "\32\0\2\3\3\0\4\3\1\347\3\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\17\0\1\350\61\0\1\351"+
    "\14\0\2\3\3\0\4\3\1\352\3\3\1\0\1\3"+
    "\2\0\4\3\1\0\10\3\6\0\2\3\3\0\10\3"+
    "\1\0\1\3\2\0\4\3\1\0\1\3\1\353\6\3"+
    "\20\0\1\354\43\0\1\355\55\0\1\356\26\0\1\357"+
    "\50\0\1\360\47\0\2\361\22\0\2\3\3\0\7\3"+
    "\1\362\1\0\1\3\2\0\4\3\1\0\10\3\6\0"+
    "\2\3\3\0\10\3\1\0\1\3\1\0\1\361\1\363"+
    "\3\3\1\0\10\3\16\0\1\364\50\0\2\365\37\0"+
    "\1\366\42\0\1\367\32\0\2\3\3\0\4\3\1\370"+
    "\3\3\1\0\1\3\2\0\4\3\1\0\10\3\42\0"+
    "\1\371\24\0\2\372\41\0\1\373\27\0\2\3\3\0"+
    "\7\3\1\374\1\0\1\3\2\0\4\3\1\0\10\3"+
    "\35\0\1\375\43\0\1\376\34\0\2\377\34\0\1\u0100"+
    "\57\0\1\u0101\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\2\11\1\1\1\0\1\11\1\0"+
    "\1\11\10\1\6\0\1\11\2\1\1\0\3\1\1\0"+
    "\16\1\13\0\1\1\1\0\3\1\1\0\11\1\1\0"+
    "\2\1\1\0\2\1\15\0\1\1\1\0\2\1\1\11"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\1\11\2\1"+
    "\2\0\1\11\12\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\5\1\1\0\1\1\6\0\1\11\4\0\1\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\3\1\2\0"+
    "\2\1\13\0\1\11\1\1\1\11\3\1\2\0\2\1"+
    "\1\0\2\11\7\0\1\11\1\1\1\0\1\1\2\0"+
    "\2\1\2\0\3\11\2\0\2\11\1\1\2\0\2\1"+
    "\3\0\2\11\1\0\2\1\1\0\1\11\2\0\1\1"+
    "\1\0\2\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public mng_error e = new mng_error();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_g(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(simb.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Integer li=yyline+1;
                            Integer co=yycolumn+1;System.out.println("Error Lexico:js " + yytext() + "  linea: " +li + " columna: " + co);
                            //
                            e.AddError("Caracter invalido "+yytext(),li,co,var.archivo,"LEXICO");
            }
          case 44: break;
          case 2: 
            { return new Symbol(simb.er_id,yyline,yycolumn,new String(yytext().toUpperCase()));
            }
          case 45: break;
          case 3: 
            { return new Symbol(simb.er_entero,yyline,yycolumn,new String(yytext()));
            }
          case 46: break;
          case 4: 
            { return new Symbol(simb.x,yyline,yycolumn,new String(yytext()));
            }
          case 47: break;
          case 5: 
            { return new Symbol(simb.y,yyline,yycolumn,new String(yytext()));
            }
          case 48: break;
          case 6: 
            { return new Symbol(simb.mayor,yyline,yycolumn,new String(yytext()));
            }
          case 49: break;
          case 7: 
            { return new Symbol(simb.is,yyline,yycolumn,new String(yytext()));
            }
          case 50: break;
          case 8: 
            { 
            }
          case 51: break;
          case 9: 
            { return new Symbol(simb.er_cadena,yyline,yycolumn,new String(yytext().substring(1, yytext().length()-1)));
            }
          case 52: break;
          case 10: 
            { return new Symbol(simb.call,yyline,yycolumn,new String(yytext()));
            }
          case 53: break;
          case 11: 
            { return new Symbol(simb.id,yyline,yycolumn,new String(yytext()));
            }
          case 54: break;
          case 12: 
            { return new Symbol(simb.all,yyline,yycolumn,new String(yytext()));
            }
          case 55: break;
          case 13: 
            { return new Symbol(simb.tam,yyline,yycolumn,new String(yytext()));
            }
          case 56: break;
          case 14: 
            { return new Symbol(simb.alto,yyline,yycolumn,new String(yytext()));
            }
          case 57: break;
          case 15: 
            { return new Symbol(simb.path,yyline,yycolumn,new String(yytext()));
            }
          case 58: break;
          case 16: 
            { return new Symbol(simb.tipo,yyline,yycolumn,new String(yytext()));
            }
          case 59: break;
          case 17: 
            { return new Symbol(simb.ancho,yyline,yycolumn,new String(yytext()));
            }
          case 60: break;
          case 18: 
            { return new Symbol(simb.falso,yyline,yycolumn,new String(yytext()));
            }
          case 61: break;
          case 19: 
            { return new Symbol(simb.i_dato,yyline,yycolumn,new String(yytext()));
            }
          case 62: break;
          case 20: 
            { return new Symbol(simb.color,yyline,yycolumn,new String(yytext()));
            }
          case 63: break;
          case 21: 
            { return new Symbol(simb.accion,yyline,yycolumn,new String(yytext()));
            }
          case 64: break;
          case 22: 
            { return new Symbol(simb.fuente,yyline,yycolumn,new String(yytext()));
            }
          case 65: break;
          case 23: 
            { return new Symbol(simb.f_dato,yyline,yycolumn,new String(yytext()));
            }
          case 66: break;
          case 24: 
            { return new Symbol(simb.maximo,yyline,yycolumn,new String(yytext()));
            }
          case 67: break;
          case 25: 
            { return new Symbol(simb.minimo,yyline,yycolumn,new String(yytext()));
            }
          case 68: break;
          case 26: 
            { return new Symbol(simb.nombre,yyline,yycolumn,new String(yytext()));
            }
          case 69: break;
          case 27: 
            { return new Symbol(simb.negrita,yyline,yycolumn,new String(yytext()));
            }
          case 70: break;
          case 28: 
            { return new Symbol(simb.cursiva,yyline,yycolumn,new String(yytext()));
            }
          case 71: break;
          case 29: 
            { return new Symbol(simb.i_ven,yyline,yycolumn,new String(yytext()));
            }
          case 72: break;
          case 30: 
            { return new Symbol(simb.i_defecto,yyline,yycolumn,new String(yytext()));
            }
          case 73: break;
          case 31: 
            { return new Symbol(simb.i_control,yyline,yycolumn,new String(yytext()));
            }
          case 74: break;
          case 32: 
            { return new Symbol(simb.verdadero,yyline,yycolumn,new String(yytext()));
            }
          case 75: break;
          case 33: 
            { return new Symbol(simb.i_imp,yyline,yycolumn,new String(yytext()));
            }
          case 76: break;
          case 34: 
            { return new Symbol(simb.f_ven,yyline,yycolumn,new String(yytext()));
            }
          case 77: break;
          case 35: 
            { return new Symbol(simb.f_defecto,yyline,yycolumn,new String(yytext()));
            }
          case 78: break;
          case 36: 
            { return new Symbol(simb.f_control,yyline,yycolumn,new String(yytext()));
            }
          case 79: break;
          case 37: 
            { return new Symbol(simb.referencia,yyline,yycolumn,new String(yytext()));
            }
          case 80: break;
          case 38: 
            { return new Symbol(simb.f_imp,yyline,yycolumn,new String(yytext()));
            }
          case 81: break;
          case 39: 
            { return new Symbol(simb.ac_fi,yyline,yycolumn,new String(yytext()));
            }
          case 82: break;
          case 40: 
            { return new Symbol(simb.i_lista,yyline,yycolumn,new String(yytext()));
            }
          case 83: break;
          case 41: 
            { return new Symbol(simb.f_lista,yyline,yycolumn,new String(yytext()));
            }
          case 84: break;
          case 42: 
            { return new Symbol(simb.ac_in,yyline,yycolumn,new String(yytext()));
            }
          case 85: break;
          case 43: 
            { return new Symbol(simb.autoplay,yyline,yycolumn,new String(yytext()));
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
