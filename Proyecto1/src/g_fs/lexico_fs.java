/* The following code was generated by JFlex 1.6.1 */

package g_fs;
import java_cup.*;
import java_cup.runtime.Symbol;
import errors.mng_error;
import proyecto1.var;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_fs.jflex</tt>
 */
public class lexico_fs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\10\1\64\1\63\1\63\22\0\1\63\1\52\1\4"+
    "\4\0\1\5\1\16\1\41\1\7\1\45\1\44\1\47\1\3\1\6"+
    "\12\2\1\56\1\57\1\51\1\46\1\50\1\60\1\0\1\11\1\32"+
    "\1\13\1\22\1\14\1\40\1\30\1\43\1\20\1\36\1\1\1\12"+
    "\1\27\1\31\1\23\1\24\1\37\1\15\1\34\1\26\1\25\1\21"+
    "\1\1\1\35\1\42\1\1\1\61\1\0\1\62\1\53\1\1\1\0"+
    "\1\11\1\32\1\13\1\22\1\14\1\40\1\30\1\43\1\20\1\36"+
    "\1\1\1\12\1\27\1\31\1\23\1\24\1\37\1\15\1\34\1\26"+
    "\1\25\1\21\1\1\1\35\1\42\1\1\1\54\1\0\1\55\7\0"+
    "\1\64\252\0\2\17\115\0\1\33\u1ea8\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\4\2\1\10\1\1\10\2\1\1\2\2\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\1\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\0"+
    "\1\30\3\0\1\31\1\32\1\2\1\0\5\2\2\0"+
    "\10\2\1\0\3\2\1\0\1\33\1\2\1\33\1\2"+
    "\1\0\2\2\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\7\1\0\2\2\1\0\2\2"+
    "\1\0\4\2\2\0\2\2\1\45\2\2\1\0\6\2"+
    "\1\0\2\2\1\0\1\2\2\0\3\2\1\0\2\2"+
    "\1\7\3\2\1\0\2\2\2\46\3\2\3\0\5\2"+
    "\1\0\4\2\1\47\1\0\1\2\1\0\1\2\1\50"+
    "\1\0\1\2\1\0\1\51\1\2\1\51\1\0\1\2"+
    "\1\0\2\2\1\0\3\2\1\0\5\2\3\0\5\2"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\52\1\0\1\2\1\0"+
    "\1\2\1\0\3\2\1\0\5\2\1\0\7\2\3\0"+
    "\5\2\1\0\3\2\1\53\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\54\1\2\1\55\1\0\6\2\1\0\1\2\1\0"+
    "\4\2\1\56\1\2\3\0\4\2\1\57\1\0\1\2"+
    "\1\60\1\2\1\61\1\62\1\63\1\0\1\2\1\64"+
    "\2\65\1\2\1\0\7\2\1\0\1\2\1\0\1\2"+
    "\1\0\3\2\1\66\1\67\1\70\1\0\1\67\1\70"+
    "\2\2\1\0\2\2\1\0\1\2\1\71\1\0\1\2"+
    "\1\72\5\2\1\0\1\2\1\0\1\2\1\0\3\2"+
    "\1\0\1\73\1\0\2\2\1\0\1\2\1\0\7\2"+
    "\1\0\1\2\1\0\1\2\1\0\3\2\1\74\1\0"+
    "\2\2\2\75\1\0\6\2\1\0\1\2\1\76\1\0"+
    "\1\2\1\77\1\100\1\0\2\2\1\0\2\2\1\101"+
    "\6\2\1\102\1\0\1\2\1\0\1\2\1\0\3\2"+
    "\1\0\5\2\1\0\1\2\1\103\1\0\1\2\1\104"+
    "\2\2\1\0\5\2\1\0\1\2\1\0\2\2\1\105"+
    "\1\0\1\2\1\106\3\2\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\1\107\2\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\110\1\111\1\0\1\2\1\112\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\113\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\114\1\0\1\2\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\65\0\65\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\u066b\0\324\0\65\0\u0109\0\u06a0"+
    "\0\u06d5\0\65\0\65\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u066b\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\152\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\65\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\65"+
    "\0\152\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u1942\0\65\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\152\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\65\0\u1aea\0\152\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
    "\0\u225e\0\u2293\0\65\0\152\0\u22c8\0\u22fd\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\65\0\u29d2"+
    "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a"+
    "\0\u2baf\0\u2be4\0\u2c19\0\65\0\u2c4e\0\65\0\u2c83\0\u2cb8"+
    "\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60"+
    "\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\65\0\u2f69\0\u2f9e\0\u2fd3"+
    "\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\152\0\u3111\0\u3146"+
    "\0\152\0\u317b\0\65\0\65\0\65\0\u31b0\0\u31e5\0\65"+
    "\0\65\0\152\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323"+
    "\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb"+
    "\0\u3500\0\u3535\0\u356a\0\152\0\65\0\65\0\u359f\0\152"+
    "\0\152\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712"+
    "\0\65\0\u3747\0\u377c\0\65\0\u37b1\0\u37e6\0\u381b\0\u3850"+
    "\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8"+
    "\0\u3a2d\0\u3a62\0\152\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b"+
    "\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13"+
    "\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb"+
    "\0\65\0\u3ef0\0\u3f25\0\u3f5a\0\65\0\152\0\u3f8f\0\u3fc4"+
    "\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137\0\65"+
    "\0\u416c\0\u41a1\0\65\0\65\0\u41d6\0\u420b\0\u4240\0\u4275"+
    "\0\u42aa\0\u42df\0\65\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8"+
    "\0\u441d\0\65\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b"+
    "\0\u4590\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703"+
    "\0\u4738\0\u476d\0\65\0\u47a2\0\u47d7\0\65\0\u480c\0\u4841"+
    "\0\u4876\0\u48ab\0\u48e0\0\u4915\0\u494a\0\u497f\0\u49b4\0\u49e9"+
    "\0\u4a1e\0\u4a53\0\u4a88\0\65\0\u4abd\0\u4af2\0\65\0\u4b27"+
    "\0\u4b5c\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf"+
    "\0\u4d04\0\65\0\u4d39\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42"+
    "\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\65\0\65\0\u4f4b\0\u4f80"+
    "\0\65\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\u5089\0\u50be\0\u50f3"+
    "\0\u5128\0\u515d\0\u5192\0\65\0\u51c7\0\u51fc\0\u5231\0\u5266"+
    "\0\u529b\0\u52d0\0\65\0\u5305\0\u533a\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\3\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\3\1\25\1\26\1\3"+
    "\1\27\1\30\1\31\1\32\3\3\1\33\1\34\2\3"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\12"+
    "\67\0\2\3\6\0\5\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\23\0\1\4\1\54\61\0\4\55\1\56"+
    "\60\55\5\57\1\56\57\57\6\0\1\60\1\61\36\0"+
    "\1\62\64\0\1\63\26\0\1\12\52\0\1\12\2\0"+
    "\2\3\6\0\1\3\1\64\3\3\2\0\13\3\1\65"+
    "\1\66\4\3\1\0\2\3\22\0\2\3\6\0\3\3"+
    "\1\67\1\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\1\70\3\3\1\71\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\3\3"+
    "\1\72\1\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\50\0\1\73\1\0\1\74\34\0\2\3\6\0\5\3"+
    "\2\0\7\3\1\75\1\3\1\76\1\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\1\77\2\3\1\100"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\3\3\1\101\1\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\12\3\1\102\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\3\3\1\103\7\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\1\104\4\3\1\0"+
    "\1\105\1\106\12\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\5\3\1\107\5\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\5\3\1\110\5\3\1\0\5\3\1\0\2\3\35\0"+
    "\1\111\2\0\2\112\45\0\2\3\6\0\3\3\1\113"+
    "\1\3\1\0\1\112\1\114\12\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\1\115\4\3\1\0\1\116"+
    "\1\117\4\3\1\120\5\3\1\0\5\3\1\0\2\3"+
    "\66\0\1\121\1\122\64\0\1\123\64\0\1\124\1\125"+
    "\63\0\1\126\64\0\1\127\64\0\1\130\20\0\1\131"+
    "\62\0\10\132\1\0\54\132\7\61\1\133\55\61\1\0"+
    "\2\3\6\0\2\3\1\134\2\3\2\0\10\3\1\135"+
    "\2\3\1\0\5\3\1\0\2\3\34\0\1\136\52\0"+
    "\2\3\6\0\2\3\1\137\2\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\3\3\1\140"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\13\3\1\141\1\142\4\3"+
    "\1\0\2\3\22\0\2\3\6\0\3\3\1\143\1\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\2\3\1\144\3\3\1\145\4\3"+
    "\1\0\5\3\1\0\2\3\45\0\1\146\61\0\1\147"+
    "\44\0\2\3\6\0\5\3\2\0\4\3\1\150\6\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\1\3\1\151\11\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\4\3\1\152\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\4\3\1\153"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\154\4\3\1\155\1\156"+
    "\3\3\1\157\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\6\3\1\160\4\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\2\3\1\161\10\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\4\3\1\162\6\3\1\0\1\3\1\163\3\3"+
    "\1\0\2\3\52\0\1\164\34\0\2\3\6\0\5\3"+
    "\2\0\11\3\1\165\1\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\1\3\1\166\3\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\13\3\1\167\1\170\4\3\1\0\2\3\33\0"+
    "\1\171\103\0\1\172\34\0\2\3\6\0\1\3\1\173"+
    "\3\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\11\3\1\174\1\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\1\3\1\175"+
    "\3\3\2\0\13\3\1\0\5\3\1\0\2\3\33\0"+
    "\1\176\53\0\2\3\6\0\1\3\1\177\3\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\11\3\1\200\1\3\1\0\5\3\1\0"+
    "\2\3\21\0\10\132\1\201\54\132\6\61\1\201\1\133"+
    "\55\61\1\0\2\3\6\0\1\3\1\202\1\3\1\203"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\5\3\1\204\5\3\1\0"+
    "\5\3\1\0\2\3\35\0\1\205\51\0\2\3\6\0"+
    "\3\3\1\206\1\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\4\3\1\207\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\44\0\1\210\42\0\2\3"+
    "\6\0\5\3\2\0\3\3\1\211\7\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\1\212\4\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\5\3\1\213\5\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\2\0\3\3\1\214"+
    "\7\3\1\0\5\3\1\0\2\3\36\0\1\215\5\0"+
    "\1\216\55\0\1\217\51\0\2\3\6\0\4\3\1\220"+
    "\2\0\3\3\1\221\7\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\3\3\1\222\1\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\2\3\1\223\10\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\3\3\1\224\1\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\34\0\1\225\52\0\2\3"+
    "\6\0\2\3\1\226\2\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\3\3\1\227\1\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\3\3\1\230\1\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\3\3"+
    "\1\231\7\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\1\232\1\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\1\0\1\233\1\234"+
    "\12\3\1\0\5\3\1\0\2\3\40\0\2\235\45\0"+
    "\2\3\6\0\5\3\1\0\1\235\1\236\12\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\3\3\1\237\7\3\1\0\5\3\1\0\2\3\34\0"+
    "\1\240\52\0\2\3\6\0\2\3\1\241\2\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\35\0\1\242\73\0"+
    "\1\243\42\0\2\3\6\0\3\3\1\244\1\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\3\3\1\245\7\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\2\0\13\3\1\246"+
    "\1\247\4\3\1\0\2\3\47\0\1\250\37\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\251\4\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\2\3\1\252\2\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\253\1\254\12\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\255\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\11\3\1\256\1\3\1\0\5\3\1\0"+
    "\2\3\52\0\1\257\34\0\2\3\6\0\5\3\2\0"+
    "\11\3\1\260\1\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\10\3\1\261\2\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\4\3\1\262"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\2\3\1\263\2\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\264\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\40\0\2\265\61\0"+
    "\1\266\64\0\1\267\50\0\2\3\6\0\5\3\1\0"+
    "\1\265\1\270\12\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\4\3\1\271\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\272\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\1\273\4\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\11\3\1\274\1\3"+
    "\1\0\5\3\1\0\2\3\35\0\1\275\51\0\2\3"+
    "\6\0\3\3\1\276\1\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\2\3\1\277\2\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\11\3\1\300\1\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\13\3"+
    "\1\301\1\302\4\3\1\0\2\3\50\0\1\303\36\0"+
    "\2\3\6\0\5\3\2\0\7\3\1\304\3\3\1\0"+
    "\5\3\1\0\2\3\50\0\1\305\36\0\2\3\6\0"+
    "\5\3\2\0\7\3\1\306\3\3\1\0\5\3\1\0"+
    "\2\3\32\0\1\307\54\0\2\3\6\0\1\310\4\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\34\0\1\311"+
    "\52\0\2\3\6\0\2\3\1\312\2\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\44\0\1\313\42\0\2\3"+
    "\6\0\5\3\2\0\3\3\1\314\7\3\1\0\5\3"+
    "\1\0\2\3\35\0\1\315\51\0\2\3\6\0\3\3"+
    "\1\316\1\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\1\0\1\317\1\320\12\3"+
    "\1\0\5\3\1\0\2\3\34\0\1\321\52\0\2\3"+
    "\6\0\2\3\1\322\2\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\323\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\3\3\1\324\7\3\1\0\5\3\1\0"+
    "\2\3\43\0\1\325\43\0\2\3\6\0\5\3\2\0"+
    "\2\3\1\326\10\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\13\3\1\0\1\3\1\327"+
    "\3\3\1\0\2\3\22\0\2\3\6\0\1\330\1\3"+
    "\1\331\1\3\1\332\1\0\1\333\1\334\1\335\1\336"+
    "\3\3\1\337\3\3\1\340\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\3\3\1\341\1\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\11\3\1\342\1\3\1\0\5\3\1\0\2\3"+
    "\50\0\1\343\63\0\1\344\64\0\1\345\37\0\2\3"+
    "\6\0\5\3\2\0\7\3\1\346\3\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\6\3"+
    "\1\347\4\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\350\4\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\2\3"+
    "\1\351\10\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\3\3\1\352\1\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\52\0\1\353\34\0\2\3\6\0\5\3"+
    "\2\0\11\3\1\354\1\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\6\3\1\355\4\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\3\3"+
    "\1\356\1\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\37\0\1\357\47\0\2\3\6\0\5\3\1\357\1\0"+
    "\13\3\1\0\5\3\1\0\2\3\44\0\1\360\42\0"+
    "\2\3\6\0\5\3\2\0\3\3\1\361\7\3\1\0"+
    "\5\3\1\0\2\3\44\0\1\362\42\0\2\3\6\0"+
    "\5\3\2\0\3\3\1\363\7\3\1\0\5\3\1\0"+
    "\2\3\36\0\1\364\50\0\2\3\6\0\4\3\1\365"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\34\0\1\366"+
    "\52\0\2\3\6\0\2\3\1\367\2\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\36\0\1\370\50\0\2\3"+
    "\6\0\4\3\1\371\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\44\0\1\372\42\0\2\3\6\0\5\3\2\0"+
    "\3\3\1\373\7\3\1\0\5\3\1\0\2\3\37\0"+
    "\1\374\47\0\2\3\6\0\5\3\1\374\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\1\375"+
    "\4\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\1\376\1\0\13\3\1\0\5\3"+
    "\1\0\2\3\35\0\1\377\51\0\2\3\6\0\3\3"+
    "\1\u0100\1\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\7\3\1\u0101\3\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\4\3"+
    "\1\u0102\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\1\u0103\4\3\2\0\3\3\1\u0104\7\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\3\3"+
    "\1\u0105\1\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\50\0\1\u0106\36\0\2\3\6\0\5\3\2\0\7\3"+
    "\1\u0107\3\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\1\0\1\u0108\1\u0109\12\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\3\3\1\u010a\1\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\3\3\1\u010b\1\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\3\3"+
    "\1\u010c\7\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\1\u010d\1\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\1\u010e\4\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\40\0\2\u010f\55\0\1\u0110"+
    "\72\0\2\u0111\45\0\2\3\6\0\5\3\1\0\1\u010f"+
    "\1\u0112\12\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\1\u0113\4\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\1\0\1\u0111\1\u0114"+
    "\12\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\3\3\1\u0115\1\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\4\3\1\u0116\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\43\0\1\u0117\43\0\2\3"+
    "\6\0\5\3\2\0\2\3\1\u0118\10\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\3\3"+
    "\1\u0119\7\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\4\3\1\u011a\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\37\0\1\u011b\47\0\2\3\6\0\5\3\1\u011b"+
    "\1\0\13\3\1\0\5\3\1\0\2\3\37\0\1\u011c"+
    "\47\0\2\3\6\0\5\3\1\u011c\1\0\13\3\1\0"+
    "\5\3\1\0\2\3\37\0\1\u011d\47\0\2\3\6\0"+
    "\5\3\1\u011d\1\0\13\3\1\0\5\3\1\0\2\3"+
    "\40\0\2\u011e\45\0\2\3\6\0\5\3\1\0\1\u011e"+
    "\1\u011f\12\3\1\0\5\3\1\0\2\3\37\0\1\u0120"+
    "\47\0\2\3\6\0\5\3\1\u0120\1\0\13\3\1\0"+
    "\5\3\1\0\2\3\52\0\1\u0121\34\0\2\3\6\0"+
    "\5\3\2\0\11\3\1\u0122\1\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\4\3\1\u0123\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\52\0\1\u0124\34\0\2\3"+
    "\6\0\5\3\2\0\11\3\1\u0125\1\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\1\3\1\u0126\3\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\3\3\1\u0127\1\u0128\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\13\3"+
    "\1\0\2\3\1\u0129\2\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\11\3\1\u012a\1\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\4\3"+
    "\1\u012b\6\3\1\0\5\3\1\0\2\3\32\0\1\u012c"+
    "\54\0\2\3\6\0\1\u012d\4\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\43\0\1\u012e\43\0\2\3\6\0"+
    "\5\3\2\0\2\3\1\u012f\10\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\2\0\13\3\1\u0130"+
    "\1\u0131\4\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\13\3\1\0\1\3\1\u0132\3\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\6\3\1\u0133\4\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\4\3"+
    "\1\u0134\2\0\13\3\1\0\5\3\1\0\2\3\36\0"+
    "\1\u0135\64\0\1\u0136\64\0\1\u0137\50\0\2\3\6\0"+
    "\4\3\1\u0138\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\4\3\1\u0139\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\4\3\1\u013a"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\4\3\1\u013b\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\35\0\1\u013c\51\0\2\3\6\0\3\3\1\u013d"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\4\3\1\u013e\6\3\1\0"+
    "\5\3\1\0\2\3\44\0\1\u013f\42\0\2\3\6\0"+
    "\5\3\2\0\3\3\1\u0140\7\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\1\u0141\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\47\0\1\u0142\37\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\u0143\4\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\1\u0144\1\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\1\u0145\4\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\1\u0146\4\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\1\u0147\4\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\u0148\4\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\u0149\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\51\0\1\u014a\35\0"+
    "\2\3\6\0\5\3\2\0\10\3\1\u014b\2\3\1\0"+
    "\5\3\1\0\2\3\35\0\1\u014c\51\0\2\3\6\0"+
    "\3\3\1\u014d\1\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\45\0\1\u014e\41\0\2\3\6\0\5\3\2\0"+
    "\4\3\1\u014f\6\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\6\3\1\u0150\4\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\3\3\1\u0151\7\3\1\0\5\3\1\0\2\3\37\0"+
    "\1\u0152\47\0\2\3\6\0\5\3\1\u0152\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\3\3\1\u0153\7\3\1\0\5\3\1\0\2\3"+
    "\52\0\1\u0154\34\0\2\3\6\0\5\3\2\0\11\3"+
    "\1\u0155\1\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\3\3\1\u0156\7\3\1\0\5\3"+
    "\1\0\2\3\52\0\1\u0157\34\0\2\3\6\0\5\3"+
    "\2\0\11\3\1\u0158\1\3\1\0\5\3\1\0\2\3"+
    "\35\0\1\u0159\51\0\2\3\6\0\3\3\1\u015a\1\3"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\u015b\4\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\13\3"+
    "\1\0\5\3\1\0\1\u015c\1\3\22\0\2\3\6\0"+
    "\5\3\2\0\6\3\1\u015d\4\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\3\3\1\u015e\1\u015f\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\3\3\1\u0160\7\3\1\0\5\3\1\0"+
    "\2\3\35\0\1\u0161\51\0\2\3\6\0\3\3\1\u0162"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\44\0"+
    "\1\u0163\42\0\2\3\6\0\5\3\2\0\3\3\1\u0164"+
    "\7\3\1\0\5\3\1\0\2\3\33\0\1\u0165\53\0"+
    "\2\3\6\0\1\3\1\u0166\3\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\3\3\1\u0167\7\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\11\3\1\u0168\1\3\1\0"+
    "\5\3\1\0\2\3\62\0\1\u0169\51\0\1\u016a\37\0"+
    "\2\3\6\0\5\3\2\0\6\3\1\u016b\4\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\4\3\1\u016c"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\32\0\1\u016d"+
    "\54\0\2\3\6\0\1\u016e\4\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\37\0\1\u016f\47\0\2\3\6\0"+
    "\5\3\1\u016f\1\0\13\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\3\3\1\u0170\1\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\2\3\1\u0171\10\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\3\3\1\u0172\1\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\11\3\1\u0173\1\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\3\3\1\u0174\7\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\2\3\1\u0175\10\3\1\0\5\3\1\0\2\3"+
    "\52\0\1\u0176\34\0\2\3\6\0\5\3\2\0\11\3"+
    "\1\u0177\1\3\1\0\5\3\1\0\2\3\37\0\1\u0178"+
    "\47\0\2\3\6\0\5\3\1\u0178\1\0\13\3\1\0"+
    "\5\3\1\0\2\3\35\0\1\u0179\51\0\2\3\6\0"+
    "\3\3\1\u017a\1\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\1\u017b\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\1\u017c\1\0\13\3\1\0\5\3\1\0\2\3\35\0"+
    "\1\u017d\51\0\2\3\6\0\3\3\1\u017e\1\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\3\3\1\u017f\1\3\1\0\1\u0180\1\u0181\10\3\1\u0182"+
    "\1\3\1\0\5\3\1\0\2\3\62\0\1\u0183\24\0"+
    "\2\3\6\0\5\3\2\0\13\3\1\0\1\3\1\u0184"+
    "\3\3\1\0\2\3\22\0\2\3\6\0\3\3\1\u0185"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\13\3\1\0\1\3\1\u0186"+
    "\3\3\1\0\2\3\22\0\2\3\6\0\3\3\1\u0187"+
    "\1\3\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\1\3\1\u0188\3\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\5\3\1\u0189\5\3\1\0\5\3\1\0\2\3\37\0"+
    "\1\u018a\47\0\2\3\6\0\5\3\1\u018a\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\51\0\1\u018b\35\0\2\3"+
    "\6\0\5\3\2\0\10\3\1\u018c\2\3\1\0\5\3"+
    "\1\0\2\3\37\0\1\u018d\47\0\2\3\6\0\5\3"+
    "\1\u018d\1\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\6\3\1\u018e\4\3\1\0"+
    "\5\3\1\0\2\3\43\0\1\u018f\43\0\2\3\6\0"+
    "\5\3\2\0\2\3\1\u0190\10\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\2\0\3\3\1\u0191"+
    "\7\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\6\3\1\u0192\4\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\2\0\13\3\1\u0193"+
    "\1\u0194\4\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\6\3\1\u0195\4\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\2\3\1\u0196\10\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\11\3\1\u0197\1\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\2\3\1\u0198\2\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\32\0\1\u0199\54\0\2\3"+
    "\6\0\1\u019a\4\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\62\0\1\u019b\24\0\2\3\6\0\5\3\1\0"+
    "\1\u019c\1\u019d\12\3\1\0\5\3\1\0\2\3\37\0"+
    "\1\u019e\47\0\2\3\6\0\5\3\1\u019e\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\2\0\7\3\1\u019f\3\3\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\2\0\3\3\1\u01a0\7\3"+
    "\1\0\5\3\1\0\2\3\43\0\1\u01a1\43\0\2\3"+
    "\6\0\5\3\2\0\2\3\1\u01a2\10\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\3\3"+
    "\1\u01a3\7\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\3\3\1\u01a4\7\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\5\3\2\0\5\3"+
    "\1\u01a5\5\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\5\3\2\0\6\3\1\u01a6\4\3\1\0\5\3"+
    "\1\0\2\3\53\0\1\u01a7\33\0\2\3\6\0\5\3"+
    "\2\0\12\3\1\u01a8\1\0\5\3\1\0\2\3\60\0"+
    "\1\u01a9\26\0\2\3\6\0\5\3\2\0\13\3\1\0"+
    "\3\3\1\u01aa\1\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\2\0\12\3\1\u01ab\1\0\5\3\1\0\2\3"+
    "\22\0\2\3\6\0\5\3\1\u01ac\1\0\13\3\1\0"+
    "\5\3\1\0\2\3\35\0\1\u01ad\51\0\2\3\6\0"+
    "\3\3\1\u01ae\1\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\5\3\1\u01af\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\4\3"+
    "\1\u01b0\2\0\13\3\1\0\5\3\1\0\2\3\22\0"+
    "\2\3\6\0\5\3\2\0\7\3\1\u01b1\3\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\2\0"+
    "\3\3\1\u01b2\7\3\1\0\5\3\1\0\2\3\33\0"+
    "\1\u01b3\53\0\2\3\6\0\1\3\1\u01b4\3\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\46\0\1\u01b5\40\0"+
    "\2\3\6\0\5\3\2\0\5\3\1\u01b6\5\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\4\3\1\u01b7"+
    "\2\0\13\3\1\0\5\3\1\0\2\3\32\0\1\u01b8"+
    "\54\0\2\3\6\0\1\u01b9\4\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\1\u01ba"+
    "\1\0\13\3\1\0\5\3\1\0\2\3\22\0\2\3"+
    "\6\0\3\3\1\u01bb\1\3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\u01bc\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\35\0\1\u01bd\51\0"+
    "\2\3\6\0\3\3\1\u01be\1\3\2\0\13\3\1\0"+
    "\5\3\1\0\2\3\35\0\1\u01bf\51\0\2\3\6\0"+
    "\3\3\1\u01c0\1\3\2\0\13\3\1\0\5\3\1\0"+
    "\2\3\22\0\2\3\6\0\3\3\1\u01c1\1\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\36\0\1\u01c2\50\0"+
    "\2\3\6\0\4\3\1\u01c3\2\0\13\3\1\0\5\3"+
    "\1\0\2\3\22\0\2\3\6\0\4\3\1\u01c4\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\22\0\2\3\6\0"+
    "\5\3\1\u01c5\1\0\13\3\1\0\5\3\1\0\2\3"+
    "\37\0\1\u01c6\47\0\2\3\6\0\5\3\1\u01c6\1\0"+
    "\13\3\1\0\5\3\1\0\2\3\47\0\1\u01c7\37\0"+
    "\2\3\6\0\5\3\2\0\6\3\1\u01c8\4\3\1\0"+
    "\5\3\1\0\2\3\22\0\2\3\6\0\5\3\1\u01c9"+
    "\1\0\13\3\1\0\5\3\1\0\2\3\34\0\1\u01ca"+
    "\52\0\2\3\6\0\2\3\1\u01cb\2\3\2\0\13\3"+
    "\1\0\5\3\1\0\2\3\22\0\2\3\6\0\5\3"+
    "\1\0\1\u01cc\1\u01cd\12\3\1\0\5\3\1\0\2\3"+
    "\32\0\1\u01ce\54\0\2\3\6\0\1\u01cf\4\3\2\0"+
    "\13\3\1\0\5\3\1\0\2\3\64\0\1\u01d0\22\0"+
    "\2\3\6\0\5\3\2\0\13\3\1\0\5\3\1\0"+
    "\1\3\1\u01d1\34\0\1\u01d2\52\0\2\3\6\0\2\3"+
    "\1\u01d3\2\3\2\0\13\3\1\0\5\3\1\0\2\3"+
    "\37\0\1\u01d4\47\0\2\3\6\0\5\3\1\u01d4\1\0"+
    "\13\3\1\0\5\3\1\0\2\3\40\0\2\u01d5\45\0"+
    "\2\3\6\0\5\3\1\0\1\u01d5\1\u01d6\12\3\1\0"+
    "\5\3\1\0\2\3\44\0\1\u01d7\42\0\2\3\6\0"+
    "\5\3\2\0\3\3\1\u01d8\7\3\1\0\5\3\1\0"+
    "\2\3\42\0\1\u01d9\44\0\2\3\6\0\5\3\2\0"+
    "\1\3\1\u01da\11\3\1\0\5\3\1\0\2\3\37\0"+
    "\1\u01db\47\0\2\3\6\0\5\3\1\u01db\1\0\13\3"+
    "\1\0\5\3\1\0\2\3\44\0\1\u01dc\42\0\2\3"+
    "\6\0\5\3\2\0\3\3\1\u01dd\7\3\1\0\5\3"+
    "\1\0\2\3\37\0\1\u01de\47\0\2\3\6\0\5\3"+
    "\1\u01de\1\0\13\3\1\0\5\3\1\0\2\3\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21359];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\1\11\14\1\2\11"+
    "\6\1\10\11\2\0\1\11\3\0\2\11\1\1\1\0"+
    "\5\1\2\0\10\1\1\0\3\1\1\0\4\1\1\0"+
    "\2\1\10\11\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\4\1\2\0\5\1\1\0\6\1\1\0\2\1\1\0"+
    "\1\1\2\0\3\1\1\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\11\4\1\3\0\5\1\1\0\4\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\5\1\3\0\5\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\5\1\1\0\7\1\3\0\5\1\1\0\3\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\1\0"+
    "\6\1\1\0\1\1\1\0\4\1\1\11\1\1\3\0"+
    "\5\1\1\0\3\1\3\11\1\0\1\1\2\11\2\1"+
    "\1\0\7\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\2\11\1\0\4\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\5\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\7\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\0\2\1\1\11\1\1\1\0\6\1\1\0"+
    "\1\1\1\11\1\0\1\1\2\11\1\0\2\1\1\0"+
    "\2\1\1\11\6\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\5\1\1\0\1\1\1\11\1\0"+
    "\1\1\1\11\2\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\0\1\1\1\11\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\2\11\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public mng_error e = new mng_error();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_fs(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symbl.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Integer li=yyline+1;
                            Integer co=yycolumn+1;System.out.println("Error Lexico:js " + yytext() + "  linea: " +li + " columna: " + co);
                            //
                            e.AddError("Caracter invalido "+yytext(),li,co,var.archivo,"LEXICO");
            }
          case 78: break;
          case 2: 
            { return new Symbol(symbl.er_id,yyline,yycolumn,new String(yytext().toUpperCase()));
            }
          case 79: break;
          case 3: 
            { return new Symbol(symbl.er_entero,yyline,yycolumn,new String(yytext()));
            }
          case 80: break;
          case 4: 
            { return new Symbol(symbl.pto ,  yyline, yycolumn, new String(yytext()));
            }
          case 81: break;
          case 5: 
            { return new Symbol(symbl.divis ,  yyline, yycolumn, new String(yytext()));
            }
          case 82: break;
          case 6: 
            { return new Symbol(symbl.mul ,  yyline, yycolumn, new String(yytext()));
            }
          case 83: break;
          case 7: 
            { 
            }
          case 84: break;
          case 8: 
            { return new Symbol(symbl.para,  yyline, yycolumn, new String(yytext()));
            }
          case 85: break;
          case 9: 
            { return new Symbol(symbl.parc ,  yyline, yycolumn, new String(yytext()));
            }
          case 86: break;
          case 10: 
            { return new Symbol(symbl.coma,yyline,yycolumn,new String(yytext()));
            }
          case 87: break;
          case 11: 
            { return new Symbol(symbl.mas ,  yyline, yycolumn, new String(yytext()));
            }
          case 88: break;
          case 12: 
            { return new Symbol(symbl.is ,  yyline, yycolumn, new String(yytext()));
            }
          case 89: break;
          case 13: 
            { return new Symbol(symbl.menos ,  yyline, yycolumn, new String(yytext()));
            }
          case 90: break;
          case 14: 
            { return new Symbol(symbl.mayor ,  yyline, yycolumn, new String(yytext()));
            }
          case 91: break;
          case 15: 
            { return new Symbol(symbl.menor ,  yyline, yycolumn, new String(yytext()));
            }
          case 92: break;
          case 16: 
            { return new Symbol(symbl.pote ,  yyline, yycolumn, new String(yytext()));
            }
          case 93: break;
          case 17: 
            { return new Symbol(symbl.llava ,  yyline, yycolumn, new String(yytext()));
            }
          case 94: break;
          case 18: 
            { return new Symbol(symbl.llavc ,  yyline, yycolumn, new String(yytext()));
            }
          case 95: break;
          case 19: 
            { return new Symbol(symbl.dosptos ,  yyline, yycolumn, new String(yytext()));
            }
          case 96: break;
          case 20: 
            { return new Symbol(symbl.ptocoma ,  yyline, yycolumn, new String(yytext()));
            }
          case 97: break;
          case 21: 
            { return new Symbol(symbl.ques ,  yyline, yycolumn, new String(yytext()));
            }
          case 98: break;
          case 22: 
            { return new Symbol(symbl.cora,  yyline, yycolumn, new String(yytext()));
            }
          case 99: break;
          case 23: 
            { return new Symbol(symbl.corc ,  yyline, yycolumn, new String(yytext()));
            }
          case 100: break;
          case 24: 
            { return new Symbol(symbl.er_cadena,yyline,yycolumn,new String(yytext().substring(1, yytext().length()-2)));
            }
          case 101: break;
          case 25: 
            { return new Symbol(symbl.a_div,yyline,yycolumn,new String(yytext()));
            }
          case 102: break;
          case 26: 
            { return new Symbol(symbl.a_por,yyline,yycolumn,new String(yytext()));
            }
          case 103: break;
          case 27: 
            { return new Symbol(symbl.si,yyline,yycolumn,new String(yytext()));
            }
          case 104: break;
          case 28: 
            { return new Symbol(symbl.aumen,yyline,yycolumn,new String(yytext()));
            }
          case 105: break;
          case 29: 
            { return new Symbol(symbl.a_mas,yyline,yycolumn,new String(yytext()));
            }
          case 106: break;
          case 30: 
            { return new Symbol(symbl.igual ,  yyline, yycolumn, new String(yytext()));
            }
          case 107: break;
          case 31: 
            { return new Symbol(symbl.a_menos,yyline,yycolumn,new String(yytext()));
            }
          case 108: break;
          case 32: 
            { return new Symbol(symbl.decre,yyline,yycolumn,new String(yytext()));
            }
          case 109: break;
          case 33: 
            { return new Symbol(symbl.mayori ,  yyline, yycolumn, new String(yytext()));
            }
          case 110: break;
          case 34: 
            { return new Symbol(symbl.menori ,  yyline, yycolumn, new String(yytext()));
            }
          case 111: break;
          case 35: 
            { return new Symbol(symbl.dif ,  yyline, yycolumn, new String(yytext()));
            }
          case 112: break;
          case 36: 
            { return new Symbol(symbl.er_decimal,yyline,yycolumn,new String(yytext()));
            }
          case 113: break;
          case 37: 
            { return new Symbol(symbl.var,yyline,yycolumn,new String(yytext()));
            }
          case 114: break;
          case 38: 
            { return new Symbol(symbl.caso,yyline,yycolumn,new String(yytext()));
            }
          case 115: break;
          case 39: 
            { return new Symbol(symbl.map,yyline,yycolumn,new String(yytext()));
            }
          case 116: break;
          case 40: 
            { return new Symbol(symbl.nulo,yyline,yycolumn,new String(yytext()));
            }
          case 117: break;
          case 41: 
            { return new Symbol(symbl.sino,yyline,yycolumn,new String(yytext()));
            }
          case 118: break;
          case 42: 
            { return new Symbol(symbl.falso,yyline,yycolumn,new String(yytext()));
            }
          case 119: break;
          case 43: 
            { return new Symbol(symbl.todos,yyline,yycolumn,new String(yytext()));
            }
          case 120: break;
          case 44: 
            { return new Symbol(symbl.clic,yyline,yycolumn,new String(yytext()));
            }
          case 121: break;
          case 45: 
            { return new Symbol(symbl.alguno,yyline,yycolumn,new String(yytext()));
            }
          case 122: break;
          case 46: 
            { return new Symbol(symbl.reduce,yyline,yycolumn,new String(yytext()));
            }
          case 123: break;
          case 47: 
            { return new Symbol(symbl.detener,yyline,yycolumn,new String(yytext()));
            }
          case 124: break;
          case 48: 
            { return new Symbol(symbl.defecto,yyline,yycolumn,new String(yytext()));
            }
          case 125: break;
          case 49: 
            { return new Symbol(symbl.maximo,yyline,yycolumn,new String(yytext()));
            }
          case 126: break;
          case 50: 
            { return new Symbol(symbl.minimo,yyline,yycolumn,new String(yytext()));
            }
          case 127: break;
          case 51: 
            { return new Symbol(symbl.buscar,yyline,yycolumn,new String(yytext()));
            }
          case 128: break;
          case 52: 
            { return new Symbol(symbl.filter,yyline,yycolumn,new String(yytext()));
            }
          case 129: break;
          case 53: 
            { return new Symbol(symbl.funcion,yyline,yycolumn,new String(yytext()));
            }
          case 130: break;
          case 54: 
            { return new Symbol(symbl.retornar,yyline,yycolumn,new String(yytext()));
            }
          case 131: break;
          case 55: 
            { return new Symbol(symbl.imprimir,yyline,yycolumn,new String(yytext()));
            }
          case 132: break;
          case 56: 
            { return new Symbol(symbl.importar,yyline,yycolumn,new String(yytext()));
            }
          case 133: break;
          case 57: 
            { return new Symbol(symbl.cerrar,yyline,yycolumn,new String(yytext()));
            }
          case 134: break;
          case 58: 
            { return new Symbol(symbl.leerGxml,yyline,yycolumn,new String(yytext()));
            }
          case 135: break;
          case 59: 
            { return new Symbol(symbl.verdadero,yyline,yycolumn,new String(yytext()));
            }
          case 136: break;
          case 60: 
            { return new Symbol(symbl.invertir,yyline,yycolumn,new String(yytext()));
            }
          case 137: break;
          case 61: 
            { return new Symbol(symbl.selecciona,yyline,yycolumn,new String(yytext()));
            }
          case 138: break;
          case 62: 
            { return new Symbol(symbl.video,yyline,yycolumn,new String(yytext()));
            }
          case 139: break;
          case 63: 
            { return new Symbol(symbl.texto,yyline,yycolumn,new String(yytext()));
            }
          case 140: break;
          case 64: 
            { return new Symbol(symbl.boton,yyline,yycolumn,new String(yytext()));
            }
          case 141: break;
          case 65: 
            { return new Symbol(symbl.ascendente,yyline,yycolumn,new String(yytext()));
            }
          case 142: break;
          case 66: 
            { return new Symbol(symbl.imagen,yyline,yycolumn,new String(yytext()));
            }
          case 143: break;
          case 67: 
            { return new Symbol(symbl.descendente,yyline,yycolumn,new String(yytext()));
            }
          case 144: break;
          case 68: 
            { return new Symbol(symbl.ObtenerPorId,yyline,yycolumn,new String(yytext()));
            }
          case 145: break;
          case 69: 
            { return new Symbol(symbl.area,yyline,yycolumn,new String(yytext()));
            }
          case 146: break;
          case 70: 
            { return new Symbol(symbl.caja,yyline,yycolumn,new String(yytext()));
            }
          case 147: break;
          case 71: 
            { return new Symbol(symbl.contenedor,yyline,yycolumn,new String(yytext()));
            }
          case 148: break;
          case 72: 
            { return new Symbol(symbl.musica,yyline,yycolumn,new String(yytext()));
            }
          case 149: break;
          case 73: 
            { return new Symbol(symbl.desple,yyline,yycolumn,new String(yytext()));
            }
          case 150: break;
          case 74: 
            { return new Symbol(symbl.ObtenerPorNombre,yyline,yycolumn,new String(yytext()));
            }
          case 151: break;
          case 75: 
            { return new Symbol(symbl.ObtenerPorEtiqueta,yyline,yycolumn,new String(yytext()));
            }
          case 152: break;
          case 76: 
            { return new Symbol(symbl.controln,yyline,yycolumn,new String(yytext()));
            }
          case 153: break;
          case 77: 
            { return new Symbol(symbl.crearArrFile,yyline,yycolumn,new String(yytext()));
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
