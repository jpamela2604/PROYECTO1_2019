
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package g_fs;

import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import errors.mng_error;
import proyecto1.var;
import codigo_fs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico_fs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbl.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico_fs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico_fs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico_fs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\007\004\000\002\007\003" +
    "\000\002\026\006\000\002\003\004\000\002\003\003\000" +
    "\002\010\004\000\002\010\003\000\002\032\004\000\002" +
    "\032\005\000\002\043\004\000\002\043\010\000\002\037" +
    "\010\000\002\037\007\000\002\035\007\000\002\035\006" +
    "\000\002\031\004\000\002\031\003\000\002\041\004\000" +
    "\002\041\011\000\002\041\010\000\002\034\012\000\002" +
    "\034\011\000\002\036\006\000\002\036\005\000\002\014" +
    "\004\000\002\014\003\000\002\030\010\000\002\030\011" +
    "\000\002\030\011\000\002\030\012\000\002\042\005\000" +
    "\002\042\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\004\000\002\027" +
    "\005\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\015\004\000\002\004\005\000\002\004\003\000" +
    "\002\020\003\000\002\020\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\044\005\000\002\044\003\000\002\021\003" +
    "\000\002\021\006\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\005\000\002\021\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\033\006\000\002\033\005\000\002\017\006\000\002" +
    "\011\003\000\002\011\005\000\002\011\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\005\000\002\005\005" +
    "\000\002\005\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\003\000\002\023\007\000\002" +
    "\012\005\000\002\012\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\022\004\000" +
    "\002\022\004\000\002\024\005\000\002\006\005\000\002" +
    "\006\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\104\037\006\040\030\052\026\053\024\055" +
    "\013\056\060\057\065\062\036\063\057\064\020\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\104\014\105\033\106\055\107\005\110\064" +
    "\111\011\112\062\113\061\114\035\115\037\116\052\117" +
    "\051\120\016\121\056\001\002\000\170\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\051\uffc2\053\uffc2\055\uffc2\056\uffc2\057\uffc2\063" +
    "\uffc2\064\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\001\002\000" +
    "\104\005\104\006\112\007\116\021\111\027\113\036\110" +
    "\063\057\064\020\066\042\067\004\070\046\071\041\072" +
    "\032\073\027\074\017\075\053\076\012\104\014\105\033" +
    "\106\055\107\005\110\064\111\011\112\062\113\061\114" +
    "\035\115\037\116\052\117\051\120\016\121\056\122\115" +
    "\123\103\001\002\000\004\027\u0107\001\002\000\004\002" +
    "\u0106\001\002\000\104\026\uffdb\032\uffdb\037\uffdb\040\uffdb" +
    "\053\uffdb\055\uffdb\056\uffdb\057\uffdb\063\uffdb\064\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110" +
    "\uffdb\111\uffdb\112\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb" +
    "\117\uffdb\120\uffdb\121\uffdb\001\002\000\104\005\104\006" +
    "\112\007\116\021\111\027\113\036\110\063\057\064\020" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\122\115\123\103\001\002" +
    "\000\004\121\u0102\001\002\000\004\032\u0101\001\002\000" +
    "\006\030\376\121\246\001\002\000\004\032\375\001\002" +
    "\000\104\005\104\006\112\007\116\021\111\027\113\036" +
    "\110\063\057\064\020\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\104\014\105" +
    "\033\106\055\107\005\110\064\111\011\112\062\113\061" +
    "\114\035\115\037\116\052\117\051\120\016\121\056\122" +
    "\115\123\103\001\002\000\004\121\371\001\002\000\170" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\051\uffc5\053\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\063\uffc5\064\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\104" +
    "\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5" +
    "\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121" +
    "\uffc5\001\002\000\104\002\uffe4\037\uffe4\040\uffe4\053\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\062\uffe4\063\uffe4\064\uffe4\066" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110" +
    "\uffe4\111\uffe4\112\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4" +
    "\117\uffe4\120\uffe4\121\uffe4\001\002\000\104\026\uffda\032" +
    "\uffda\037\uffda\040\uffda\053\uffda\055\uffda\056\uffda\057\uffda" +
    "\063\uffda\064\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\104\uffda\105\uffda" +
    "\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\114" +
    "\uffda\115\uffda\116\uffda\117\uffda\120\uffda\121\uffda\001\002" +
    "\000\010\026\360\060\213\061\361\001\002\000\004\027" +
    "\350\001\002\000\104\026\uffd5\032\uffd5\037\uffd5\040\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\063\uffd5\064\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\111\uffd5\112\uffd5\113\uffd5\114\uffd5\115\uffd5\116\uffd5" +
    "\117\uffd5\120\uffd5\121\uffd5\001\002\000\004\027\345\001" +
    "\002\000\004\121\343\001\002\000\004\121\335\001\002" +
    "\000\104\026\uffd6\032\uffd6\037\uffd6\040\uffd6\053\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\063\uffd6\064\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6" +
    "\112\uffd6\113\uffd6\114\uffd6\115\uffd6\116\uffd6\117\uffd6\120" +
    "\uffd6\121\uffd6\001\002\000\004\121\332\001\002\000\006" +
    "\030\327\121\246\001\002\000\106\002\ufffc\037\ufffc\040" +
    "\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\104\ufffc\105\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\114" +
    "\ufffc\115\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc\001\002" +
    "\000\104\005\104\006\112\007\116\021\111\027\113\036" +
    "\110\063\057\064\020\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\104\014\105" +
    "\033\106\055\107\005\110\064\111\011\112\062\113\061" +
    "\114\035\115\037\116\052\117\051\120\016\121\056\122" +
    "\115\123\103\001\002\000\004\121\305\001\002\000\104" +
    "\005\104\006\112\007\116\021\111\027\113\036\110\063" +
    "\057\064\020\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\122\115\123" +
    "\103\001\002\000\104\026\uffdc\032\uffdc\037\uffdc\040\uffdc" +
    "\053\uffdc\055\uffdc\056\uffdc\057\uffdc\063\uffdc\064\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110" +
    "\uffdc\111\uffdc\112\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc" +
    "\117\uffdc\120\uffdc\121\uffdc\001\002\000\004\121\301\001" +
    "\002\000\170\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\053\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\063\uffc3\064\uffc3\066\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111" +
    "\uffc3\112\uffc3\113\uffc3\114\uffc3\115\uffc3\116\uffc3\117\uffc3" +
    "\120\uffc3\121\uffc3\001\002\000\104\026\uffdd\032\uffdd\037" +
    "\uffdd\040\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd" +
    "\064\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\104\uffdd\105\uffdd\106\uffdd" +
    "\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd\115" +
    "\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd\001\002\000\106" +
    "\026\uffed\032\uffed\037\uffed\040\uffed\053\uffed\054\263\055" +
    "\uffed\056\uffed\057\uffed\063\uffed\064\uffed\066\uffed\067\uffed" +
    "\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\112\uffed\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\120" +
    "\uffed\121\uffed\001\002\000\104\002\ufff9\037\ufff9\040\ufff9" +
    "\053\ufff9\055\ufff9\056\ufff9\057\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\075\ufff9\076\ufff9\104\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\121\ufff9\001\002\000\170\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\051\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\063\uffc1\064\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1" +
    "\001\002\000\106\002\uffff\037\006\040\030\052\026\053" +
    "\024\055\013\056\060\057\065\062\036\063\057\064\020" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\001\002\000\170\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\051\uffc9\053\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\063\uffc9\064\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9" +
    "\114\uffc9\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\001" +
    "\002\000\104\005\104\006\112\007\116\021\111\027\113" +
    "\036\110\063\057\064\020\066\042\067\004\070\046\071" +
    "\041\072\032\073\027\074\017\075\053\076\012\104\014" +
    "\105\033\106\055\107\005\110\064\111\011\112\062\113" +
    "\061\114\035\115\037\116\052\117\051\120\016\121\056" +
    "\122\115\123\103\001\002\000\104\005\104\006\112\007" +
    "\116\021\111\027\113\036\110\063\057\064\020\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\104\014\105\033\106\055\107\005\110\064" +
    "\111\011\112\062\113\061\114\035\115\037\116\052\117" +
    "\051\120\016\121\056\122\115\123\103\001\002\000\004" +
    "\121\252\001\002\000\170\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\026\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051" +
    "\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6\063\uffc6\064\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116" +
    "\uffc6\117\uffc6\120\uffc6\121\uffc6\001\002\000\006\030\247" +
    "\121\246\001\002\000\174\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\237\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\240\051\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\063\uffc8\064\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\104\uffc8\105\uffc8" +
    "\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\114" +
    "\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8\121\uffc8\001\002" +
    "\000\170\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\053\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\063\uffc4\064\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4" +
    "\112\uffc4\113\uffc4\114\uffc4\115\uffc4\116\uffc4\117\uffc4\120" +
    "\uffc4\121\uffc4\001\002\000\116\005\104\006\112\007\116" +
    "\021\111\025\077\027\113\032\235\036\110\050\114\063" +
    "\057\064\020\065\107\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\077\100\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\122\115\123\103\001\002\000\104\005\104\006\112" +
    "\007\116\021\111\027\113\036\110\063\057\064\020\066" +
    "\042\067\004\070\046\071\041\072\032\073\027\074\017" +
    "\075\053\076\012\104\014\105\033\106\055\107\005\110" +
    "\064\111\011\112\062\113\061\114\035\115\037\116\052" +
    "\117\051\120\016\121\056\122\115\123\103\001\002\000" +
    "\104\005\104\006\112\007\116\021\111\027\113\036\110" +
    "\063\057\064\020\066\042\067\004\070\046\071\041\072" +
    "\032\073\027\074\017\075\053\076\012\104\014\105\033" +
    "\106\055\107\005\110\064\111\011\112\062\113\061\114" +
    "\035\115\037\116\052\117\051\120\016\121\056\122\115" +
    "\123\103\001\002\000\104\002\000\037\006\040\030\053" +
    "\024\055\013\056\060\057\065\062\036\063\057\064\020" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\001\002\000\104\005\104" +
    "\006\112\007\116\021\111\027\113\036\110\063\057\064" +
    "\020\066\042\067\004\070\046\071\041\072\032\073\027" +
    "\074\017\075\053\076\012\104\014\105\033\106\055\107" +
    "\005\110\064\111\011\112\062\113\061\114\035\115\037" +
    "\116\052\117\051\120\016\121\056\122\115\123\103\001" +
    "\002\000\004\027\207\001\002\000\022\010\073\011\075" +
    "\042\074\043\071\044\072\045\070\046\067\047\076\001" +
    "\002\000\114\005\104\006\112\007\116\021\111\025\077" +
    "\027\113\036\110\050\114\063\057\064\020\065\107\066" +
    "\042\067\004\070\046\071\041\072\032\073\027\074\017" +
    "\075\053\076\012\077\100\104\014\105\033\106\055\107" +
    "\005\110\064\111\011\112\062\113\061\114\035\115\037" +
    "\116\052\117\051\120\016\121\056\122\115\123\103\001" +
    "\002\000\114\005\104\006\112\007\116\021\111\025\077" +
    "\027\113\036\110\050\114\063\057\064\020\065\107\066" +
    "\042\067\004\070\046\071\041\072\032\073\027\074\017" +
    "\075\053\076\012\077\100\104\014\105\033\106\055\107" +
    "\005\110\064\111\011\112\062\113\061\114\035\115\037" +
    "\116\052\117\051\120\016\121\056\122\115\123\103\001" +
    "\002\000\064\063\057\064\020\066\042\067\004\070\046" +
    "\071\041\072\032\073\027\074\017\075\053\076\012\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\001\002\000\114\005\104\006\112\007\116\021\111" +
    "\025\077\027\113\036\110\050\114\063\057\064\020\065" +
    "\107\066\042\067\004\070\046\071\041\072\032\073\027" +
    "\074\017\075\053\076\012\077\100\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\122\115\123" +
    "\103\001\002\000\150\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\026\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\037\uff83\040\uff83\041\uff83\051\uff83\053\uff83\055" +
    "\uff83\056\uff83\057\uff83\063\uff83\064\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076" +
    "\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83" +
    "\112\uff83\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\120" +
    "\uff83\121\uff83\001\002\000\114\005\104\006\112\007\116" +
    "\021\111\025\077\027\113\036\110\050\114\063\057\064" +
    "\020\065\107\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\077\100\104\014\105" +
    "\033\106\055\107\005\110\064\111\011\112\062\113\061" +
    "\114\035\115\037\116\052\117\051\120\016\121\056\122" +
    "\115\123\103\001\002\000\150\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\024\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\037\uff84\040\uff84\041\uff84\051\uff84\053" +
    "\uff84\055\uff84\056\uff84\057\uff84\063\uff84\064\uff84\066\uff84" +
    "\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075" +
    "\uff84\076\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84" +
    "\111\uff84\112\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117" +
    "\uff84\120\uff84\121\uff84\001\002\000\114\005\104\006\112" +
    "\007\116\021\111\025\077\027\113\036\110\050\114\063" +
    "\057\064\020\065\107\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\077\100\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\122\115\123\103\001\002\000\004\121\173\001\002" +
    "\000\114\005\104\006\112\007\116\021\111\025\077\027" +
    "\113\036\110\050\114\063\057\064\020\065\107\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\077\100\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\122\115\123\103\001\002" +
    "\000\104\026\uffcb\032\uffcb\037\uffcb\040\uffcb\053\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\063\uffcb\064\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb" +
    "\112\uffcb\113\uffcb\114\uffcb\115\uffcb\116\uffcb\117\uffcb\120" +
    "\uffcb\121\uffcb\001\002\000\136\012\162\013\166\014\160" +
    "\015\161\016\165\017\164\026\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\051\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\063\uff9c\064" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\076\uff9c\104\uff9c\105\uff9c\106\uff9c\107" +
    "\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\115\uff9c" +
    "\116\uff9c\117\uff9c\120\uff9c\121\uff9c\001\002\000\150\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\026\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\051\uff8a\053\uff8a\055\uff8a\056\uff8a\057\uff8a\063" +
    "\uff8a\064\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\076\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\107\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a" +
    "\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\001\002\000" +
    "\150\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\026\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\037\uff87" +
    "\040\uff87\041\uff87\051\uff87\053\uff87\055\uff87\056\uff87\057" +
    "\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\104\uff87\105" +
    "\uff87\106\uff87\107\uff87\110\uff87\111\uff87\112\uff87\113\uff87" +
    "\114\uff87\115\uff87\116\uff87\117\uff87\120\uff87\121\uff87\001" +
    "\002\000\150\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\143\021\145\022\146\023\144\024\147\026" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\037\uff99\040\uff99\041\uff99\051\uff99\053\uff99\055\uff99\056" +
    "\uff99\057\uff99\063\uff99\064\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\104" +
    "\uff99\105\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112\uff99" +
    "\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\120\uff99\121" +
    "\uff99\001\002\000\150\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\026\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85" +
    "\035\uff85\037\uff85\040\uff85\041\uff85\051\uff85\053\uff85\055" +
    "\uff85\056\uff85\057\uff85\063\uff85\064\uff85\066\uff85\067\uff85" +
    "\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076" +
    "\uff85\104\uff85\105\uff85\106\uff85\107\uff85\110\uff85\111\uff85" +
    "\112\uff85\113\uff85\114\uff85\115\uff85\116\uff85\117\uff85\120" +
    "\uff85\121\uff85\001\002\000\114\005\104\006\112\007\116" +
    "\021\111\025\077\027\113\036\110\050\114\063\057\064" +
    "\020\065\107\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\077\100\104\014\105" +
    "\033\106\055\107\005\110\064\111\011\112\062\113\061" +
    "\114\035\115\037\116\052\117\051\120\016\121\056\122" +
    "\115\123\103\001\002\000\104\005\104\006\112\007\116" +
    "\021\111\027\113\036\110\063\057\064\020\066\042\067" +
    "\004\070\046\071\041\072\032\073\027\074\017\075\053" +
    "\076\012\104\014\105\033\106\055\107\005\110\064\111" +
    "\011\112\062\113\061\114\035\115\037\116\052\117\051" +
    "\120\016\121\056\122\115\123\103\001\002\000\102\005" +
    "\104\006\112\007\116\021\111\027\113\063\057\064\020" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\122\115\123\103\001\002" +
    "\000\150\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\026\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\037" +
    "\uff88\040\uff88\041\uff88\051\uff88\053\uff88\055\uff88\056\uff88" +
    "\057\uff88\063\uff88\064\uff88\066\uff88\067\uff88\070\uff88\071" +
    "\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\104\uff88" +
    "\105\uff88\106\uff88\107\uff88\110\uff88\111\uff88\112\uff88\113" +
    "\uff88\114\uff88\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88" +
    "\001\002\000\104\005\104\006\112\007\116\021\111\027" +
    "\113\036\110\063\057\064\020\066\042\067\004\070\046" +
    "\071\041\072\032\073\027\074\017\075\053\076\012\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\122\115\123\103\001\002\000\106\005\104\006\112" +
    "\007\116\021\111\027\113\036\110\051\133\063\057\064" +
    "\020\066\042\067\004\070\046\071\041\072\032\073\027" +
    "\074\017\075\053\076\012\104\014\105\033\106\055\107" +
    "\005\110\064\111\011\112\062\113\061\114\035\115\037" +
    "\116\052\117\051\120\016\121\056\122\115\123\103\001" +
    "\002\000\150\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\026" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\051\uff8b\053\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\063\uff8b\064\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\104" +
    "\uff8b\105\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b\112\uff8b" +
    "\113\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121" +
    "\uff8b\001\002\000\150\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024" +
    "\uff89\026\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\037\uff89\040\uff89\041\uff89\051\uff89\053\uff89\055" +
    "\uff89\056\uff89\057\uff89\063\uff89\064\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076" +
    "\uff89\104\uff89\105\uff89\106\uff89\107\uff89\110\uff89\111\uff89" +
    "\112\uff89\113\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120" +
    "\uff89\121\uff89\001\002\000\122\026\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\123\034\122\035\124\037\uffa7\040\uffa7\041" +
    "\uffa7\051\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7\063\uffa7" +
    "\064\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\104\uffa7\105\uffa7\106\uffa7" +
    "\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115" +
    "\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\001\002\000\114" +
    "\026\uffa4\030\uffa4\031\uffa4\032\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\051\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\063\uffa4" +
    "\064\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\075\uffa4\076\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115" +
    "\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\001\002\000\156" +
    "\010\073\011\075\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\026\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\037\uff86\040\uff86\041\uff86\043\071\051\uff86\053\uff86" +
    "\055\uff86\056\uff86\057\uff86\063\uff86\064\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86" +
    "\076\uff86\104\uff86\105\uff86\106\uff86\107\uff86\110\uff86\111" +
    "\uff86\112\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86" +
    "\120\uff86\121\uff86\001\002\000\104\005\104\006\112\007" +
    "\116\021\111\027\113\036\110\063\057\064\020\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\104\014\105\033\106\055\107\005\110\064" +
    "\111\011\112\062\113\061\114\035\115\037\116\052\117" +
    "\051\120\016\121\056\122\115\123\103\001\002\000\104" +
    "\005\104\006\112\007\116\021\111\027\113\036\110\063" +
    "\057\064\020\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\122\115\123" +
    "\103\001\002\000\104\005\104\006\112\007\116\021\111" +
    "\027\113\036\110\063\057\064\020\066\042\067\004\070" +
    "\046\071\041\072\032\073\027\074\017\075\053\076\012" +
    "\104\014\105\033\106\055\107\005\110\064\111\011\112" +
    "\062\113\061\114\035\115\037\116\052\117\051\120\016" +
    "\121\056\122\115\123\103\001\002\000\122\026\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\123\034\uff9f\035\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\051\uff9f\053\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\063\uff9f\064\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\104\uff9f\105" +
    "\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f" +
    "\114\uff9f\115\uff9f\116\uff9f\117\uff9f\120\uff9f\121\uff9f\001" +
    "\002\000\012\031\127\033\123\034\122\035\124\001\002" +
    "\000\104\005\104\006\112\007\116\021\111\027\113\036" +
    "\110\063\057\064\020\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\104\014\105" +
    "\033\106\055\107\005\110\064\111\011\112\062\113\061" +
    "\114\035\115\037\116\052\117\051\120\016\121\056\122" +
    "\115\123\103\001\002\000\122\026\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\123\034\122\035\124\037\uff9b\040\uff9b\041" +
    "\uff9b\051\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b\063\uff9b" +
    "\064\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\074\uff9b\075\uff9b\076\uff9b\104\uff9b\105\uff9b\106\uff9b" +
    "\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115" +
    "\uff9b\116\uff9b\117\uff9b\120\uff9b\121\uff9b\001\002\000\122" +
    "\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\123\034\uff9e\035" +
    "\124\037\uff9e\040\uff9e\041\uff9e\051\uff9e\053\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\063\uff9e\064\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112" +
    "\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e" +
    "\121\uff9e\001\002\000\006\041\136\051\135\001\002\000" +
    "\114\026\uffa5\030\uffa5\031\uffa5\032\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\051\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\063" +
    "\uffa5\064\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\076\uffa5\104\uffa5\105\uffa5\106" +
    "\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5" +
    "\115\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\001\002\000" +
    "\016\030\uffa0\033\123\034\122\035\124\041\uffa0\051\uffa0" +
    "\001\002\000\114\026\uffa6\030\uffa6\031\uffa6\032\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\051\uffa6\053\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\063\uffa6\064\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\104\uffa6" +
    "\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113" +
    "\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\121\uffa6" +
    "\001\002\000\104\005\104\006\112\007\116\021\111\027" +
    "\113\036\110\063\057\064\020\066\042\067\004\070\046" +
    "\071\041\072\032\073\027\074\017\075\053\076\012\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\122\115\123\103\001\002\000\016\030\uffa1\033\123" +
    "\034\122\035\124\041\uffa1\051\uffa1\001\002\000\012\030" +
    "\141\033\123\034\122\035\124\001\002\000\150\012\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\040\uff8d\041" +
    "\uff8d\051\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\063\uff8d" +
    "\064\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115" +
    "\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\001\002\000\150" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\146\023\144\024\147\026\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\051\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\063\uff8c\064\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\104\uff8c\105\uff8c" +
    "\106\uff8c\107\uff8c\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114" +
    "\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c\001\002" +
    "\000\102\005\104\006\112\007\116\021\111\027\113\063" +
    "\057\064\020\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\122\115\123" +
    "\103\001\002\000\102\005\104\006\112\007\116\021\111" +
    "\027\113\063\057\064\020\066\042\067\004\070\046\071" +
    "\041\072\032\073\027\074\017\075\053\076\012\104\014" +
    "\105\033\106\055\107\005\110\064\111\011\112\062\113" +
    "\061\114\035\115\037\116\052\117\051\120\016\121\056" +
    "\122\115\123\103\001\002\000\102\005\104\006\112\007" +
    "\116\021\111\027\113\063\057\064\020\066\042\067\004" +
    "\070\046\071\041\072\032\073\027\074\017\075\053\076" +
    "\012\104\014\105\033\106\055\107\005\110\064\111\011" +
    "\112\062\113\061\114\035\115\037\116\052\117\051\120" +
    "\016\121\056\122\115\123\103\001\002\000\102\005\104" +
    "\006\112\007\116\021\111\027\113\063\057\064\020\066" +
    "\042\067\004\070\046\071\041\072\032\073\027\074\017" +
    "\075\053\076\012\104\014\105\033\106\055\107\005\110" +
    "\064\111\011\112\062\113\061\114\035\115\037\116\052" +
    "\117\051\120\016\121\056\122\115\123\103\001\002\000" +
    "\102\005\104\006\112\007\116\021\111\027\113\063\057" +
    "\064\020\066\042\067\004\070\046\071\041\072\032\073" +
    "\027\074\017\075\053\076\012\104\014\105\033\106\055" +
    "\107\005\110\064\111\011\112\062\113\061\114\035\115" +
    "\037\116\052\117\051\120\016\121\056\122\115\123\103" +
    "\001\002\000\150\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\147" +
    "\026\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\051\uff8e\053\uff8e\055\uff8e" +
    "\056\uff8e\057\uff8e\063\uff8e\064\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\112" +
    "\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\121\uff8e\001\002\000\150\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90" +
    "\024\147\026\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\035\uff90\037\uff90\040\uff90\041\uff90\051\uff90\053\uff90" +
    "\055\uff90\056\uff90\057\uff90\063\uff90\064\uff90\066\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\076\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110\uff90\111" +
    "\uff90\112\uff90\113\uff90\114\uff90\115\uff90\116\uff90\117\uff90" +
    "\120\uff90\121\uff90\001\002\000\150\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\146" +
    "\023\144\024\147\026\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\037\uff91\040\uff91\041\uff91\051\uff91" +
    "\053\uff91\055\uff91\056\uff91\057\uff91\063\uff91\064\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\104\uff91\105\uff91\106\uff91\107\uff91\110" +
    "\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115\uff91\116\uff91" +
    "\117\uff91\120\uff91\121\uff91\001\002\000\150\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\147\026\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\051\uff8f\053\uff8f\055\uff8f\056\uff8f\057\uff8f\063\uff8f\064" +
    "\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\075\uff8f\076\uff8f\104\uff8f\105\uff8f\106\uff8f\107" +
    "\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\115\uff8f" +
    "\116\uff8f\117\uff8f\120\uff8f\121\uff8f\001\002\000\150\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\021\uff92\022\146\023\144\024\147\026\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\037\uff92\040\uff92" +
    "\041\uff92\051\uff92\053\uff92\055\uff92\056\uff92\057\uff92\063" +
    "\uff92\064\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92" +
    "\073\uff92\074\uff92\075\uff92\076\uff92\104\uff92\105\uff92\106" +
    "\uff92\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92" +
    "\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\001\002\000" +
    "\122\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\037\uff9d\040\uff9d\041\uff9d\051\uff9d\053\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\063\uff9d\064\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076" +
    "\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d" +
    "\112\uff9d\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\120" +
    "\uff9d\121\uff9d\001\002\000\004\030\157\001\002\000\114" +
    "\026\uffa3\030\uffa3\031\uffa3\032\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\051\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3\063\uffa3" +
    "\064\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115" +
    "\uffa3\116\uffa3\117\uffa3\120\uffa3\121\uffa3\001\002\000\102" +
    "\005\uff93\006\uff93\007\uff93\021\uff93\027\uff93\063\uff93\064" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\104\uff93\105\uff93\106\uff93\107" +
    "\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93" +
    "\116\uff93\117\uff93\120\uff93\121\uff93\122\uff93\123\uff93\001" +
    "\002\000\102\005\uff95\006\uff95\007\uff95\021\uff95\027\uff95" +
    "\063\uff95\064\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072" +
    "\uff95\073\uff95\074\uff95\075\uff95\076\uff95\104\uff95\105\uff95" +
    "\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95\114" +
    "\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95\122\uff95" +
    "\123\uff95\001\002\000\102\005\uff96\006\uff96\007\uff96\021" +
    "\uff96\027\uff96\063\uff96\064\uff96\066\uff96\067\uff96\070\uff96" +
    "\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\104" +
    "\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112\uff96" +
    "\113\uff96\114\uff96\115\uff96\116\uff96\117\uff96\120\uff96\121" +
    "\uff96\122\uff96\123\uff96\001\002\000\102\005\104\006\112" +
    "\007\116\021\111\027\113\063\057\064\020\066\042\067" +
    "\004\070\046\071\041\072\032\073\027\074\017\075\053" +
    "\076\012\104\014\105\033\106\055\107\005\110\064\111" +
    "\011\112\062\113\061\114\035\115\037\116\052\117\051" +
    "\120\016\121\056\122\115\123\103\001\002\000\102\005" +
    "\uff97\006\uff97\007\uff97\021\uff97\027\uff97\063\uff97\064\uff97" +
    "\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074" +
    "\uff97\075\uff97\076\uff97\104\uff97\105\uff97\106\uff97\107\uff97" +
    "\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116" +
    "\uff97\117\uff97\120\uff97\121\uff97\122\uff97\123\uff97\001\002" +
    "\000\102\005\uff98\006\uff98\007\uff98\021\uff98\027\uff98\063" +
    "\uff98\064\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98" +
    "\073\uff98\074\uff98\075\uff98\076\uff98\104\uff98\105\uff98\106" +
    "\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98\114\uff98" +
    "\115\uff98\116\uff98\117\uff98\120\uff98\121\uff98\122\uff98\123" +
    "\uff98\001\002\000\102\005\uff94\006\uff94\007\uff94\021\uff94" +
    "\027\uff94\063\uff94\064\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\104\uff94" +
    "\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113" +
    "\uff94\114\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94" +
    "\122\uff94\123\uff94\001\002\000\136\012\162\013\166\014" +
    "\160\015\161\016\165\017\164\026\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\051\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a\063\uff9a" +
    "\064\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\104\uff9a\105\uff9a\106\uff9a" +
    "\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\115" +
    "\uff9a\116\uff9a\117\uff9a\120\uff9a\121\uff9a\001\002\000\004" +
    "\030\171\001\002\000\114\026\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\051\uffa2\053\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\063\uffa2\064\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2" +
    "\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112" +
    "\uffa2\113\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2" +
    "\121\uffa2\001\002\000\006\026\177\041\200\001\002\000" +
    "\004\031\175\001\002\000\006\026\uff80\041\uff80\001\002" +
    "\000\114\005\104\006\112\007\116\021\111\025\077\027" +
    "\113\036\110\050\114\063\057\064\020\065\107\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\077\100\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\122\115\123\103\001\002" +
    "\000\006\026\uff7f\041\uff7f\001\002\000\114\026\uff82\030" +
    "\uff82\031\uff82\032\uff82\037\uff82\040\uff82\041\uff82\051\uff82" +
    "\053\uff82\055\uff82\056\uff82\057\uff82\063\uff82\064\uff82\066" +
    "\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\104\uff82\105\uff82\106\uff82\107\uff82\110" +
    "\uff82\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\116\uff82" +
    "\117\uff82\120\uff82\121\uff82\001\002\000\004\121\173\001" +
    "\002\000\006\026\uff81\041\uff81\001\002\000\104\026\uffcf" +
    "\032\uffcf\037\uffcf\040\uffcf\053\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\063\uffcf\064\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf" +
    "\114\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf\001" +
    "\002\000\104\026\uffce\032\uffce\037\uffce\040\uffce\053\uffce" +
    "\055\uffce\056\uffce\057\uffce\063\uffce\064\uffce\066\uffce\067" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\076\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111" +
    "\uffce\112\uffce\113\uffce\114\uffce\115\uffce\116\uffce\117\uffce" +
    "\120\uffce\121\uffce\001\002\000\170\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\051\uffca\053\uffca\055\uffca\056\uffca\057\uffca\063\uffca" +
    "\064\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\104\uffca\105\uffca\106\uffca" +
    "\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca\115" +
    "\uffca\116\uffca\117\uffca\120\uffca\121\uffca\001\002\000\104" +
    "\026\uffcc\032\uffcc\037\uffcc\040\uffcc\053\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\063\uffcc\064\uffcc\066\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\104" +
    "\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc" +
    "\113\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121" +
    "\uffcc\001\002\000\104\026\uffcd\032\uffcd\037\uffcd\040\uffcd" +
    "\053\uffcd\055\uffcd\056\uffcd\057\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110" +
    "\uffcd\111\uffcd\112\uffcd\113\uffcd\114\uffcd\115\uffcd\116\uffcd" +
    "\117\uffcd\120\uffcd\121\uffcd\001\002\000\114\005\104\006" +
    "\112\007\116\021\111\025\077\027\113\036\110\050\114" +
    "\063\057\064\020\065\107\066\042\067\004\070\046\071" +
    "\041\072\032\073\027\074\017\075\053\076\012\077\100" +
    "\104\014\105\033\106\055\107\005\110\064\111\011\112" +
    "\062\113\061\114\035\115\037\116\052\117\051\120\016" +
    "\121\056\122\115\123\103\001\002\000\004\030\211\001" +
    "\002\000\004\025\212\001\002\000\004\060\213\001\002" +
    "\000\114\005\104\006\112\007\116\021\111\025\077\027" +
    "\113\036\110\050\114\063\057\064\020\065\107\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\077\100\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\122\115\123\103\001\002" +
    "\000\010\026\ufff3\060\ufff3\061\ufff3\001\002\000\004\031" +
    "\216\001\002\000\004\025\217\001\002\000\102\026\222" +
    "\037\006\040\030\053\024\055\013\056\060\057\065\063" +
    "\057\064\020\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\001\002\000" +
    "\102\026\ufff7\037\ufff7\040\ufff7\053\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\063\ufff7\064\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\104\ufff7" +
    "\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111\ufff7\112\ufff7\113" +
    "\ufff7\114\ufff7\115\ufff7\116\ufff7\117\ufff7\120\ufff7\121\ufff7" +
    "\001\002\000\102\026\224\037\006\040\030\053\024\055" +
    "\013\056\060\057\065\063\057\064\020\066\042\067\004" +
    "\070\046\071\041\072\032\073\027\074\017\075\053\076" +
    "\012\104\014\105\033\106\055\107\005\110\064\111\011" +
    "\112\062\113\061\114\035\115\037\116\052\117\051\120" +
    "\016\121\056\001\002\000\010\026\ufff1\060\ufff1\061\ufff1" +
    "\001\002\000\102\026\ufff8\037\ufff8\040\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8" +
    "\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076" +
    "\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8" +
    "\112\ufff8\113\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\120" +
    "\ufff8\121\ufff8\001\002\000\010\026\ufff2\060\ufff2\061\ufff2" +
    "\001\002\000\006\030\226\041\136\001\002\000\170\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\053\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\063\uffb3\064\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\104\uffb3" +
    "\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113" +
    "\uffb3\114\uffb3\115\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3" +
    "\001\002\000\104\002\ufffa\037\ufffa\040\ufffa\053\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\062\ufffa\063\ufffa\064\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075" +
    "\ufffa\076\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa" +
    "\111\ufffa\112\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa\117" +
    "\ufffa\120\ufffa\121\ufffa\001\002\000\006\030\231\041\136" +
    "\001\002\000\170\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\026\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\053" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\063\uffb1\064\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117" +
    "\uffb1\120\uffb1\121\uffb1\001\002\000\006\030\233\041\136" +
    "\001\002\000\170\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\026\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\053" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\063\uffb0\064\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\076\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0" +
    "\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117" +
    "\uffb0\120\uffb0\121\uffb0\001\002\000\004\032\236\001\002" +
    "\000\104\026\uffd9\032\uffd9\037\uffd9\040\uffd9\053\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9" +
    "\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076" +
    "\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9" +
    "\112\uffd9\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\120" +
    "\uffd9\121\uffd9\001\002\000\104\026\uffd8\032\uffd8\037\uffd8" +
    "\040\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\063\uffd8\064" +
    "\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\104\uffd8\105\uffd8\106\uffd8\107" +
    "\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\114\uffd8\115\uffd8" +
    "\116\uffd8\117\uffd8\120\uffd8\121\uffd8\001\002\000\106\005" +
    "\104\006\112\007\116\021\111\027\113\030\244\036\110" +
    "\063\057\064\020\066\042\067\004\070\046\071\041\072" +
    "\032\073\027\074\017\075\053\076\012\104\014\105\033" +
    "\106\055\107\005\110\064\111\011\112\062\113\061\114" +
    "\035\115\037\116\052\117\051\120\016\121\056\122\115" +
    "\123\103\001\002\000\114\005\104\006\112\007\116\021" +
    "\111\025\077\027\113\036\110\050\114\063\057\064\020" +
    "\065\107\066\042\067\004\070\046\071\041\072\032\073" +
    "\027\074\017\075\053\076\012\077\100\104\014\105\033" +
    "\106\055\107\005\110\064\111\011\112\062\113\061\114" +
    "\035\115\037\116\052\117\051\120\016\121\056\122\115" +
    "\123\103\001\002\000\004\051\242\001\002\000\170\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\051\uffc7\053\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\063\uffc7\064\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113" +
    "\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7" +
    "\001\002\000\006\030\245\041\136\001\002\000\170\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\051\uffa9\053\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\063\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113" +
    "\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9" +
    "\001\002\000\170\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\063\uffaa\064\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075" +
    "\uffaa\076\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa" +
    "\111\uffaa\112\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa\117" +
    "\uffaa\120\uffaa\121\uffaa\001\002\000\004\027\237\001\002" +
    "\000\170\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\053\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\063\uffb5\064\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120" +
    "\uffb5\121\uffb5\001\002\000\004\030\251\001\002\000\170" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\051\uffb6\053\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\063\uffb6\064\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\104" +
    "\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6" +
    "\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\121" +
    "\uffb6\001\002\000\004\030\253\001\002\000\170\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\051\uffbc\053\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\063\uffbc\064\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc" +
    "\114\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc\001" +
    "\002\000\006\030\255\041\136\001\002\000\170\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\051\uffad\053\uffad\055\uffad\056\uffad\057" +
    "\uffad\063\uffad\064\uffad\066\uffad\067\uffad\070\uffad\071\uffad" +
    "\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\104\uffad\105" +
    "\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad" +
    "\114\uffad\115\uffad\116\uffad\117\uffad\120\uffad\121\uffad\001" +
    "\002\000\006\030\257\041\136\001\002\000\170\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\051\uffac\053\uffac\055\uffac\056\uffac\057" +
    "\uffac\063\uffac\064\uffac\066\uffac\067\uffac\070\uffac\071\uffac" +
    "\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\104\uffac\105" +
    "\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac\113\uffac" +
    "\114\uffac\115\uffac\116\uffac\117\uffac\120\uffac\121\uffac\001" +
    "\002\000\106\002\ufffd\037\ufffd\040\ufffd\052\ufffd\053\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\062\ufffd\063\ufffd\064\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\111\ufffd\112\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd" +
    "\117\ufffd\120\ufffd\121\ufffd\001\002\000\104\002\ufffe\037" +
    "\006\040\030\053\024\055\013\056\060\057\065\062\036" +
    "\063\057\064\020\066\042\067\004\070\046\071\041\072" +
    "\032\073\027\074\017\075\053\076\012\104\014\105\033" +
    "\106\055\107\005\110\064\111\011\112\062\113\061\114" +
    "\035\115\037\116\052\117\051\120\016\121\056\001\002" +
    "\000\106\026\uffec\032\uffec\037\uffec\040\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\063\uffec\064\uffec\066\uffec" +
    "\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec" +
    "\111\uffec\112\uffec\113\uffec\114\uffec\115\uffec\116\uffec\117" +
    "\uffec\120\uffec\121\uffec\001\002\000\006\025\266\053\265" +
    "\001\002\000\104\026\uffee\032\uffee\037\uffee\040\uffee\053" +
    "\uffee\055\uffee\056\uffee\057\uffee\063\uffee\064\uffee\066\uffee" +
    "\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075" +
    "\uffee\076\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee" +
    "\111\uffee\112\uffee\113\uffee\114\uffee\115\uffee\116\uffee\117" +
    "\uffee\120\uffee\121\uffee\001\002\000\004\027\272\001\002" +
    "\000\102\026\270\037\006\040\030\053\024\055\013\056" +
    "\060\057\065\063\057\064\020\066\042\067\004\070\046" +
    "\071\041\072\032\073\027\074\017\075\053\076\012\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\001\002\000\102\026\271\037\006\040\030\053\024" +
    "\055\013\056\060\057\065\063\057\064\020\066\042\067" +
    "\004\070\046\071\041\072\032\073\027\074\017\075\053" +
    "\076\012\104\014\105\033\106\055\107\005\110\064\111" +
    "\011\112\062\113\061\114\035\115\037\116\052\117\051" +
    "\120\016\121\056\001\002\000\104\026\uffe6\032\uffe6\037" +
    "\uffe6\040\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\063\uffe6" +
    "\064\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\104\uffe6\105\uffe6\106\uffe6" +
    "\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6\114\uffe6\115" +
    "\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\001\002\000\104" +
    "\026\uffe7\032\uffe7\037\uffe7\040\uffe7\053\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\104" +
    "\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7" +
    "\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121" +
    "\uffe7\001\002\000\114\005\104\006\112\007\116\021\111" +
    "\025\077\027\113\036\110\050\114\063\057\064\020\065" +
    "\107\066\042\067\004\070\046\071\041\072\032\073\027" +
    "\074\017\075\053\076\012\077\100\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\122\115\123" +
    "\103\001\002\000\004\030\274\001\002\000\004\025\275" +
    "\001\002\000\102\026\277\037\006\040\030\053\024\055" +
    "\013\056\060\057\065\063\057\064\020\066\042\067\004" +
    "\070\046\071\041\072\032\073\027\074\017\075\053\076" +
    "\012\104\014\105\033\106\055\107\005\110\064\111\011" +
    "\112\062\113\061\114\035\115\037\116\052\117\051\120" +
    "\016\121\056\001\002\000\102\026\300\037\006\040\030" +
    "\053\024\055\013\056\060\057\065\063\057\064\020\066" +
    "\042\067\004\070\046\071\041\072\032\073\027\074\017" +
    "\075\053\076\012\104\014\105\033\106\055\107\005\110" +
    "\064\111\011\112\062\113\061\114\035\115\037\116\052" +
    "\117\051\120\016\121\056\001\002\000\106\026\uffe8\032" +
    "\uffe8\037\uffe8\040\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\063\uffe8\064\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\104\uffe8" +
    "\105\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113" +
    "\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8" +
    "\001\002\000\106\026\uffe9\032\uffe9\037\uffe9\040\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\063\uffe9\064\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9" +
    "\110\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9\116" +
    "\uffe9\117\uffe9\120\uffe9\121\uffe9\001\002\000\004\030\302" +
    "\001\002\000\170\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\053" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\063\uffc0\064\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117" +
    "\uffc0\120\uffc0\121\uffc0\001\002\000\006\030\304\041\136" +
    "\001\002\000\170\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\026\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\051\uffae\053" +
    "\uffae\055\uffae\056\uffae\057\uffae\063\uffae\064\uffae\066\uffae" +
    "\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117" +
    "\uffae\120\uffae\121\uffae\001\002\000\004\027\306\001\002" +
    "\000\006\030\311\121\307\001\002\000\006\030\uffde\041" +
    "\uffde\001\002\000\006\030\317\041\316\001\002\000\004" +
    "\025\312\001\002\000\102\026\314\037\006\040\030\053" +
    "\024\055\013\056\060\057\065\063\057\064\020\066\042" +
    "\067\004\070\046\071\041\072\032\073\027\074\017\075" +
    "\053\076\012\104\014\105\033\106\055\107\005\110\064" +
    "\111\011\112\062\113\061\114\035\115\037\116\052\117" +
    "\051\120\016\121\056\001\002\000\102\026\315\037\006" +
    "\040\030\053\024\055\013\056\060\057\065\063\057\064" +
    "\020\066\042\067\004\070\046\071\041\072\032\073\027" +
    "\074\017\075\053\076\012\104\014\105\033\106\055\107" +
    "\005\110\064\111\011\112\062\113\061\114\035\115\037" +
    "\116\052\117\051\120\016\121\056\001\002\000\104\002" +
    "\uffe3\037\uffe3\040\uffe3\053\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\104\uffe3" +
    "\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113" +
    "\uffe3\114\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3" +
    "\001\002\000\104\002\uffe2\037\uffe2\040\uffe2\053\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\062\uffe2\063\uffe2\064\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2" +
    "\111\uffe2\112\uffe2\113\uffe2\114\uffe2\115\uffe2\116\uffe2\117" +
    "\uffe2\120\uffe2\121\uffe2\001\002\000\004\121\324\001\002" +
    "\000\004\025\320\001\002\000\102\026\322\037\006\040" +
    "\030\053\024\055\013\056\060\057\065\063\057\064\020" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\001\002\000\102\026\323" +
    "\037\006\040\030\053\024\055\013\056\060\057\065\063" +
    "\057\064\020\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\001\002\000" +
    "\104\002\uffe1\037\uffe1\040\uffe1\053\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\062\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112" +
    "\uffe1\113\uffe1\114\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1" +
    "\121\uffe1\001\002\000\104\002\uffe0\037\uffe0\040\uffe0\053" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0" +
    "\110\uffe0\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116" +
    "\uffe0\117\uffe0\120\uffe0\121\uffe0\001\002\000\006\030\uffdf" +
    "\041\uffdf\001\002\000\006\030\326\041\136\001\002\000" +
    "\170\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\026\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf\053\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\063\uffaf\064\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112" +
    "\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf" +
    "\121\uffaf\001\002\000\170\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\026\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\063\uffb8\064\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\076\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8" +
    "\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8\115\uffb8\116" +
    "\uffb8\117\uffb8\120\uffb8\121\uffb8\001\002\000\004\030\331" +
    "\001\002\000\170\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\063\uffb7\064\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117" +
    "\uffb7\120\uffb7\121\uffb7\001\002\000\004\030\333\001\002" +
    "\000\170\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\053\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\063\uffbf\064\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf\120" +
    "\uffbf\121\uffbf\001\002\000\106\026\uffd4\032\uffd4\037\uffd4" +
    "\040\uffd4\041\341\053\uffd4\055\uffd4\056\uffd4\057\uffd4\063" +
    "\uffd4\064\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\104\uffd4\105\uffd4\106" +
    "\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4" +
    "\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\001\002\000" +
    "\110\026\uffd1\032\uffd1\037\uffd1\040\uffd1\041\uffd1\042\337" +
    "\053\uffd1\055\uffd1\056\uffd1\057\uffd1\063\uffd1\064\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110" +
    "\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1" +
    "\117\uffd1\120\uffd1\121\uffd1\001\002\000\106\026\uffd2\032" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\063\uffd2\064\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\104\uffd2" +
    "\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113" +
    "\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\121\uffd2" +
    "\001\002\000\114\005\104\006\112\007\116\021\111\025" +
    "\077\027\113\036\110\050\114\063\057\064\020\065\107" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\077\100\104\014\105\033\106\055" +
    "\107\005\110\064\111\011\112\062\113\061\114\035\115" +
    "\037\116\052\117\051\120\016\121\056\122\115\123\103" +
    "\001\002\000\106\026\uffd0\032\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\063\uffd0\064\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0" +
    "\110\uffd0\111\uffd0\112\uffd0\113\uffd0\114\uffd0\115\uffd0\116" +
    "\uffd0\117\uffd0\120\uffd0\121\uffd0\001\002\000\004\121\335" +
    "\001\002\000\106\026\uffd3\032\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\063\uffd3\064\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3" +
    "\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114\uffd3\115\uffd3\116" +
    "\uffd3\117\uffd3\120\uffd3\121\uffd3\001\002\000\004\030\344" +
    "\001\002\000\170\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\053" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\063\uffbe\064\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe" +
    "\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\116\uffbe\117" +
    "\uffbe\120\uffbe\121\uffbe\001\002\000\114\005\104\006\112" +
    "\007\116\021\111\025\077\027\113\036\110\050\114\063" +
    "\057\064\020\065\107\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\077\100\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\122\115\123\103\001\002\000\004\030\347\001\002" +
    "\000\106\002\ufffb\037\ufffb\040\ufffb\052\ufffb\053\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb" +
    "\111\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117" +
    "\ufffb\120\ufffb\121\ufffb\001\002\000\114\005\104\006\112" +
    "\007\116\021\111\025\077\027\113\036\110\050\114\063" +
    "\057\064\020\065\107\066\042\067\004\070\046\071\041" +
    "\072\032\073\027\074\017\075\053\076\012\077\100\104" +
    "\014\105\033\106\055\107\005\110\064\111\011\112\062" +
    "\113\061\114\035\115\037\116\052\117\051\120\016\121" +
    "\056\122\115\123\103\001\002\000\004\030\352\001\002" +
    "\000\004\025\353\001\002\000\102\026\355\037\006\040" +
    "\030\053\024\055\013\056\060\057\065\063\057\064\020" +
    "\066\042\067\004\070\046\071\041\072\032\073\027\074" +
    "\017\075\053\076\012\104\014\105\033\106\055\107\005" +
    "\110\064\111\011\112\062\113\061\114\035\115\037\116" +
    "\052\117\051\120\016\121\056\001\002\000\102\026\356" +
    "\037\006\040\030\053\024\055\013\056\060\057\065\063" +
    "\057\064\020\066\042\067\004\070\046\071\041\072\032" +
    "\073\027\074\017\075\053\076\012\104\014\105\033\106" +
    "\055\107\005\110\064\111\011\112\062\113\061\114\035" +
    "\115\037\116\052\117\051\120\016\121\056\001\002\000" +
    "\106\026\uffea\032\uffea\037\uffea\040\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\063\uffea\064\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111" +
    "\uffea\112\uffea\113\uffea\114\uffea\115\uffea\116\uffea\117\uffea" +
    "\120\uffea\121\uffea\001\002\000\106\026\uffeb\032\uffeb\037" +
    "\uffeb\040\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\063\uffeb\064\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112\uffeb\113\uffeb\114" +
    "\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb\001\002" +
    "\000\004\026\370\001\002\000\104\026\ufff6\032\ufff6\037" +
    "\ufff6\040\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\063\ufff6" +
    "\064\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\076\ufff6\104\ufff6\105\ufff6\106\ufff6" +
    "\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114\ufff6\115" +
    "\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\001\002\000\004" +
    "\031\363\001\002\000\010\026\ufff4\060\ufff4\061\ufff4\001" +
    "\002\000\004\025\364\001\002\000\102\026\366\037\006" +
    "\040\030\053\024\055\013\056\060\057\065\063\057\064" +
    "\020\066\042\067\004\070\046\071\041\072\032\073\027" +
    "\074\017\075\053\076\012\104\014\105\033\106\055\107" +
    "\005\110\064\111\011\112\062\113\061\114\035\115\037" +
    "\116\052\117\051\120\016\121\056\001\002\000\102\026" +
    "\367\037\006\040\030\053\024\055\013\056\060\057\065" +
    "\063\057\064\020\066\042\067\004\070\046\071\041\072" +
    "\032\073\027\074\017\075\053\076\012\104\014\105\033" +
    "\106\055\107\005\110\064\111\011\112\062\113\061\114" +
    "\035\115\037\116\052\117\051\120\016\121\056\001\002" +
    "\000\004\026\uffef\001\002\000\004\026\ufff0\001\002\000" +
    "\104\026\ufff5\032\ufff5\037\ufff5\040\ufff5\053\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\104\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\112" +
    "\ufff5\113\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5" +
    "\121\ufff5\001\002\000\004\030\372\001\002\000\170\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\051\uffbd\053\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\063\uffbd\064\uffbd\066\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\104\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113" +
    "\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd" +
    "\001\002\000\006\030\374\041\136\001\002\000\170\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\051\uffab\053\uffab\055\uffab\056\uffab" +
    "\057\uffab\063\uffab\064\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\104\uffab" +
    "\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab\113" +
    "\uffab\114\uffab\115\uffab\116\uffab\117\uffab\120\uffab\121\uffab" +
    "\001\002\000\104\002\uffe5\037\uffe5\040\uffe5\053\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\064\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5" +
    "\111\uffe5\112\uffe5\113\uffe5\114\uffe5\115\uffe5\116\uffe5\117" +
    "\uffe5\120\uffe5\121\uffe5\001\002\000\170\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\051\uffba\053\uffba\055\uffba\056\uffba\057\uffba\063" +
    "\uffba\064\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\uffba\104\uffba\105\uffba\106" +
    "\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba" +
    "\115\uffba\116\uffba\117\uffba\120\uffba\121\uffba\001\002\000" +
    "\004\030\u0100\001\002\000\170\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\051\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\063\uffb9\064" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\104\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9" +
    "\116\uffb9\117\uffb9\120\uffb9\121\uffb9\001\002\000\104\026" +
    "\uffd7\032\uffd7\037\uffd7\040\uffd7\053\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\063\uffd7\064\uffd7\066\uffd7\067\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\104\uffd7" +
    "\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113" +
    "\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7" +
    "\001\002\000\004\030\u0103\001\002\000\170\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\051\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\063\uffbb\064\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\104\uffbb\105\uffbb" +
    "\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114" +
    "\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\001\002" +
    "\000\006\030\u0105\041\136\001\002\000\170\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\051\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\063\uffb2\064\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\114" +
    "\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\001\002" +
    "\000\004\002\001\001\002\000\114\005\104\006\112\007" +
    "\116\021\111\025\077\027\113\036\110\050\114\063\057" +
    "\064\020\065\107\066\042\067\004\070\046\071\041\072" +
    "\032\073\027\074\017\075\053\076\012\077\100\104\014" +
    "\105\033\106\055\107\005\110\064\111\011\112\062\113" +
    "\061\114\035\115\037\116\052\117\051\120\016\121\056" +
    "\122\115\123\103\001\002\000\004\030\u0109\001\002\000" +
    "\104\026\uffa8\032\uffa8\037\uffa8\040\uffa8\053\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\063\uffa8\064\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8" +
    "\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\112" +
    "\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\120\uffa8" +
    "\121\uffa8\001\002\000\006\030\u010b\041\136\001\002\000" +
    "\170\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\026\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\053\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4" +
    "\121\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\046\002\006\003\062\007\046\014\044\015" +
    "\042\016\037\017\007\021\047\022\021\026\033\027\014" +
    "\030\020\031\030\032\024\033\053\041\043\043\022\044" +
    "\065\001\001\000\002\001\001\000\022\005\u0109\012\101" +
    "\013\104\021\047\022\105\023\133\033\053\044\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\u0103\012\101\013\104\021\047\022\105\023" +
    "\133\033\053\044\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\376\001\001\000\002\001\001\000" +
    "\022\005\372\012\101\013\104\021\047\022\105\023\133" +
    "\033\053\044\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\356" +
    "\037\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\333\020\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\327\001\001\000\002\001\001\000\022\005\324\012\101" +
    "\013\104\021\047\022\105\023\133\033\053\044\120\001" +
    "\001\000\002\001\001\000\022\005\302\012\101\013\104" +
    "\021\047\022\105\023\133\033\053\044\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\261\036\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\260\014\044\015\042" +
    "\016\037\017\007\021\047\022\021\026\257\027\014\030" +
    "\020\031\030\032\024\033\053\041\043\043\022\044\065" +
    "\001\001\000\002\001\001\000\022\005\255\012\101\013" +
    "\104\021\047\022\105\023\133\033\053\044\120\001\001" +
    "\000\022\005\253\012\101\013\104\021\047\022\105\023" +
    "\133\033\053\044\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\011\233\012\101\013\104\021\047" +
    "\022\105\023\116\024\117\033\053\044\120\001\001\000" +
    "\022\005\231\012\101\013\104\021\047\022\105\023\133" +
    "\033\053\044\120\001\001\000\022\005\227\012\101\013" +
    "\104\021\047\022\105\023\133\033\053\044\120\001\001" +
    "\000\036\014\226\015\042\016\037\017\007\021\047\022" +
    "\021\027\014\030\020\031\030\032\024\033\053\041\043" +
    "\043\022\044\065\001\001\000\022\005\224\012\101\013" +
    "\104\021\047\022\105\023\133\033\053\044\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\205\012" +
    "\101\013\104\021\047\022\105\023\116\024\117\033\053" +
    "\044\120\001\001\000\024\011\204\012\101\013\104\021" +
    "\047\022\105\023\116\024\117\033\053\044\120\001\001" +
    "\000\006\021\203\033\053\001\001\000\024\011\202\012" +
    "\101\013\104\021\047\022\105\023\116\024\117\033\053" +
    "\044\120\001\001\000\002\001\001\000\024\011\201\012" +
    "\101\013\104\021\047\022\105\023\116\024\117\033\053" +
    "\044\120\001\001\000\002\001\001\000\024\011\100\012" +
    "\101\013\104\021\047\022\105\023\116\024\117\033\053" +
    "\044\120\001\001\000\006\006\171\025\173\001\001\000" +
    "\024\011\167\012\101\013\104\021\047\022\105\023\116" +
    "\024\117\033\053\044\120\001\001\000\002\001\001\000" +
    "\004\040\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\155\012" +
    "\101\013\104\021\047\022\105\023\116\024\117\033\053" +
    "\044\120\001\001\000\020\012\101\013\104\021\047\022" +
    "\105\023\154\033\053\044\120\001\001\000\014\013\141" +
    "\021\047\022\105\033\053\044\120\001\001\000\002\001" +
    "\001\000\020\012\101\013\104\021\047\022\105\023\137" +
    "\033\053\044\120\001\001\000\022\005\131\012\101\013" +
    "\104\021\047\022\105\023\133\033\053\044\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\101\013\104" +
    "\021\047\022\105\023\130\033\053\044\120\001\001\000" +
    "\020\012\101\013\104\021\047\022\105\023\125\033\053" +
    "\044\120\001\001\000\020\012\101\013\104\021\047\022" +
    "\105\023\124\033\053\044\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\101\013\104\021\047\022" +
    "\105\023\127\033\053\044\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\101\013\104" +
    "\021\047\022\105\023\136\033\053\044\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\153\021\047\022\105\033\053\044" +
    "\120\001\001\000\014\013\152\021\047\022\105\033\053" +
    "\044\120\001\001\000\014\013\151\021\047\022\105\033" +
    "\053\044\120\001\001\000\014\013\150\021\047\022\105" +
    "\033\053\044\120\001\001\000\014\013\147\021\047\022" +
    "\105\033\053\044\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\166\013\104\021\047\022\105\033\053\044\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\175\012\101\013\104\021\047\022\105" +
    "\023\116\024\117\033\053\044\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\207" +
    "\012\101\013\104\021\047\022\105\023\116\024\117\033" +
    "\053\044\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\213\001\001\000\024\011\214\012\101\013" +
    "\104\021\047\022\105\023\116\024\117\033\053\044\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\220\015\042\016\037\017\007\021\047" +
    "\022\021\027\217\031\030\032\024\033\053\041\043\043" +
    "\022\044\065\001\001\000\002\001\001\000\032\015\042" +
    "\016\037\017\007\021\047\022\021\027\222\031\030\032" +
    "\024\033\053\041\043\043\022\044\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\242\012\101\013\104\021\047\022\105\023\133\033" +
    "\053\044\120\001\001\000\024\011\240\012\101\013\104" +
    "\021\047\022\105\023\116\024\117\033\053\044\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\226\015\042\016\037\017\007\021\047\022" +
    "\021\027\014\030\020\031\030\032\024\033\053\041\043" +
    "\043\022\044\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\010\266" +
    "\015\042\016\037\017\007\021\047\022\021\027\217\031" +
    "\030\032\024\033\053\041\043\043\022\044\065\001\001" +
    "\000\032\015\042\016\037\017\007\021\047\022\021\027" +
    "\222\031\030\032\024\033\053\041\043\043\022\044\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\272\012\101\013\104\021\047\022\105\023\116\024\117" +
    "\033\053\044\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\275\015\042\016\037\017\007\021\047" +
    "\022\021\027\217\031\030\032\024\033\053\041\043\043" +
    "\022\044\065\001\001\000\032\015\042\016\037\017\007" +
    "\021\047\022\021\027\222\031\030\032\024\033\053\041" +
    "\043\043\022\044\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\312\015\042\016\037\017\007\021\047" +
    "\022\021\027\217\031\030\032\024\033\053\041\043\043" +
    "\022\044\065\001\001\000\032\015\042\016\037\017\007" +
    "\021\047\022\021\027\222\031\030\032\024\033\053\041" +
    "\043\043\022\044\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\010" +
    "\320\015\042\016\037\017\007\021\047\022\021\027\217" +
    "\031\030\032\024\033\053\041\043\043\022\044\065\001" +
    "\001\000\032\015\042\016\037\017\007\021\047\022\021" +
    "\027\222\031\030\032\024\033\053\041\043\043\022\044" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\011\337\012\101\013\104\021\047" +
    "\022\105\023\116\024\117\033\053\044\120\001\001\000" +
    "\002\001\001\000\004\020\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\345\012" +
    "\101\013\104\021\047\022\105\023\116\024\117\033\053" +
    "\044\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\350\012\101\013\104\021\047\022\105\023\116" +
    "\024\117\033\053\044\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\353\015\042\016\037\017\007" +
    "\021\047\022\021\027\217\031\030\032\024\033\053\041" +
    "\043\043\022\044\065\001\001\000\032\015\042\016\037" +
    "\017\007\021\047\022\021\027\222\031\030\032\024\033" +
    "\053\041\043\043\022\044\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\010\364\015\042\016\037\017\007\021\047\022\021\027" +
    "\217\031\030\032\024\033\053\041\043\043\022\044\065" +
    "\001\001\000\032\015\042\016\037\017\007\021\047\022" +
    "\021\027\222\031\030\032\024\033\053\041\043\043\022" +
    "\044\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\u0107\012\101" +
    "\013\104\021\047\022\105\023\116\024\117\033\053\044" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_fs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_fs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_fs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public LinkedList<sent> raiz;
public mng_error e = new mng_error();
public void syntax_error(Symbol s){
        e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); 
}
             
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); ;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_fs$actions {


      

  private final sintactico_fs parser;

  /** Constructor */
  CUP$sintactico_fs$actions(sintactico_fs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_fs$do_action_part00000000(
    int                        CUP$sintactico_fs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_fs$parser,
    java.util.Stack            CUP$sintactico_fs$stack,
    int                        CUP$sintactico_fs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_fs$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_fs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> start_val = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_fs$parser.done_parsing();
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LSENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LIMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= LIMP LSENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n2 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
                for(sent s:n2)
                {
                    raiz.add(s);
                }
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIMP ::= LIMP IMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LIMP",5, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIMP ::= IMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LIMP",5, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMP ::= importar para COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_importar(n1,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IMP",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LSENT ::= LSENT SENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LSENT",1, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LSENT ::= SENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LSENT",1, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINS ::= LINS INS 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LINS",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINS ::= INS 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LINS",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S_SWITCH ::= SWITCH_ llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_SWITCH",24, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S_SWITCH ::= SWITCH_ DEFECTO llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                n1.casos.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_SWITCH",24, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SWITCH_ ::= SWITCH_ CASO 
            {
              s_switch RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                n1.casos.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SWITCH_",33, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SWITCH_ ::= selecciona para COND parc llava CASO 
            {
              s_switch RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n3 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_switch(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SWITCH_",33, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASO ::= caso COND dosptos llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("CASO",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASO ::= caso COND dosptos llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                 RESULT=new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("CASO",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFECTO ::= defecto dosptos llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(null,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DEFECTO",27, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFECTO ::= defecto dosptos llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                 RESULT=new s_bloque(null,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DEFECTO",27, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S_IF ::= IF_ SINO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                n1.bloques.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_IF",23, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S_IF ::= IF_ 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_IF",23, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF_ ::= IF_ BL 
            {
              s_if RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.bloques.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF_ ::= si para COND parc llava LINS llavc 
            {
              s_if RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_if(new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo));
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF_ ::= si para COND parc llava llavc 
            {
              s_if RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_if(new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo));
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BL ::= sino si para COND parc llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("BL",26, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BL ::= sino si para COND parc llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("BL",26, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SINO ::= sino llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(null,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SINO",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SINO ::= sino llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_bloque(null,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SINO",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= INS ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= FUN 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SENT",10, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUN ::= funcion er_id para parc llava llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		
                RESULT=new s_funcion(n2,new LinkedList(),new LinkedList(),(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUN ::= funcion er_id para parc llava LINS llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcion(n2,new LinkedList(),n3,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUN ::= funcion er_id para LPAR parc llava llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_funcion(n2,n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUN ::= funcion er_id para LPAR parc llava LINS llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcion(n2,n1,n3,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LPAR ::= LPAR coma er_id 
            {
              LinkedList<String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LPAR",32, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPAR ::= er_id 
            {
              LinkedList<String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LPAR",32, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INS ::= DECLARACION 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INS ::= ASIGNACION 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INS ::= IMPRIMIR 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INS ::= OP_UNARIA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INS ::= retornar ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_retornarEmpty((n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INS ::= retornar COND ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_retornar(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INS ::= detener ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                 RESULT=new s_detener((n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INS ::= S_IF 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INS ::= S_SWITCH 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= var LDECLA 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_declaraciones(n1,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LDECLA ::= LDECLA coma DECLA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LDECLA",2, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LDECLA ::= DECLA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LDECLA",2, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLA ::= er_id 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
               RESULT= new s_declaracion(n2,null,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLA",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLA ::= er_id is COND 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_declaracion(n2,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLA",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= LACCESO is COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignacion(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= LACCESO a_mas COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaMas(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= LACCESO a_menos COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaMenos(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= LACCESO a_por COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaPor(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= LACCESO a_div COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaDiv(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LACCESO ::= LACCESO pto ACCESO 
            {
              s_accesos RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.accesos.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LACCESO",34, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LACCESO ::= ACCESO 
            {
              s_accesos RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_accesos(new LinkedList());
                RESULT.accesos.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LACCESO",34, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ACCESO ::= er_id 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_acVariable(n2,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ACCESO ::= er_id cora COND corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_accArray(n2,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACCESO ::= LLAMADA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESO ::= ascendente 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaAscendente((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESO ::= descendente 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaDescendente((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESO ::= invertir 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaInvertir((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCESO ::= maximo 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaMaximo((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCESO ::= minimo 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaMinimo((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCESO ::= filter er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalFilter(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO ::= map er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalMap(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO ::= buscar er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalBuscar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO ::= reduce er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalReduce(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO ::= todos er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalTodos(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO ::= alguno er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalAlgunos(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO ::= cerrar parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCerrar(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCESO ::= cerrar LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCerrar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO ::= cargar parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCargar(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACCESO ::= cargar LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCargar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACCESO ::= clic LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoClic(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACCESO ::= clic parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoClic(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ACCESO ::= video LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearVideo(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ACCESO ::= musica LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearReproductor(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ACCESO ::= imagen LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearImagen(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ACCESO ::= boton LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearBoton(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ACCESO ::= desple LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearDesplegable(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACCESO ::= controln LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearCtrlNum(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACCESO ::= area LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearAreaTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCESO ::= caja LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearCajaTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESO ::= texto LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCESO ::= contenedor LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearContenedor(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LLAMADA ::= er_id para LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_llamada(n2,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LLAMADA ::= er_id para parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_llamada(n2,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IMPRIMIR ::= imprimir para COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_imprimir(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
               RESULT=n1; 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= cora LCOND corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_array(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= cora corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_array(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= OBJETO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= crearArrFile COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_propiaArrayFromFile(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= leerGxml COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nativaGxml(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LCOND ::= LCOND coma LOGICA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LCOND",3, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LCOND ::= LOGICA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LCOND",3, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOGICA ::= LOGICA op_and LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_and(n1,n3,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOGICA ::= LOGICA op_or LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_or(n1,n3,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOGICA ::= op_not LOGICA 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_not(n1,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOGICA ::= RELA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=n1;
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOGICA ::= LOGICA ques LOGICA dosptos LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                    RESULT=new o_ternario(n1,n2,n3,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RELA ::= RELA OPEREL RELA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                    RESULT=new o_relacional(n1,n3,n2,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("RELA",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RELA ::= E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=n1;
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("RELA",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPEREL ::= mayor 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=">";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPEREL ::= menor 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="<";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPEREL ::= igual 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="==";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPEREL ::= dif 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="!=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPEREL ::= mayori 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=">=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPEREL ::= menori 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="<=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E mas E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_suma(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E menos E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_resta(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E mul E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_multiplicacion(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E divis E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_division(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E pote E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=new oa_potencia(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= para LOGICA parc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=n2;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= menos E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=new oa_negativo(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= er_numero 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_numero, Double.parseDouble(n1),(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= er_cadena 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_cadena,n1,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= falso 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                
                RESULT= new o_valorPuntual(var.tipo_booleano,false,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= verdadero 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new o_valorPuntual(var.tipo_booleano,true,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= nulo 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		 
                RESULT= new o_valorPuntual(var.tipo_nulo,null,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= LACCESO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new o_valorPuntual(null,n1,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= OP_UNARIA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_UNARIA ::= LACCESO aumen 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n2 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_aumento(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OP_UNARIA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_UNARIA ::= LACCESO decre 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n2 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_decremento(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OP_UNARIA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OBJETO ::= llava VALORES llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n2 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_objeto(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OBJETO",18, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALORES ::= VALORES coma VALUE 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALORES",4, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALORES ::= VALUE 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALORES",4, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALUE ::= er_id dosptos COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new o_objetoValor(n1,n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALUE",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_fs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_fs$do_action(
    int                        CUP$sintactico_fs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_fs$parser,
    java.util.Stack            CUP$sintactico_fs$stack,
    int                        CUP$sintactico_fs$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_fs$do_action_part00000000(
                               CUP$sintactico_fs$act_num,
                               CUP$sintactico_fs$parser,
                               CUP$sintactico_fs$stack,
                               CUP$sintactico_fs$top);
    }
}

}
