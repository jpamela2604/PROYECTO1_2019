
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package g_fs;

import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import errors.mng_error;
import proyecto1.var;
import codigo_fs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico_fs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbl.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico_fs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico_fs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico_fs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\006\004\000\002\006\003" +
    "\000\002\024\007\000\002\003\004\000\002\003\003\000" +
    "\002\007\004\000\002\007\003\000\002\030\004\000\002" +
    "\030\005\000\002\041\004\000\002\041\010\000\002\035" +
    "\010\000\002\035\007\000\002\033\007\000\002\033\006" +
    "\000\002\027\004\000\002\027\003\000\002\037\004\000" +
    "\002\037\011\000\002\037\010\000\002\032\012\000\002" +
    "\032\011\000\002\034\006\000\002\034\005\000\002\013" +
    "\003\000\002\013\003\000\002\026\010\000\002\026\011" +
    "\000\002\026\011\000\002\026\012\000\002\040\005\000" +
    "\002\040\003\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\005\000\002\025\004\000\002\025\004\000\002\025\003" +
    "\000\002\025\003\000\002\014\004\000\002\004\005\000" +
    "\002\004\003\000\002\017\003\000\002\017\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\044\005\000\002\044\003" +
    "\000\002\020\003\000\002\020\006\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\004\000\002\020\005\000" +
    "\002\020\005\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\031\006\000" +
    "\002\031\005\000\002\016\006\000\002\010\003\000\002" +
    "\010\005\000\002\010\004\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\005\005\000\002\005\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\004\000" +
    "\002\022\003\000\002\022\007\000\002\011\005\000\002" +
    "\011\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\021\004\000" +
    "\002\021\004\000\002\023\005\000\002\043\005\000\002" +
    "\043\003\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\102\037\006\040\030\052\026\053\024\055" +
    "\013\056\057\057\064\062\035\063\056\064\021\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\103\014\104\054\105\005\106\063\107\011" +
    "\110\061\111\060\112\034\113\036\114\051\115\050\116" +
    "\016\117\055\001\002\000\072\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\001\002" +
    "\000\104\005\104\006\112\007\115\021\111\027\113\036" +
    "\110\063\056\064\021\066\041\067\004\070\045\071\040" +
    "\072\032\073\027\074\017\075\052\076\012\103\014\104" +
    "\054\105\005\106\063\107\011\110\061\111\060\112\034" +
    "\113\036\114\051\115\050\116\016\117\055\120\121\121" +
    "\103\122\117\001\002\000\004\027\u0109\001\002\000\004" +
    "\002\u0108\001\002\000\004\032\u0107\001\002\000\104\005" +
    "\104\006\112\007\115\021\111\027\113\036\110\063\056" +
    "\064\021\066\041\067\004\070\045\071\040\072\032\073" +
    "\027\074\017\075\052\076\012\103\014\104\054\105\005" +
    "\106\063\107\011\110\061\111\060\112\034\113\036\114" +
    "\051\115\050\116\016\117\055\120\121\121\103\122\117" +
    "\001\002\000\004\117\u0103\001\002\000\004\032\u0102\001" +
    "\002\000\006\030\377\117\247\001\002\000\102\002\uffe5" +
    "\037\uffe5\040\uffe5\053\uffe5\055\uffe5\056\uffe5\057\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5" +
    "\113\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5\001\002\000" +
    "\104\005\104\006\112\007\115\021\111\027\113\036\110" +
    "\063\056\064\021\066\041\067\004\070\045\071\040\072" +
    "\032\073\027\074\017\075\052\076\012\103\014\104\054" +
    "\105\005\106\063\107\011\110\061\111\060\112\034\113" +
    "\036\114\051\115\050\116\016\117\055\120\121\121\103" +
    "\122\117\001\002\000\004\117\373\001\002\000\102\002" +
    "\uffe4\037\uffe4\040\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\103\uffe4" +
    "\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112" +
    "\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4\001\002" +
    "\000\072\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\051\uffc4\001\002\000\004\032\372\001" +
    "\002\000\010\026\361\060\214\061\362\001\002\000\004" +
    "\027\351\001\002\000\104\002\uffd4\026\uffd4\037\uffd4\040" +
    "\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\103\uffd4\104\uffd4\105\uffd4" +
    "\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\114" +
    "\uffd4\115\uffd4\116\uffd4\117\uffd4\001\002\000\004\027\345" +
    "\001\002\000\004\117\343\001\002\000\004\117\335\001" +
    "\002\000\104\002\uffd5\026\uffd5\037\uffd5\040\uffd5\053\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\062\uffd5\063\uffd5\064\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107" +
    "\uffd5\110\uffd5\111\uffd5\112\uffd5\113\uffd5\114\uffd5\115\uffd5" +
    "\116\uffd5\117\uffd5\001\002\000\004\117\332\001\002\000" +
    "\104\002\ufffc\037\ufffc\040\ufffc\052\ufffc\053\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\062\ufffc\063\ufffc\064\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110" +
    "\ufffc\111\ufffc\112\ufffc\113\ufffc\114\ufffc\115\ufffc\116\ufffc" +
    "\117\ufffc\001\002\000\104\005\104\006\112\007\115\021" +
    "\111\027\113\036\110\063\056\064\021\066\041\067\004" +
    "\070\045\071\040\072\032\073\027\074\017\075\052\076" +
    "\012\103\014\104\054\105\005\106\063\107\011\110\061" +
    "\111\060\112\034\113\036\114\051\115\050\116\016\117" +
    "\055\120\121\121\103\122\117\001\002\000\004\117\310" +
    "\001\002\000\104\005\104\006\112\007\115\021\111\027" +
    "\113\036\110\063\056\064\021\066\041\067\004\070\045" +
    "\071\040\072\032\073\027\074\017\075\052\076\012\103" +
    "\014\104\054\105\005\106\063\107\011\110\061\111\060" +
    "\112\034\113\036\114\051\115\050\116\016\117\055\120" +
    "\121\121\103\122\117\001\002\000\004\032\305\001\002" +
    "\000\004\117\303\001\002\000\072\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\001" +
    "\002\000\004\032\302\001\002\000\106\002\uffed\026\uffed" +
    "\037\uffed\040\uffed\053\uffed\054\264\055\uffed\056\uffed\057" +
    "\uffed\062\uffed\063\uffed\064\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\103" +
    "\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\112\uffed\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\001" +
    "\002\000\102\002\ufff9\037\ufff9\040\ufff9\053\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\062\ufff9\063\ufff9\064\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\076\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\110" +
    "\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9\116\ufff9" +
    "\117\ufff9\001\002\000\072\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\026\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\001\002\000" +
    "\104\002\uffff\037\006\040\030\052\026\053\024\055\013" +
    "\056\057\057\064\062\035\063\056\064\021\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\103\014\104\054\105\005\106\063\107\011\110" +
    "\061\111\060\112\034\113\036\114\051\115\050\116\016" +
    "\117\055\001\002\000\072\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\001\002\000" +
    "\104\005\104\006\112\007\115\021\111\027\113\036\110" +
    "\063\056\064\021\066\041\067\004\070\045\071\040\072" +
    "\032\073\027\074\017\075\052\076\012\103\014\104\054" +
    "\105\005\106\063\107\011\110\061\111\060\112\034\113" +
    "\036\114\051\115\050\116\016\117\055\120\121\121\103" +
    "\122\117\001\002\000\104\005\104\006\112\007\115\021" +
    "\111\027\113\036\110\063\056\064\021\066\041\067\004" +
    "\070\045\071\040\072\032\073\027\074\017\075\052\076" +
    "\012\103\014\104\054\105\005\106\063\107\011\110\061" +
    "\111\060\112\034\113\036\114\051\115\050\116\016\117" +
    "\055\120\121\121\103\122\117\001\002\000\004\117\253" +
    "\001\002\000\072\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\051\uffc5\001\002\000\006\030" +
    "\250\117\247\001\002\000\076\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\240\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\241" +
    "\051\uffc7\001\002\000\072\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\026\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3\001\002\000" +
    "\116\005\104\006\112\007\115\021\111\025\077\027\113" +
    "\032\236\036\110\050\114\063\056\064\021\065\107\066" +
    "\041\067\004\070\045\071\040\072\032\073\027\074\017" +
    "\075\052\076\012\077\100\103\014\104\054\105\005\106" +
    "\063\107\011\110\061\111\060\112\034\113\036\114\051" +
    "\115\050\116\016\117\055\120\121\121\103\122\117\001" +
    "\002\000\104\005\104\006\112\007\115\021\111\027\113" +
    "\036\110\063\056\064\021\066\041\067\004\070\045\071" +
    "\040\072\032\073\027\074\017\075\052\076\012\103\014" +
    "\104\054\105\005\106\063\107\011\110\061\111\060\112" +
    "\034\113\036\114\051\115\050\116\016\117\055\120\121" +
    "\121\103\122\117\001\002\000\104\005\104\006\112\007" +
    "\115\021\111\027\113\036\110\063\056\064\021\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\103\014\104\054\105\005\106\063\107\011" +
    "\110\061\111\060\112\034\113\036\114\051\115\050\116" +
    "\016\117\055\120\121\121\103\122\117\001\002\000\102" +
    "\002\000\037\006\040\030\053\024\055\013\056\057\057" +
    "\064\062\035\063\056\064\021\066\041\067\004\070\045" +
    "\071\040\072\032\073\027\074\017\075\052\076\012\103" +
    "\014\104\054\105\005\106\063\107\011\110\061\111\060" +
    "\112\034\113\036\114\051\115\050\116\016\117\055\001" +
    "\002\000\104\005\104\006\112\007\115\021\111\027\113" +
    "\036\110\063\056\064\021\066\041\067\004\070\045\071" +
    "\040\072\032\073\027\074\017\075\052\076\012\103\014" +
    "\104\054\105\005\106\063\107\011\110\061\111\060\112" +
    "\034\113\036\114\051\115\050\116\016\117\055\120\121" +
    "\121\103\122\117\001\002\000\004\027\210\001\002\000" +
    "\024\010\070\011\075\032\074\042\071\043\066\044\073" +
    "\045\072\046\067\047\076\001\002\000\062\063\056\064" +
    "\021\066\041\067\004\070\045\071\040\072\032\073\027" +
    "\074\017\075\052\076\012\103\014\104\054\105\005\106" +
    "\063\107\011\110\061\111\060\112\034\113\036\114\051" +
    "\115\050\116\016\117\055\001\002\000\114\005\104\006" +
    "\112\007\115\021\111\025\077\027\113\036\110\050\114" +
    "\063\056\064\021\065\107\066\041\067\004\070\045\071" +
    "\040\072\032\073\027\074\017\075\052\076\012\077\100" +
    "\103\014\104\054\105\005\106\063\107\011\110\061\111" +
    "\060\112\034\113\036\114\051\115\050\116\016\117\055" +
    "\120\121\121\103\122\117\001\002\000\052\012\uff83\013" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\026\uff83\030\uff83\031\uff83\032" +
    "\uff83\033\uff83\034\uff83\035\uff83\041\uff83\051\uff83\001\002" +
    "\000\114\005\104\006\112\007\115\021\111\025\077\027" +
    "\113\036\110\050\114\063\056\064\021\065\107\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\077\100\103\014\104\054\105\005\106\063" +
    "\107\011\110\061\111\060\112\034\113\036\114\051\115" +
    "\050\116\016\117\055\120\121\121\103\122\117\001\002" +
    "\000\114\005\104\006\112\007\115\021\111\025\077\027" +
    "\113\036\110\050\114\063\056\064\021\065\107\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\077\100\103\014\104\054\105\005\106\063" +
    "\107\011\110\061\111\060\112\034\113\036\114\051\115" +
    "\050\116\016\117\055\120\121\121\103\122\117\001\002" +
    "\000\114\005\104\006\112\007\115\021\111\025\077\027" +
    "\113\036\110\050\114\063\056\064\021\065\107\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\077\100\103\014\104\054\105\005\106\063" +
    "\107\011\110\061\111\060\112\034\113\036\114\051\115" +
    "\050\116\016\117\055\120\121\121\103\122\117\001\002" +
    "\000\104\002\uffd6\026\uffd6\037\uffd6\040\uffd6\053\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\062\uffd6\063\uffd6\064\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6" +
    "\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\001\002\000\052\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\024\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\041\uff84\051\uff84\001\002\000\114\005" +
    "\104\006\112\007\115\021\111\025\077\027\113\036\110" +
    "\050\114\063\056\064\021\065\107\066\041\067\004\070" +
    "\045\071\040\072\032\073\027\074\017\075\052\076\012" +
    "\077\100\103\014\104\054\105\005\106\063\107\011\110" +
    "\061\111\060\112\034\113\036\114\051\115\050\116\016" +
    "\117\055\120\121\121\103\122\117\001\002\000\004\117" +
    "\174\001\002\000\114\005\104\006\112\007\115\021\111" +
    "\025\077\027\113\036\110\050\114\063\056\064\021\065" +
    "\107\066\041\067\004\070\045\071\040\072\032\073\027" +
    "\074\017\075\052\076\012\077\100\103\014\104\054\105" +
    "\005\106\063\107\011\110\061\111\060\112\034\113\036" +
    "\114\051\115\050\116\016\117\055\120\121\121\103\122" +
    "\117\001\002\000\040\012\162\013\167\014\161\015\163" +
    "\016\166\017\165\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\041\uff9d\051\uff9d\001\002\000\004" +
    "\032\uffca\001\002\000\052\012\uff8a\013\uff8a\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\041\uff8a\051\uff8a\001\002\000\052\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\026\uff87\030\uff87\031\uff87" +
    "\032\uff87\033\uff87\034\uff87\035\uff87\041\uff87\051\uff87\001" +
    "\002\000\052\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\144\021\146\022\147\023\145\024\150\026" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\041\uff9a\051\uff9a\001\002\000\052\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\026\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\041\uff85\051\uff85\001\002\000\114" +
    "\005\104\006\112\007\115\021\111\025\077\027\113\036" +
    "\110\050\114\063\056\064\021\065\107\066\041\067\004" +
    "\070\045\071\040\072\032\073\027\074\017\075\052\076" +
    "\012\077\100\103\014\104\054\105\005\106\063\107\011" +
    "\110\061\111\060\112\034\113\036\114\051\115\050\116" +
    "\016\117\055\120\121\121\103\122\117\001\002\000\104" +
    "\005\104\006\112\007\115\021\111\027\113\036\110\063" +
    "\056\064\021\066\041\067\004\070\045\071\040\072\032" +
    "\073\027\074\017\075\052\076\012\103\014\104\054\105" +
    "\005\106\063\107\011\110\061\111\060\112\034\113\036" +
    "\114\051\115\050\116\016\117\055\120\121\121\103\122" +
    "\117\001\002\000\102\005\104\006\112\007\115\021\111" +
    "\027\113\063\056\064\021\066\041\067\004\070\045\071" +
    "\040\072\032\073\027\074\017\075\052\076\012\103\014" +
    "\104\054\105\005\106\063\107\011\110\061\111\060\112" +
    "\034\113\036\114\051\115\050\116\016\117\055\120\121" +
    "\121\103\122\117\001\002\000\052\012\uff88\013\uff88\014" +
    "\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\026\uff88\030\uff88\031\uff88\032\uff88\033" +
    "\uff88\034\uff88\035\uff88\041\uff88\051\uff88\001\002\000\104" +
    "\005\104\006\112\007\115\021\111\027\113\036\110\063" +
    "\056\064\021\066\041\067\004\070\045\071\040\072\032" +
    "\073\027\074\017\075\052\076\012\103\014\104\054\105" +
    "\005\106\063\107\011\110\061\111\060\112\034\113\036" +
    "\114\051\115\050\116\016\117\055\120\121\121\103\122" +
    "\117\001\002\000\106\005\104\006\112\007\115\021\111" +
    "\027\113\036\110\051\134\063\056\064\021\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\103\014\104\054\105\005\106\063\107\011\110" +
    "\061\111\060\112\034\113\036\114\051\115\050\116\016" +
    "\117\055\120\121\121\103\122\117\001\002\000\052\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\026\uff89\030\uff89\031" +
    "\uff89\032\uff89\033\uff89\034\uff89\035\uff89\041\uff89\051\uff89" +
    "\001\002\000\024\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\124\034\123\035\125\041\uffa8\051\uffa8\001\002\000\052" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\026\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\041\uff8b\051" +
    "\uff8b\001\002\000\016\026\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\041\uffa5\051\uffa5\001\002\000\052\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\026\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\041\uff8c\051\uff8c\001\002\000\060" +
    "\010\070\011\075\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\026\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\041\uff86\043\066\051\uff86\001\002\000\104\005\104" +
    "\006\112\007\115\021\111\027\113\036\110\063\056\064" +
    "\021\066\041\067\004\070\045\071\040\072\032\073\027" +
    "\074\017\075\052\076\012\103\014\104\054\105\005\106" +
    "\063\107\011\110\061\111\060\112\034\113\036\114\051" +
    "\115\050\116\016\117\055\120\121\121\103\122\117\001" +
    "\002\000\104\005\104\006\112\007\115\021\111\027\113" +
    "\036\110\063\056\064\021\066\041\067\004\070\045\071" +
    "\040\072\032\073\027\074\017\075\052\076\012\103\014" +
    "\104\054\105\005\106\063\107\011\110\061\111\060\112" +
    "\034\113\036\114\051\115\050\116\016\117\055\120\121" +
    "\121\103\122\117\001\002\000\104\005\104\006\112\007" +
    "\115\021\111\027\113\036\110\063\056\064\021\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\103\014\104\054\105\005\106\063\107\011" +
    "\110\061\111\060\112\034\113\036\114\051\115\050\116" +
    "\016\117\055\120\121\121\103\122\117\001\002\000\024" +
    "\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\124\034\uffa0\035" +
    "\uffa0\041\uffa0\051\uffa0\001\002\000\012\031\130\033\124" +
    "\034\123\035\125\001\002\000\104\005\104\006\112\007" +
    "\115\021\111\027\113\036\110\063\056\064\021\066\041" +
    "\067\004\070\045\071\040\072\032\073\027\074\017\075" +
    "\052\076\012\103\014\104\054\105\005\106\063\107\011" +
    "\110\061\111\060\112\034\113\036\114\051\115\050\116" +
    "\016\117\055\120\121\121\103\122\117\001\002\000\024" +
    "\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\124\034\123\035" +
    "\125\041\uff9c\051\uff9c\001\002\000\024\026\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\124\034\uff9f\035\125\041\uff9f\051" +
    "\uff9f\001\002\000\006\041\137\051\136\001\002\000\016" +
    "\026\uffa6\030\uffa6\031\uffa6\032\uffa6\041\uffa6\051\uffa6\001" +
    "\002\000\016\030\uffa1\033\124\034\123\035\125\041\uffa1" +
    "\051\uffa1\001\002\000\016\026\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\041\uffa7\051\uffa7\001\002\000\104\005\104\006\112" +
    "\007\115\021\111\027\113\036\110\063\056\064\021\066" +
    "\041\067\004\070\045\071\040\072\032\073\027\074\017" +
    "\075\052\076\012\103\014\104\054\105\005\106\063\107" +
    "\011\110\061\111\060\112\034\113\036\114\051\115\050" +
    "\116\016\117\055\120\121\121\103\122\117\001\002\000" +
    "\016\030\uffa2\033\124\034\123\035\125\041\uffa2\051\uffa2" +
    "\001\002\000\012\030\142\033\124\034\123\035\125\001" +
    "\002\000\052\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\041\uff8e\051\uff8e\001\002\000\052\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\147" +
    "\023\145\024\150\026\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\041\uff8d\051\uff8d\001\002\000\102" +
    "\005\104\006\112\007\115\021\111\027\113\063\056\064" +
    "\021\066\041\067\004\070\045\071\040\072\032\073\027" +
    "\074\017\075\052\076\012\103\014\104\054\105\005\106" +
    "\063\107\011\110\061\111\060\112\034\113\036\114\051" +
    "\115\050\116\016\117\055\120\121\121\103\122\117\001" +
    "\002\000\102\005\104\006\112\007\115\021\111\027\113" +
    "\063\056\064\021\066\041\067\004\070\045\071\040\072" +
    "\032\073\027\074\017\075\052\076\012\103\014\104\054" +
    "\105\005\106\063\107\011\110\061\111\060\112\034\113" +
    "\036\114\051\115\050\116\016\117\055\120\121\121\103" +
    "\122\117\001\002\000\102\005\104\006\112\007\115\021" +
    "\111\027\113\063\056\064\021\066\041\067\004\070\045" +
    "\071\040\072\032\073\027\074\017\075\052\076\012\103" +
    "\014\104\054\105\005\106\063\107\011\110\061\111\060" +
    "\112\034\113\036\114\051\115\050\116\016\117\055\120" +
    "\121\121\103\122\117\001\002\000\102\005\104\006\112" +
    "\007\115\021\111\027\113\063\056\064\021\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\103\014\104\054\105\005\106\063\107\011\110" +
    "\061\111\060\112\034\113\036\114\051\115\050\116\016" +
    "\117\055\120\121\121\103\122\117\001\002\000\102\005" +
    "\104\006\112\007\115\021\111\027\113\063\056\064\021" +
    "\066\041\067\004\070\045\071\040\072\032\073\027\074" +
    "\017\075\052\076\012\103\014\104\054\105\005\106\063" +
    "\107\011\110\061\111\060\112\034\113\036\114\051\115" +
    "\050\116\016\117\055\120\121\121\103\122\117\001\002" +
    "\000\052\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\150\026\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\041" +
    "\uff8f\051\uff8f\001\002\000\052\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\150\026\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\034\uff91\035\uff91\041\uff91\051\uff91\001\002\000\052\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\021\uff92\022\147\023\145\024\150\026\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\041\uff92\051\uff92" +
    "\001\002\000\052\012\uff90\013\uff90\014\uff90\015\uff90\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\150" +
    "\026\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\041\uff90\051\uff90\001\002\000\052\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\147\023\145\024\150\026\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\041\uff93\051\uff93\001\002\000" +
    "\024\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\041\uff9e\051\uff9e\001\002\000\004\030\160\001" +
    "\002\000\016\026\uffa4\030\uffa4\031\uffa4\032\uffa4\041\uffa4" +
    "\051\uffa4\001\002\000\102\005\uff94\006\uff94\007\uff94\021" +
    "\uff94\027\uff94\063\uff94\064\uff94\066\uff94\067\uff94\070\uff94" +
    "\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\103" +
    "\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94" +
    "\112\uff94\113\uff94\114\uff94\115\uff94\116\uff94\117\uff94\120" +
    "\uff94\121\uff94\122\uff94\001\002\000\102\005\uff97\006\uff97" +
    "\007\uff97\021\uff97\027\uff97\063\uff97\064\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\103\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110" +
    "\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116\uff97" +
    "\117\uff97\120\uff97\121\uff97\122\uff97\001\002\000\102\005" +
    "\uff96\006\uff96\007\uff96\021\uff96\027\uff96\063\uff96\064\uff96" +
    "\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\103\uff96\104\uff96\105\uff96\106\uff96" +
    "\107\uff96\110\uff96\111\uff96\112\uff96\113\uff96\114\uff96\115" +
    "\uff96\116\uff96\117\uff96\120\uff96\121\uff96\122\uff96\001\002" +
    "\000\102\005\104\006\112\007\115\021\111\027\113\063" +
    "\056\064\021\066\041\067\004\070\045\071\040\072\032" +
    "\073\027\074\017\075\052\076\012\103\014\104\054\105" +
    "\005\106\063\107\011\110\061\111\060\112\034\113\036" +
    "\114\051\115\050\116\016\117\055\120\121\121\103\122" +
    "\117\001\002\000\102\005\uff98\006\uff98\007\uff98\021\uff98" +
    "\027\uff98\063\uff98\064\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\103\uff98" +
    "\104\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112" +
    "\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98\120\uff98" +
    "\121\uff98\122\uff98\001\002\000\102\005\uff99\006\uff99\007" +
    "\uff99\021\uff99\027\uff99\063\uff99\064\uff99\066\uff99\067\uff99" +
    "\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117" +
    "\uff99\120\uff99\121\uff99\122\uff99\001\002\000\102\005\uff95" +
    "\006\uff95\007\uff95\021\uff95\027\uff95\063\uff95\064\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107" +
    "\uff95\110\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95" +
    "\116\uff95\117\uff95\120\uff95\121\uff95\122\uff95\001\002\000" +
    "\040\012\162\013\167\014\161\015\163\016\166\017\165" +
    "\026\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\041\uff9b\051\uff9b\001\002\000\004\030\172\001\002" +
    "\000\016\026\uffa3\030\uffa3\031\uffa3\032\uffa3\041\uffa3\051" +
    "\uffa3\001\002\000\006\026\200\041\201\001\002\000\004" +
    "\031\176\001\002\000\006\026\uff80\041\uff80\001\002\000" +
    "\114\005\104\006\112\007\115\021\111\025\077\027\113" +
    "\036\110\050\114\063\056\064\021\065\107\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\077\100\103\014\104\054\105\005\106\063\107" +
    "\011\110\061\111\060\112\034\113\036\114\051\115\050" +
    "\116\016\117\055\120\121\121\103\122\117\001\002\000" +
    "\006\026\uff7f\041\uff7f\001\002\000\016\026\uff82\030\uff82" +
    "\031\uff82\032\uff82\041\uff82\051\uff82\001\002\000\004\117" +
    "\174\001\002\000\006\026\uff81\041\uff81\001\002\000\004" +
    "\032\uffcd\001\002\000\004\032\uffcb\001\002\000\004\032" +
    "\uffce\001\002\000\004\032\uffcc\001\002\000\072\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\001\002\000\114\005\104\006\112\007\115\021" +
    "\111\025\077\027\113\036\110\050\114\063\056\064\021" +
    "\065\107\066\041\067\004\070\045\071\040\072\032\073" +
    "\027\074\017\075\052\076\012\077\100\103\014\104\054" +
    "\105\005\106\063\107\011\110\061\111\060\112\034\113" +
    "\036\114\051\115\050\116\016\117\055\120\121\121\103" +
    "\122\117\001\002\000\004\030\212\001\002\000\004\025" +
    "\213\001\002\000\004\060\214\001\002\000\114\005\104" +
    "\006\112\007\115\021\111\025\077\027\113\036\110\050" +
    "\114\063\056\064\021\065\107\066\041\067\004\070\045" +
    "\071\040\072\032\073\027\074\017\075\052\076\012\077" +
    "\100\103\014\104\054\105\005\106\063\107\011\110\061" +
    "\111\060\112\034\113\036\114\051\115\050\116\016\117" +
    "\055\120\121\121\103\122\117\001\002\000\010\026\ufff3" +
    "\060\ufff3\061\ufff3\001\002\000\004\031\217\001\002\000" +
    "\004\025\220\001\002\000\100\026\223\037\006\040\030" +
    "\053\024\055\013\056\057\057\064\063\056\064\021\066" +
    "\041\067\004\070\045\071\040\072\032\073\027\074\017" +
    "\075\052\076\012\103\014\104\054\105\005\106\063\107" +
    "\011\110\061\111\060\112\034\113\036\114\051\115\050" +
    "\116\016\117\055\001\002\000\100\026\ufff7\037\ufff7\040" +
    "\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\063\ufff7\064\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7" +
    "\107\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\114\ufff7\115" +
    "\ufff7\116\ufff7\117\ufff7\001\002\000\100\026\225\037\006" +
    "\040\030\053\024\055\013\056\057\057\064\063\056\064" +
    "\021\066\041\067\004\070\045\071\040\072\032\073\027" +
    "\074\017\075\052\076\012\103\014\104\054\105\005\106" +
    "\063\107\011\110\061\111\060\112\034\113\036\114\051" +
    "\115\050\116\016\117\055\001\002\000\010\026\ufff1\060" +
    "\ufff1\061\ufff1\001\002\000\100\026\ufff8\037\ufff8\040\ufff8" +
    "\053\ufff8\055\ufff8\056\ufff8\057\ufff8\063\ufff8\064\ufff8\066" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\076\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107" +
    "\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8" +
    "\116\ufff8\117\ufff8\001\002\000\010\026\ufff2\060\ufff2\061" +
    "\ufff2\001\002\000\006\030\227\041\137\001\002\000\072" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\026\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\051\uffb4\001\002\000\102\002\ufffa\037\ufffa\040" +
    "\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\103\ufffa\104\ufffa\105\ufffa" +
    "\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\114" +
    "\ufffa\115\ufffa\116\ufffa\117\ufffa\001\002\000\006\030\232" +
    "\041\137\001\002\000\072\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\026\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\001\002\000" +
    "\006\030\234\041\137\001\002\000\072\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1" +
    "\001\002\000\004\032\237\001\002\000\104\002\uffd9\026" +
    "\uffd9\037\uffd9\040\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\070\uffd9\071" +
    "\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\103\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112" +
    "\uffd9\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\001\002" +
    "\000\104\002\uffd8\026\uffd8\037\uffd8\040\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8" +
    "\110\uffd8\111\uffd8\112\uffd8\113\uffd8\114\uffd8\115\uffd8\116" +
    "\uffd8\117\uffd8\001\002\000\106\005\104\006\112\007\115" +
    "\021\111\027\113\030\245\036\110\063\056\064\021\066" +
    "\041\067\004\070\045\071\040\072\032\073\027\074\017" +
    "\075\052\076\012\103\014\104\054\105\005\106\063\107" +
    "\011\110\061\111\060\112\034\113\036\114\051\115\050" +
    "\116\016\117\055\120\121\121\103\122\117\001\002\000" +
    "\114\005\104\006\112\007\115\021\111\025\077\027\113" +
    "\036\110\050\114\063\056\064\021\065\107\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\077\100\103\014\104\054\105\005\106\063\107" +
    "\011\110\061\111\060\112\034\113\036\114\051\115\050" +
    "\116\016\117\055\120\121\121\103\122\117\001\002\000" +
    "\004\051\243\001\002\000\072\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\001\002" +
    "\000\006\030\246\041\137\001\002\000\072\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\051" +
    "\uffaa\001\002\000\072\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\026\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\051\uffab\001\002\000\004" +
    "\027\240\001\002\000\072\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\026\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\001\002\000" +
    "\004\030\252\001\002\000\072\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\001\002" +
    "\000\004\030\254\001\002\000\072\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\001" +
    "\002\000\006\030\256\041\137\001\002\000\072\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\051\uffae\001\002\000\006\030\260\041\137\001\002\000" +
    "\072\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\051\uffad\001\002\000\104\002\ufffd\037\ufffd" +
    "\040\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\103\ufffd\104" +
    "\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd" +
    "\113\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd\001\002\000" +
    "\102\002\ufffe\037\006\040\030\053\024\055\013\056\057" +
    "\057\064\062\035\063\056\064\021\066\041\067\004\070" +
    "\045\071\040\072\032\073\027\074\017\075\052\076\012" +
    "\103\014\104\054\105\005\106\063\107\011\110\061\111" +
    "\060\112\034\113\036\114\051\115\050\116\016\117\055" +
    "\001\002\000\106\002\uffec\026\uffec\037\uffec\040\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\062\uffec\063\uffec" +
    "\064\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073" +
    "\uffec\074\uffec\075\uffec\076\uffec\103\uffec\104\uffec\105\uffec" +
    "\106\uffec\107\uffec\110\uffec\111\uffec\112\uffec\113\uffec\114" +
    "\uffec\115\uffec\116\uffec\117\uffec\001\002\000\006\025\267" +
    "\053\266\001\002\000\104\002\uffee\026\uffee\037\uffee\040" +
    "\uffee\053\uffee\055\uffee\056\uffee\057\uffee\062\uffee\063\uffee" +
    "\064\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073" +
    "\uffee\074\uffee\075\uffee\076\uffee\103\uffee\104\uffee\105\uffee" +
    "\106\uffee\107\uffee\110\uffee\111\uffee\112\uffee\113\uffee\114" +
    "\uffee\115\uffee\116\uffee\117\uffee\001\002\000\004\027\273" +
    "\001\002\000\100\026\271\037\006\040\030\053\024\055" +
    "\013\056\057\057\064\063\056\064\021\066\041\067\004" +
    "\070\045\071\040\072\032\073\027\074\017\075\052\076" +
    "\012\103\014\104\054\105\005\106\063\107\011\110\061" +
    "\111\060\112\034\113\036\114\051\115\050\116\016\117" +
    "\055\001\002\000\100\026\272\037\006\040\030\053\024" +
    "\055\013\056\057\057\064\063\056\064\021\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\103\014\104\054\105\005\106\063\107\011\110" +
    "\061\111\060\112\034\113\036\114\051\115\050\116\016" +
    "\117\055\001\002\000\104\002\uffe6\026\uffe6\037\uffe6\040" +
    "\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\103\uffe6\104\uffe6\105\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6\114" +
    "\uffe6\115\uffe6\116\uffe6\117\uffe6\001\002\000\104\002\uffe7" +
    "\026\uffe7\037\uffe7\040\uffe7\053\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\103" +
    "\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7" +
    "\112\uffe7\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\001" +
    "\002\000\114\005\104\006\112\007\115\021\111\025\077" +
    "\027\113\036\110\050\114\063\056\064\021\065\107\066" +
    "\041\067\004\070\045\071\040\072\032\073\027\074\017" +
    "\075\052\076\012\077\100\103\014\104\054\105\005\106" +
    "\063\107\011\110\061\111\060\112\034\113\036\114\051" +
    "\115\050\116\016\117\055\120\121\121\103\122\117\001" +
    "\002\000\004\030\275\001\002\000\004\025\276\001\002" +
    "\000\100\026\300\037\006\040\030\053\024\055\013\056" +
    "\057\057\064\063\056\064\021\066\041\067\004\070\045" +
    "\071\040\072\032\073\027\074\017\075\052\076\012\103" +
    "\014\104\054\105\005\106\063\107\011\110\061\111\060" +
    "\112\034\113\036\114\051\115\050\116\016\117\055\001" +
    "\002\000\100\026\301\037\006\040\030\053\024\055\013" +
    "\056\057\057\064\063\056\064\021\066\041\067\004\070" +
    "\045\071\040\072\032\073\027\074\017\075\052\076\012" +
    "\103\014\104\054\105\005\106\063\107\011\110\061\111" +
    "\060\112\034\113\036\114\051\115\050\116\016\117\055" +
    "\001\002\000\106\002\uffe8\026\uffe8\037\uffe8\040\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\076\uffe8\103\uffe8\104\uffe8\105\uffe8" +
    "\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114" +
    "\uffe8\115\uffe8\116\uffe8\117\uffe8\001\002\000\106\002\uffe9" +
    "\026\uffe9\037\uffe9\040\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9\067\uffe9" +
    "\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9" +
    "\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117" +
    "\uffe9\001\002\000\104\002\uffdd\026\uffdd\037\uffdd\040\uffdd" +
    "\053\uffdd\055\uffdd\056\uffdd\057\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\103\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd" +
    "\115\uffdd\116\uffdd\117\uffdd\001\002\000\004\030\304\001" +
    "\002\000\072\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\051\uffbf\001\002\000\104\002\uffdc" +
    "\026\uffdc\037\uffdc\040\uffdc\053\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\103" +
    "\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc" +
    "\112\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\001" +
    "\002\000\006\030\307\041\137\001\002\000\072\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\051\uffaf\001\002\000\004\027\311\001\002\000\006\030" +
    "\314\117\312\001\002\000\006\030\uffde\041\uffde\001\002" +
    "\000\006\030\322\041\321\001\002\000\004\025\315\001" +
    "\002\000\100\026\317\037\006\040\030\053\024\055\013" +
    "\056\057\057\064\063\056\064\021\066\041\067\004\070" +
    "\045\071\040\072\032\073\027\074\017\075\052\076\012" +
    "\103\014\104\054\105\005\106\063\107\011\110\061\111" +
    "\060\112\034\113\036\114\051\115\050\116\016\117\055" +
    "\001\002\000\100\026\320\037\006\040\030\053\024\055" +
    "\013\056\057\057\064\063\056\064\021\066\041\067\004" +
    "\070\045\071\040\072\032\073\027\074\017\075\052\076" +
    "\012\103\014\104\054\105\005\106\063\107\011\110\061" +
    "\111\060\112\034\113\036\114\051\115\050\116\016\117" +
    "\055\001\002\000\102\002\uffe3\037\uffe3\040\uffe3\053\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\062\uffe3\063\uffe3\064\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107" +
    "\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3\114\uffe3\115\uffe3" +
    "\116\uffe3\117\uffe3\001\002\000\102\002\uffe2\037\uffe2\040" +
    "\uffe2\053\uffe2\055\uffe2\056\uffe2\057\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073" +
    "\uffe2\074\uffe2\075\uffe2\076\uffe2\103\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114" +
    "\uffe2\115\uffe2\116\uffe2\117\uffe2\001\002\000\004\117\327" +
    "\001\002\000\004\025\323\001\002\000\100\026\325\037" +
    "\006\040\030\053\024\055\013\056\057\057\064\063\056" +
    "\064\021\066\041\067\004\070\045\071\040\072\032\073" +
    "\027\074\017\075\052\076\012\103\014\104\054\105\005" +
    "\106\063\107\011\110\061\111\060\112\034\113\036\114" +
    "\051\115\050\116\016\117\055\001\002\000\100\026\326" +
    "\037\006\040\030\053\024\055\013\056\057\057\064\063" +
    "\056\064\021\066\041\067\004\070\045\071\040\072\032" +
    "\073\027\074\017\075\052\076\012\103\014\104\054\105" +
    "\005\106\063\107\011\110\061\111\060\112\034\113\036" +
    "\114\051\115\050\116\016\117\055\001\002\000\102\002" +
    "\uffe1\037\uffe1\040\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070\uffe1\071" +
    "\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\103\uffe1" +
    "\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112" +
    "\uffe1\113\uffe1\114\uffe1\115\uffe1\116\uffe1\117\uffe1\001\002" +
    "\000\102\002\uffe0\037\uffe0\040\uffe0\053\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0" +
    "\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076" +
    "\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0" +
    "\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0\117" +
    "\uffe0\001\002\000\006\030\uffdf\041\uffdf\001\002\000\006" +
    "\030\331\041\137\001\002\000\072\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\001" +
    "\002\000\004\030\333\001\002\000\072\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe" +
    "\001\002\000\006\032\uffd3\041\341\001\002\000\010\032" +
    "\uffd0\041\uffd0\042\337\001\002\000\006\032\uffd1\041\uffd1" +
    "\001\002\000\114\005\104\006\112\007\115\021\111\025" +
    "\077\027\113\036\110\050\114\063\056\064\021\065\107" +
    "\066\041\067\004\070\045\071\040\072\032\073\027\074" +
    "\017\075\052\076\012\077\100\103\014\104\054\105\005" +
    "\106\063\107\011\110\061\111\060\112\034\113\036\114" +
    "\051\115\050\116\016\117\055\120\121\121\103\122\117" +
    "\001\002\000\006\032\uffcf\041\uffcf\001\002\000\004\117" +
    "\335\001\002\000\006\032\uffd2\041\uffd2\001\002\000\004" +
    "\030\344\001\002\000\072\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\026\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\001\002\000" +
    "\114\005\104\006\112\007\115\021\111\025\077\027\113" +
    "\036\110\050\114\063\056\064\021\065\107\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\077\100\103\014\104\054\105\005\106\063\107" +
    "\011\110\061\111\060\112\034\113\036\114\051\115\050" +
    "\116\016\117\055\120\121\121\103\122\117\001\002\000" +
    "\004\030\347\001\002\000\004\032\350\001\002\000\104" +
    "\002\ufffb\037\ufffb\040\ufffb\052\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb" +
    "\111\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117" +
    "\ufffb\001\002\000\114\005\104\006\112\007\115\021\111" +
    "\025\077\027\113\036\110\050\114\063\056\064\021\065" +
    "\107\066\041\067\004\070\045\071\040\072\032\073\027" +
    "\074\017\075\052\076\012\077\100\103\014\104\054\105" +
    "\005\106\063\107\011\110\061\111\060\112\034\113\036" +
    "\114\051\115\050\116\016\117\055\120\121\121\103\122" +
    "\117\001\002\000\004\030\353\001\002\000\004\025\354" +
    "\001\002\000\100\026\356\037\006\040\030\053\024\055" +
    "\013\056\057\057\064\063\056\064\021\066\041\067\004" +
    "\070\045\071\040\072\032\073\027\074\017\075\052\076" +
    "\012\103\014\104\054\105\005\106\063\107\011\110\061" +
    "\111\060\112\034\113\036\114\051\115\050\116\016\117" +
    "\055\001\002\000\100\026\357\037\006\040\030\053\024" +
    "\055\013\056\057\057\064\063\056\064\021\066\041\067" +
    "\004\070\045\071\040\072\032\073\027\074\017\075\052" +
    "\076\012\103\014\104\054\105\005\106\063\107\011\110" +
    "\061\111\060\112\034\113\036\114\051\115\050\116\016" +
    "\117\055\001\002\000\106\002\uffea\026\uffea\037\uffea\040" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\062\uffea" +
    "\063\uffea\064\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072" +
    "\uffea\073\uffea\074\uffea\075\uffea\076\uffea\103\uffea\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113" +
    "\uffea\114\uffea\115\uffea\116\uffea\117\uffea\001\002\000\106" +
    "\002\uffeb\026\uffeb\037\uffeb\040\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\062\uffeb\063\uffeb\064\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb" +
    "\110\uffeb\111\uffeb\112\uffeb\113\uffeb\114\uffeb\115\uffeb\116" +
    "\uffeb\117\uffeb\001\002\000\004\026\371\001\002\000\104" +
    "\002\ufff6\026\ufff6\037\ufff6\040\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\062\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6" +
    "\111\ufff6\112\ufff6\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117" +
    "\ufff6\001\002\000\004\031\364\001\002\000\010\026\ufff4" +
    "\060\ufff4\061\ufff4\001\002\000\004\025\365\001\002\000" +
    "\100\026\367\037\006\040\030\053\024\055\013\056\057" +
    "\057\064\063\056\064\021\066\041\067\004\070\045\071" +
    "\040\072\032\073\027\074\017\075\052\076\012\103\014" +
    "\104\054\105\005\106\063\107\011\110\061\111\060\112" +
    "\034\113\036\114\051\115\050\116\016\117\055\001\002" +
    "\000\100\026\370\037\006\040\030\053\024\055\013\056" +
    "\057\057\064\063\056\064\021\066\041\067\004\070\045" +
    "\071\040\072\032\073\027\074\017\075\052\076\012\103" +
    "\014\104\054\105\005\106\063\107\011\110\061\111\060" +
    "\112\034\113\036\114\051\115\050\116\016\117\055\001" +
    "\002\000\004\026\uffef\001\002\000\004\026\ufff0\001\002" +
    "\000\104\002\ufff5\026\ufff5\037\ufff5\040\ufff5\053\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5" +
    "\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075" +
    "\ufff5\076\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5" +
    "\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5\115\ufff5\116" +
    "\ufff5\117\ufff5\001\002\000\104\002\uffda\026\uffda\037\uffda" +
    "\040\uffda\053\uffda\055\uffda\056\uffda\057\uffda\062\uffda\063" +
    "\uffda\064\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda" +
    "\073\uffda\074\uffda\075\uffda\076\uffda\103\uffda\104\uffda\105" +
    "\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda" +
    "\114\uffda\115\uffda\116\uffda\117\uffda\001\002\000\004\030" +
    "\374\001\002\000\072\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\001\002\000\006" +
    "\030\376\041\137\001\002\000\072\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\051\uffac\001" +
    "\002\000\072\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\051\uffb9\001\002\000\004\030\u0101" +
    "\001\002\000\072\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\051\uffb8\001\002\000\104\002" +
    "\uffd7\026\uffd7\037\uffd7\040\uffd7\053\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\062\uffd7\063\uffd7\064\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7" +
    "\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111" +
    "\uffd7\112\uffd7\113\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7" +
    "\001\002\000\004\030\u0104\001\002\000\072\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\051" +
    "\uffba\001\002\000\006\030\u0106\041\137\001\002\000\072" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\026\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\001\002\000\104\002\uffdb\026\uffdb\037" +
    "\uffdb\040\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072" +
    "\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\103\uffdb\104\uffdb" +
    "\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113" +
    "\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb\001\002\000\004" +
    "\002\001\001\002\000\114\005\104\006\112\007\115\021" +
    "\111\025\077\027\113\036\110\050\114\063\056\064\021" +
    "\065\107\066\041\067\004\070\045\071\040\072\032\073" +
    "\027\074\017\075\052\076\012\077\100\103\014\104\054" +
    "\105\005\106\063\107\011\110\061\111\060\112\034\113" +
    "\036\114\051\115\050\116\016\117\055\120\121\121\103" +
    "\122\117\001\002\000\004\030\u010b\001\002\000\004\032" +
    "\uffa9\001\002\000\006\030\u010d\041\137\001\002\000\072" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\051\uffb5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\046\002\006\003\061\006\045\013\043\014" +
    "\041\015\036\016\007\020\046\021\021\024\032\025\014" +
    "\026\017\027\030\030\024\031\052\037\042\041\022\044" +
    "\064\001\001\000\002\001\001\000\022\005\u010b\011\100" +
    "\012\104\020\046\021\105\022\134\031\052\044\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\u0104\011\100\012\104\020\046\021\105\022" +
    "\134\031\052\044\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\377\001\001\000\002\001\001\000" +
    "\022\005\374\011\100\012\104\020\046\021\105\022\134" +
    "\031\052\044\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\357" +
    "\035\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\333\017\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\327\011\100\012\104\020\046\021\105" +
    "\022\134\031\052\044\121\001\001\000\002\001\001\000" +
    "\022\005\305\011\100\012\104\020\046\021\105\022\134" +
    "\031\052\044\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\262" +
    "\034\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\261\013\043\014\041\015\036\016\007\020\046" +
    "\021\021\024\260\025\014\026\017\027\030\030\024\031" +
    "\052\037\042\041\022\044\064\001\001\000\002\001\001" +
    "\000\022\005\256\011\100\012\104\020\046\021\105\022" +
    "\134\031\052\044\121\001\001\000\022\005\254\011\100" +
    "\012\104\020\046\021\105\022\134\031\052\044\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\234\011\100\012\104\020\046\021\105\022\115\023\117" +
    "\031\052\044\121\001\001\000\022\005\232\011\100\012" +
    "\104\020\046\021\105\022\134\031\052\044\121\001\001" +
    "\000\022\005\230\011\100\012\104\020\046\021\105\022" +
    "\134\031\052\044\121\001\001\000\036\013\227\014\041" +
    "\015\036\016\007\020\046\021\021\025\014\026\017\027" +
    "\030\030\024\031\052\037\042\041\022\044\064\001\001" +
    "\000\022\005\225\011\100\012\104\020\046\021\105\022" +
    "\134\031\052\044\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\206\031\052\001\001\000\024\010" +
    "\205\011\100\012\104\020\046\021\105\022\115\023\117" +
    "\031\052\044\121\001\001\000\002\001\001\000\024\010" +
    "\204\011\100\012\104\020\046\021\105\022\115\023\117" +
    "\031\052\044\121\001\001\000\024\010\203\011\100\012" +
    "\104\020\046\021\105\022\115\023\117\031\052\044\121" +
    "\001\001\000\024\010\202\011\100\012\104\020\046\021" +
    "\105\022\115\023\117\031\052\044\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\101\011\100\012" +
    "\104\020\046\021\105\022\115\023\117\031\052\044\121" +
    "\001\001\000\006\042\174\043\172\001\001\000\024\010" +
    "\170\011\100\012\104\020\046\021\105\022\115\023\117" +
    "\031\052\044\121\001\001\000\004\036\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\156\011\100\012" +
    "\104\020\046\021\105\022\115\023\117\031\052\044\121" +
    "\001\001\000\020\011\100\012\104\020\046\021\105\022" +
    "\155\031\052\044\121\001\001\000\014\012\142\020\046" +
    "\021\105\031\052\044\121\001\001\000\002\001\001\000" +
    "\020\011\100\012\104\020\046\021\105\022\140\031\052" +
    "\044\121\001\001\000\022\005\132\011\100\012\104\020" +
    "\046\021\105\022\134\031\052\044\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\100" +
    "\012\104\020\046\021\105\022\131\031\052\044\121\001" +
    "\001\000\020\011\100\012\104\020\046\021\105\022\126" +
    "\031\052\044\121\001\001\000\020\011\100\012\104\020" +
    "\046\021\105\022\125\031\052\044\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\100\012\104\020" +
    "\046\021\105\022\130\031\052\044\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\100" +
    "\012\104\020\046\021\105\022\137\031\052\044\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\154\020\046\021\105\031" +
    "\052\044\121\001\001\000\014\012\153\020\046\021\105" +
    "\031\052\044\121\001\001\000\014\012\152\020\046\021" +
    "\105\031\052\044\121\001\001\000\014\012\151\020\046" +
    "\021\105\031\052\044\121\001\001\000\014\012\150\020" +
    "\046\021\105\031\052\044\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\167\012\104\020\046\021\105\031\052" +
    "\044\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\176\011\100\012\104\020\046" +
    "\021\105\022\115\023\117\031\052\044\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\210\011\100\012\104\020\046\021\105\022\115\023" +
    "\117\031\052\044\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\214\001\001\000\024\010\215\011" +
    "\100\012\104\020\046\021\105\022\115\023\117\031\052" +
    "\044\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\007\221\014\041\015\036\016\007" +
    "\020\046\021\021\025\220\027\030\030\024\031\052\037" +
    "\042\041\022\044\064\001\001\000\002\001\001\000\032" +
    "\014\041\015\036\016\007\020\046\021\021\025\223\027" +
    "\030\030\024\031\052\037\042\041\022\044\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\243\011\100\012\104\020\046\021\105\022" +
    "\134\031\052\044\121\001\001\000\024\010\241\011\100" +
    "\012\104\020\046\021\105\022\115\023\117\031\052\044" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\013\227\014\041\015\036\016\007\020" +
    "\046\021\021\025\014\026\017\027\030\030\024\031\052" +
    "\037\042\041\022\044\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\267\014\041\015\036\016\007\020\046\021\021\025" +
    "\220\027\030\030\024\031\052\037\042\041\022\044\064" +
    "\001\001\000\032\014\041\015\036\016\007\020\046\021" +
    "\021\025\223\027\030\030\024\031\052\037\042\041\022" +
    "\044\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\273\011\100\012\104\020\046\021\105\022\115" +
    "\023\117\031\052\044\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\007\276\014\041\015\036\016\007" +
    "\020\046\021\021\025\220\027\030\030\024\031\052\037" +
    "\042\041\022\044\064\001\001\000\032\014\041\015\036" +
    "\016\007\020\046\021\021\025\223\027\030\030\024\031" +
    "\052\037\042\041\022\044\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\315\014\041\015\036\016\007\020\046\021\021\025" +
    "\220\027\030\030\024\031\052\037\042\041\022\044\064" +
    "\001\001\000\032\014\041\015\036\016\007\020\046\021" +
    "\021\025\223\027\030\030\024\031\052\037\042\041\022" +
    "\044\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\323\014\041" +
    "\015\036\016\007\020\046\021\021\025\220\027\030\030" +
    "\024\031\052\037\042\041\022\044\064\001\001\000\032" +
    "\014\041\015\036\016\007\020\046\021\021\025\223\027" +
    "\030\030\024\031\052\037\042\041\022\044\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\337\011\100\012\104\020\046\021\105" +
    "\022\115\023\117\031\052\044\121\001\001\000\002\001" +
    "\001\000\004\017\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\345\011\100\012" +
    "\104\020\046\021\105\022\115\023\117\031\052\044\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\351\011\100\012\104\020\046\021\105" +
    "\022\115\023\117\031\052\044\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\354\014\041\015\036" +
    "\016\007\020\046\021\021\025\220\027\030\030\024\031" +
    "\052\037\042\041\022\044\064\001\001\000\032\014\041" +
    "\015\036\016\007\020\046\021\021\025\223\027\030\030" +
    "\024\031\052\037\042\041\022\044\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\365\014\041\015\036\016\007\020\046\021" +
    "\021\025\220\027\030\030\024\031\052\037\042\041\022" +
    "\044\064\001\001\000\032\014\041\015\036\016\007\020" +
    "\046\021\021\025\223\027\030\030\024\031\052\037\042" +
    "\041\022\044\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\u0109\011\100\012\104\020\046\021\105\022" +
    "\115\023\117\031\052\044\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_fs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_fs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_fs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public LinkedList<sent> raiz;
public mng_error e = new mng_error();
public void syntax_error(Symbol s){
        e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); 
}
             
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); ;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_fs$actions {


      

  private final sintactico_fs parser;

  /** Constructor */
  CUP$sintactico_fs$actions(sintactico_fs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_fs$do_action_part00000000(
    int                        CUP$sintactico_fs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_fs$parser,
    java.util.Stack            CUP$sintactico_fs$stack,
    int                        CUP$sintactico_fs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_fs$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_fs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> start_val = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_fs$parser.done_parsing();
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LSENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LIMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= LIMP LSENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n2 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
                for(sent s:n2)
                {
                    raiz.add(s);
                }
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIMP ::= LIMP IMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LIMP",4, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIMP ::= IMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LIMP",4, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMP ::= importar para COND parc ptocoma 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_importar(n1,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IMP",18, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LSENT ::= LSENT SENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LSENT",1, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LSENT ::= SENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LSENT",1, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINS ::= LINS INS 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LINS",5, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINS ::= INS 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LINS",5, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S_SWITCH ::= SWITCH_ llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_SWITCH",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S_SWITCH ::= SWITCH_ DEFECTO llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                n1.casos.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_SWITCH",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SWITCH_ ::= SWITCH_ CASO 
            {
              s_switch RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                n1.casos.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SWITCH_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SWITCH_ ::= selecciona para COND parc llava CASO 
            {
              s_switch RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n3 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_switch(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SWITCH_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASO ::= caso COND dosptos llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("CASO",27, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASO ::= caso COND dosptos llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                 RESULT=new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("CASO",27, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFECTO ::= defecto dosptos llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(null,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DEFECTO",25, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFECTO ::= defecto dosptos llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                 RESULT=new s_bloque(null,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DEFECTO",25, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S_IF ::= IF_ SINO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                n1.bloques.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_IF",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S_IF ::= IF_ 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_IF",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF_ ::= IF_ BL 
            {
              s_if RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.bloques.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF_ ::= si para COND parc llava LINS llavc 
            {
              s_if RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_if(new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo));
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF_ ::= si para COND parc llava llavc 
            {
              s_if RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_if(new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo));
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BL ::= sino si para COND parc llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("BL",24, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BL ::= sino si para COND parc llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("BL",24, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SINO ::= sino llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(null,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SINO",26, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SINO ::= sino llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_bloque(null,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SINO",26, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= INS 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= FUN 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUN ::= funcion er_id para parc llava llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		
                RESULT=new s_funcion(n2,new LinkedList(),new LinkedList(),(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUN ::= funcion er_id para parc llava LINS llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcion(n2,new LinkedList(),n3,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUN ::= funcion er_id para LPAR parc llava llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_funcion(n2,n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUN ::= funcion er_id para LPAR parc llava LINS llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcion(n2,n1,n3,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LPAR ::= LPAR coma er_id 
            {
              LinkedList<String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LPAR",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPAR ::= er_id 
            {
              LinkedList<String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LPAR",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INS ::= DECLARACION ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INS ::= ASIGNACION ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INS ::= IMPRIMIR ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INS ::= OP_UNARIA ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INS ::= retornar ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_retornarEmpty((n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INS ::= retornar COND ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_retornar(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INS ::= detener ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                 RESULT=new s_detener((n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INS ::= LACCESO ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                s_accesos a=(s_accesos)n1;
                a.IsSent=true;
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INS ::= S_IF 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INS ::= S_SWITCH 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= var LDECLA 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_declaraciones(n1,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LDECLA ::= LDECLA coma DECLA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LDECLA",2, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LDECLA ::= DECLA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LDECLA",2, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLA ::= er_id 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
               RESULT= new s_declaracion(n2,null,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLA",13, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLA ::= er_id is COND 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_declaracion(n2,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLA",13, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= LACCESO is COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignacion(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= LACCESO a_mas COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaMas(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= LACCESO a_menos COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaMenos(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= LACCESO a_por COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaPor(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= LACCESO a_div COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaDiv(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LACCESO ::= LACCESO pto ACCESO 
            {
              s_accesos RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.accesos.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LACCESO",34, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LACCESO ::= ACCESO 
            {
              s_accesos RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_accesos(new LinkedList());
                RESULT.accesos.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LACCESO",34, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ACCESO ::= er_id 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_acVariable(n2,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACCESO ::= er_id cora COND corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_accArray(n2,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESO ::= LLAMADA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESO ::= ascendente 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaAscendente((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESO ::= descendente 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaDescendente((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCESO ::= invertir 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaInvertir((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCESO ::= maximo 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaMaximo((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCESO ::= minimo 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaMinimo((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO ::= filter er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalFilter(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO ::= map er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalMap(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO ::= buscar er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalBuscar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO ::= reduce er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalReduce(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO ::= todos er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalTodos(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO ::= alguno er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalAlgunos(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCESO ::= cerrar parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCerrar(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO ::= cerrar LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCerrar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACCESO ::= clic LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoClic(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACCESO ::= clic parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoClic(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACCESO ::= video LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearVideo(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ACCESO ::= musica LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearReproductor(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ACCESO ::= imagen LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearImagen(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ACCESO ::= boton LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearBoton(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ACCESO ::= desple LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearDesplegable(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ACCESO ::= controln LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearCtrlNum(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACCESO ::= area LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearAreaTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACCESO ::= caja LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearCajaTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCESO ::= texto LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESO ::= contenedor LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearContenedor(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAMADA ::= er_id para LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_llamada(n2,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LLAMADA ::= er_id para parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_llamada(n2,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IMPRIMIR ::= imprimir para COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_imprimir(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COND ::= LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
               RESULT=n1; 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= cora LCOND corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_array(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= cora corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_array(new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= OBJETO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= crearArrFile COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_propiaArrayFromFile(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= leerGxml COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nativaGxml(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LCOND ::= LCOND coma LOGICA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LCOND",3, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LCOND ::= LOGICA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LCOND",3, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOGICA ::= LOGICA op_and LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_and(n1,n3,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOGICA ::= LOGICA op_or LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_or(n1,n3,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOGICA ::= op_not LOGICA 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_not(n1,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOGICA ::= RELA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=n1;
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOGICA ::= LOGICA ques LOGICA dosptos LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                    RESULT=new o_ternario(n1,n2,n3,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RELA ::= RELA OPEREL RELA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                    RESULT=new o_relacional(n1,n3,n2,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("RELA",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RELA ::= E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=n1;
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("RELA",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPEREL ::= mayor 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=">";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPEREL ::= menor 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="<";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPEREL ::= igual 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="==";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPEREL ::= dif 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="!=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPEREL ::= mayori 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=">=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPEREL ::= menori 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="<=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E mas E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_suma(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E menos E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_resta(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E mul E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_multiplicacion(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E divis E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_division(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E pote E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=new oa_potencia(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= para LOGICA parc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=n2;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= menos E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=new oa_negativo(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= er_decimal 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_decimal, Double.parseDouble(n1),(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= er_entero 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_entero,  Integer.parseInt(n1),(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= er_cadena 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_cadena,n1,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= falso 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                
                RESULT= new o_valorPuntual(var.tipo_booleano,false,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= verdadero 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new o_valorPuntual(var.tipo_booleano,true,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= nulo 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		 
                RESULT= new o_valorPuntual(var.tipo_nulo,null,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= LACCESO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new o_valorPuntual(null,n1,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= OP_UNARIA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_UNARIA ::= LACCESO aumen 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n2 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_aumento(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OP_UNARIA",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_UNARIA ::= LACCESO decre 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n2 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_decremento(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OP_UNARIA",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OBJETO ::= llava VALORES llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<o_objetoValor> n2 = (LinkedList<o_objetoValor>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_objeto(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OBJETO",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALORES ::= VALORES coma VALUE 
            {
              LinkedList<o_objetoValor> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<o_objetoValor> n1 = (LinkedList<o_objetoValor>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		o_objetoValor n2 = (o_objetoValor)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALORES",33, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALORES ::= VALUE 
            {
              LinkedList<o_objetoValor> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		o_objetoValor n1 = (o_objetoValor)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALORES",33, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALUE ::= er_id dosptos COND 
            {
              o_objetoValor RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new o_objetoValor(n1,n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALUE",32, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_fs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_fs$do_action(
    int                        CUP$sintactico_fs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_fs$parser,
    java.util.Stack            CUP$sintactico_fs$stack,
    int                        CUP$sintactico_fs$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_fs$do_action_part00000000(
                               CUP$sintactico_fs$act_num,
                               CUP$sintactico_fs$parser,
                               CUP$sintactico_fs$stack,
                               CUP$sintactico_fs$top);
    }
}

}
