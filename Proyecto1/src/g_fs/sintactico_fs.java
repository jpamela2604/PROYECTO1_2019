
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package g_fs;

import java.io.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import errors.mng_error;
import proyecto1.var;
import codigo_fs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico_fs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbl.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico_fs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico_fs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico_fs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\006\004\000\002\006\003" +
    "\000\002\024\007\000\002\003\004\000\002\003\003\000" +
    "\002\007\004\000\002\007\003\000\002\030\004\000\002" +
    "\030\005\000\002\041\004\000\002\041\010\000\002\035" +
    "\010\000\002\035\007\000\002\033\007\000\002\033\006" +
    "\000\002\027\004\000\002\027\003\000\002\037\004\000" +
    "\002\037\011\000\002\037\010\000\002\032\012\000\002" +
    "\032\011\000\002\034\006\000\002\034\005\000\002\013" +
    "\003\000\002\013\003\000\002\026\010\000\002\026\011" +
    "\000\002\026\011\000\002\026\012\000\002\040\005\000" +
    "\002\040\003\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\005\000\002\025\004\000\002\025\004\000\002\025\003" +
    "\000\002\025\003\000\002\014\004\000\002\004\005\000" +
    "\002\004\003\000\002\017\003\000\002\017\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\044\005\000\002\044\003" +
    "\000\002\020\003\000\002\020\006\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\031\006\000\002\031\005\000\002\016" +
    "\006\000\002\010\003\000\002\010\005\000\002\010\004" +
    "\000\002\010\003\000\002\010\005\000\002\005\005\000" +
    "\002\005\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\004\000\002\022\003\000\002\022\007\000\002\011" +
    "\005\000\002\011\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\021\004\000\002\021\004\000\002\023\005\000\002\043" +
    "\005\000\002\043\003\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\114\036\006\037\041\051\030\052\024\054" +
    "\013\055\064\056\071\061\040\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\001\002\000\072\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\050\uffc1\001\002\000\116\004" +
    "\111\005\116\006\121\020\115\026\117\035\114\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\077\032\100\025" +
    "\101\051\102\014\103\061\104\005\105\070\106\011\107" +
    "\066\110\065\111\037\112\042\113\056\114\055\115\016" +
    "\116\035\117\062\120\125\121\110\122\123\001\002\000" +
    "\004\026\u0115\001\002\000\004\002\u0114\001\002\000\004" +
    "\031\u0113\001\002\000\116\004\111\005\116\006\121\020" +
    "\115\026\117\035\114\062\063\063\021\064\027\065\045" +
    "\066\004\067\052\070\043\071\034\072\031\073\017\074" +
    "\057\075\012\077\032\100\025\101\051\102\014\103\061" +
    "\104\005\105\070\106\011\107\066\110\065\111\037\112" +
    "\042\113\056\114\055\115\016\116\035\117\062\120\125" +
    "\121\110\122\123\001\002\000\004\117\u010f\001\002\000" +
    "\004\031\u010e\001\002\000\004\117\251\001\002\000\114" +
    "\002\uffe5\036\uffe5\037\uffe5\052\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113" +
    "\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5\001\002\000\116" +
    "\004\111\005\116\006\121\020\115\026\117\035\114\062" +
    "\063\063\021\064\027\065\045\066\004\067\052\070\043" +
    "\071\034\072\031\073\017\074\057\075\012\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\004\117\u0108\001\002\000\114\002\uffe4\036\uffe4\037" +
    "\uffe4\052\uffe4\054\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\077\uffe4\100\uffe4" +
    "\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107" +
    "\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\114\uffe4\115\uffe4" +
    "\116\uffe4\117\uffe4\001\002\000\072\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\001" +
    "\002\000\004\031\u0107\001\002\000\010\025\376\057\216" +
    "\060\377\001\002\000\004\026\366\001\002\000\116\004" +
    "\111\005\116\006\121\020\115\026\117\035\114\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\077\032\100\025" +
    "\101\051\102\014\103\061\104\005\105\070\106\011\107" +
    "\066\110\065\111\037\112\042\113\056\114\055\115\016" +
    "\116\035\117\062\120\125\121\110\122\123\001\002\000" +
    "\116\002\uffd4\025\uffd4\036\uffd4\037\uffd4\052\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4" +
    "\112\uffd4\113\uffd4\114\uffd4\115\uffd4\116\uffd4\117\uffd4\001" +
    "\002\000\120\004\111\005\116\006\121\020\115\026\117" +
    "\027\362\035\114\062\063\063\021\064\027\065\045\066" +
    "\004\067\052\070\043\071\034\072\031\073\017\074\057" +
    "\075\012\077\032\100\025\101\051\102\014\103\061\104" +
    "\005\105\070\106\011\107\066\110\065\111\037\112\042" +
    "\113\056\114\055\115\016\116\035\117\062\120\125\121" +
    "\110\122\123\001\002\000\004\026\355\001\002\000\004" +
    "\117\353\001\002\000\116\004\111\005\116\006\121\020" +
    "\115\026\117\035\114\062\063\063\021\064\027\065\045" +
    "\066\004\067\052\070\043\071\034\072\031\073\017\074" +
    "\057\075\012\077\032\100\025\101\051\102\014\103\061" +
    "\104\005\105\070\106\011\107\066\110\065\111\037\112" +
    "\042\113\056\114\055\115\016\116\035\117\062\120\125" +
    "\121\110\122\123\001\002\000\116\002\uffd5\025\uffd5\036" +
    "\uffd5\037\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106" +
    "\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5\113\uffd5\114\uffd5" +
    "\115\uffd5\116\uffd5\117\uffd5\001\002\000\004\117\347\001" +
    "\002\000\006\027\344\117\251\001\002\000\116\002\ufffc" +
    "\036\ufffc\037\ufffc\051\ufffc\052\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc" +
    "\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc" +
    "\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113" +
    "\ufffc\114\ufffc\115\ufffc\116\ufffc\117\ufffc\001\002\000\116" +
    "\004\111\005\116\006\121\020\115\026\117\035\114\062" +
    "\063\063\021\064\027\065\045\066\004\067\052\070\043" +
    "\071\034\072\031\073\017\074\057\075\012\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\004\117\322\001\002\000\004\117\314\001\002\000" +
    "\116\004\111\005\116\006\121\020\115\026\117\035\114" +
    "\062\063\063\021\064\027\065\045\066\004\067\052\070" +
    "\043\071\034\072\031\073\017\074\057\075\012\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\004\117\307\001\002\000\004\031\306\001\002" +
    "\000\072\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\050\uffc2\001\002\000\004\031\305\001" +
    "\002\000\120\002\uffed\025\uffed\036\uffed\037\uffed\052\uffed" +
    "\053\267\054\uffed\055\uffed\056\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\077\uffed\100\uffed\101" +
    "\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed" +
    "\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed\115\uffed\116" +
    "\uffed\117\uffed\001\002\000\114\002\ufff9\036\ufff9\037\ufff9" +
    "\052\ufff9\054\ufff9\055\ufff9\056\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\075\ufff9\077\ufff9\100\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9" +
    "\110\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9\116" +
    "\ufff9\117\ufff9\001\002\000\116\004\111\005\116\006\121" +
    "\020\115\026\117\035\114\062\063\063\021\064\027\065" +
    "\045\066\004\067\052\070\043\071\034\072\031\073\017" +
    "\074\057\075\012\077\032\100\025\101\051\102\014\103" +
    "\061\104\005\105\070\106\011\107\066\110\065\111\037" +
    "\112\042\113\056\114\055\115\016\116\035\117\062\120" +
    "\125\121\110\122\123\001\002\000\072\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\001\002\000\116\002\uffff\036\006\037\041\051\030\052" +
    "\024\054\013\055\064\056\071\061\040\062\063\063\021" +
    "\064\027\065\045\066\004\067\052\070\043\071\034\072" +
    "\031\073\017\074\057\075\012\077\032\100\025\101\051" +
    "\102\014\103\061\104\005\105\070\106\011\107\066\110" +
    "\065\111\037\112\042\113\056\114\055\115\016\116\035" +
    "\117\062\001\002\000\072\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\025\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8\001\002\000" +
    "\116\004\111\005\116\006\121\020\115\026\117\035\114" +
    "\062\063\063\021\064\027\065\045\066\004\067\052\070" +
    "\043\071\034\072\031\073\017\074\057\075\012\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\116\004\111\005\116\006\121\020\115\026\117" +
    "\035\114\062\063\063\021\064\027\065\045\066\004\067" +
    "\052\070\043\071\034\072\031\073\017\074\057\075\012" +
    "\077\032\100\025\101\051\102\014\103\061\104\005\105" +
    "\070\106\011\107\066\110\065\111\037\112\042\113\056" +
    "\114\055\115\016\116\035\117\062\120\125\121\110\122" +
    "\123\001\002\000\004\117\254\001\002\000\072\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\050\uffc5\001\002\000\004\117\251\001\002\000\076\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025" +
    "\uffc7\026\242\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\243\050\uffc7\001\002\000\072\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\050\uffc3\001\002\000\126\004\111\005\116\006\121\020" +
    "\115\024\104\026\117\031\240\035\114\047\120\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\076\105\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\116\004\111\005\116\006\121\020\115\026\117" +
    "\035\114\062\063\063\021\064\027\065\045\066\004\067" +
    "\052\070\043\071\034\072\031\073\017\074\057\075\012" +
    "\077\032\100\025\101\051\102\014\103\061\104\005\105" +
    "\070\106\011\107\066\110\065\111\037\112\042\113\056" +
    "\114\055\115\016\116\035\117\062\120\125\121\110\122" +
    "\123\001\002\000\116\004\111\005\116\006\121\020\115" +
    "\026\117\035\114\062\063\063\021\064\027\065\045\066" +
    "\004\067\052\070\043\071\034\072\031\073\017\074\057" +
    "\075\012\077\032\100\025\101\051\102\014\103\061\104" +
    "\005\105\070\106\011\107\066\110\065\111\037\112\042" +
    "\113\056\114\055\115\016\116\035\117\062\120\125\121" +
    "\110\122\123\001\002\000\114\002\000\036\006\037\041" +
    "\052\024\054\013\055\064\056\071\061\040\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\077\032\100\025\101" +
    "\051\102\014\103\061\104\005\105\070\106\011\107\066" +
    "\110\065\111\037\112\042\113\056\114\055\115\016\116" +
    "\035\117\062\001\002\000\116\004\111\005\116\006\121" +
    "\020\115\026\117\035\114\062\063\063\021\064\027\065" +
    "\045\066\004\067\052\070\043\071\034\072\031\073\017" +
    "\074\057\075\012\077\032\100\025\101\051\102\014\103" +
    "\061\104\005\105\070\106\011\107\066\110\065\111\037" +
    "\112\042\113\056\114\055\115\016\116\035\117\062\120" +
    "\125\121\110\122\123\001\002\000\004\026\212\001\002" +
    "\000\024\007\075\010\102\031\101\041\076\042\073\043" +
    "\100\044\077\045\074\046\103\001\002\000\074\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\077\032\100\025" +
    "\101\051\102\014\103\061\104\005\105\070\106\011\107" +
    "\066\110\065\111\037\112\042\113\056\114\055\115\016" +
    "\116\035\117\062\001\002\000\124\004\111\005\116\006" +
    "\121\020\115\024\104\026\117\035\114\047\120\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\076\105\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\052\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\025" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\040\uff7f\050\uff7f\001\002\000\124\004\111\005\116\006" +
    "\121\020\115\024\104\026\117\035\114\047\120\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\076\105\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\124\004\111\005\116\006\121\020\115\024\104" +
    "\026\117\035\114\047\120\062\063\063\021\064\027\065" +
    "\045\066\004\067\052\070\043\071\034\072\031\073\017" +
    "\074\057\075\012\076\105\077\032\100\025\101\051\102" +
    "\014\103\061\104\005\105\070\106\011\107\066\110\065" +
    "\111\037\112\042\113\056\114\055\115\016\116\035\117" +
    "\062\120\125\121\110\122\123\001\002\000\124\004\111" +
    "\005\116\006\121\020\115\024\104\026\117\035\114\047" +
    "\120\062\063\063\021\064\027\065\045\066\004\067\052" +
    "\070\043\071\034\072\031\073\017\074\057\075\012\076" +
    "\105\077\032\100\025\101\051\102\014\103\061\104\005" +
    "\105\070\106\011\107\066\110\065\111\037\112\042\113" +
    "\056\114\055\115\016\116\035\117\062\120\125\121\110" +
    "\122\123\001\002\000\116\002\uffd6\025\uffd6\036\uffd6\037" +
    "\uffd6\052\uffd6\054\uffd6\055\uffd6\056\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\077\uffd6\100\uffd6" +
    "\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107" +
    "\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\114\uffd6\115\uffd6" +
    "\116\uffd6\117\uffd6\001\002\000\052\011\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80" +
    "\022\uff80\023\uff80\025\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\033\uff80\034\uff80\040\uff80\050\uff80\001\002\000\124" +
    "\004\111\005\116\006\121\020\115\024\104\026\117\035" +
    "\114\047\120\062\063\063\021\064\027\065\045\066\004" +
    "\067\052\070\043\071\034\072\031\073\017\074\057\075" +
    "\012\076\105\077\032\100\025\101\051\102\014\103\061" +
    "\104\005\105\070\106\011\107\066\110\065\111\037\112" +
    "\042\113\056\114\055\115\016\116\035\117\062\120\125" +
    "\121\110\122\123\001\002\000\004\117\176\001\002\000" +
    "\116\004\111\005\116\006\121\020\115\026\117\035\114" +
    "\062\063\063\021\064\027\065\045\066\004\067\052\070" +
    "\043\071\034\072\031\073\017\074\057\075\012\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\040\011\164\012\171\013\163\014\165\015\170" +
    "\016\167\025\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\040\uff99\050\uff99\001\002\000\004\031\uffca" +
    "\001\002\000\052\011\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86" +
    "\025\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034" +
    "\uff86\040\uff86\050\uff86\001\002\000\052\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\025\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\040\uff83\050\uff83\001\002\000" +
    "\052\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\150\020\152\021\153\022\151\023\154\025\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\040\uff96" +
    "\050\uff96\001\002\000\052\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\023\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033" +
    "\uff81\034\uff81\040\uff81\050\uff81\001\002\000\116\004\111" +
    "\005\116\006\121\020\115\026\117\035\114\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\077\032\100\025\101" +
    "\051\102\014\103\061\104\005\105\070\106\011\107\066" +
    "\110\065\111\037\112\042\113\056\114\055\115\016\116" +
    "\035\117\062\120\125\121\110\122\123\001\002\000\114" +
    "\004\111\005\116\006\121\020\115\026\117\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\077\032\100\025\101" +
    "\051\102\014\103\061\104\005\105\070\106\011\107\066" +
    "\110\065\111\037\112\042\113\056\114\055\115\016\116" +
    "\035\117\062\120\125\121\110\122\123\001\002\000\052" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\021\uff84\022\uff84\023\uff84\025\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\040\uff84\050" +
    "\uff84\001\002\000\116\004\111\005\116\006\121\020\115" +
    "\026\117\035\114\062\063\063\021\064\027\065\045\066" +
    "\004\067\052\070\043\071\034\072\031\073\017\074\057" +
    "\075\012\077\032\100\025\101\051\102\014\103\061\104" +
    "\005\105\070\106\011\107\066\110\065\111\037\112\042" +
    "\113\056\114\055\115\016\116\035\117\062\120\125\121" +
    "\110\122\123\001\002\000\120\004\111\005\116\006\121" +
    "\020\115\026\117\035\114\050\140\062\063\063\021\064" +
    "\027\065\045\066\004\067\052\070\043\071\034\072\031" +
    "\073\017\074\057\075\012\077\032\100\025\101\051\102" +
    "\014\103\061\104\005\105\070\106\011\107\066\110\065" +
    "\111\037\112\042\113\056\114\055\115\016\116\035\117" +
    "\062\120\125\121\110\122\123\001\002\000\052\011\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\025\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\040\uff85\050\uff85\001" +
    "\002\000\024\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\130" +
    "\033\127\034\131\040\uffa3\050\uffa3\001\002\000\052\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\023\uff87\025\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\040\uff87\050\uff87" +
    "\001\002\000\016\025\uffa0\027\uffa0\030\uffa0\031\uffa0\040" +
    "\uffa0\050\uffa0\001\002\000\052\011\uff88\012\uff88\013\uff88" +
    "\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\023\uff88\025\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\040\uff88\050\uff88\001\002\000\060\007" +
    "\075\010\102\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\025" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\040\uff82\042\073\050\uff82\001\002\000\116\004\111\005" +
    "\116\006\121\020\115\026\117\035\114\062\063\063\021" +
    "\064\027\065\045\066\004\067\052\070\043\071\034\072" +
    "\031\073\017\074\057\075\012\077\032\100\025\101\051" +
    "\102\014\103\061\104\005\105\070\106\011\107\066\110" +
    "\065\111\037\112\042\113\056\114\055\115\016\116\035" +
    "\117\062\120\125\121\110\122\123\001\002\000\116\004" +
    "\111\005\116\006\121\020\115\026\117\035\114\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\077\032\100\025" +
    "\101\051\102\014\103\061\104\005\105\070\106\011\107" +
    "\066\110\065\111\037\112\042\113\056\114\055\115\016" +
    "\116\035\117\062\120\125\121\110\122\123\001\002\000" +
    "\116\004\111\005\116\006\121\020\115\026\117\035\114" +
    "\062\063\063\021\064\027\065\045\066\004\067\052\070" +
    "\043\071\034\072\031\073\017\074\057\075\012\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\024\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032\130" +
    "\033\uff9c\034\uff9c\040\uff9c\050\uff9c\001\002\000\012\030" +
    "\134\032\130\033\127\034\131\001\002\000\116\004\111" +
    "\005\116\006\121\020\115\026\117\035\114\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\077\032\100\025\101" +
    "\051\102\014\103\061\104\005\105\070\106\011\107\066" +
    "\110\065\111\037\112\042\113\056\114\055\115\016\116" +
    "\035\117\062\120\125\121\110\122\123\001\002\000\024" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\032\130\033\127\034" +
    "\131\040\uff98\050\uff98\001\002\000\024\025\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\130\033\uff9b\034\131\040\uff9b\050" +
    "\uff9b\001\002\000\006\040\143\050\142\001\002\000\016" +
    "\025\uffa1\027\uffa1\030\uffa1\031\uffa1\040\uffa1\050\uffa1\001" +
    "\002\000\016\027\uff9d\032\130\033\127\034\131\040\uff9d" +
    "\050\uff9d\001\002\000\016\025\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\040\uffa2\050\uffa2\001\002\000\116\004\111\005\116" +
    "\006\121\020\115\026\117\035\114\062\063\063\021\064" +
    "\027\065\045\066\004\067\052\070\043\071\034\072\031" +
    "\073\017\074\057\075\012\077\032\100\025\101\051\102" +
    "\014\103\061\104\005\105\070\106\011\107\066\110\065" +
    "\111\037\112\042\113\056\114\055\115\016\116\035\117" +
    "\062\120\125\121\110\122\123\001\002\000\016\027\uff9e" +
    "\032\130\033\127\034\131\040\uff9e\050\uff9e\001\002\000" +
    "\012\027\146\032\130\033\127\034\131\001\002\000\052" +
    "\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\040\uff8a\050" +
    "\uff8a\001\002\000\052\011\uff89\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\021\153\022\151\023" +
    "\154\025\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\040\uff89\050\uff89\001\002\000\114\004\111\005" +
    "\116\006\121\020\115\026\117\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\120\125\121\110\122\123\001\002\000\114\004\111\005" +
    "\116\006\121\020\115\026\117\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\120\125\121\110\122\123\001\002\000\114\004\111\005" +
    "\116\006\121\020\115\026\117\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\120\125\121\110\122\123\001\002\000\114\004\111\005" +
    "\116\006\121\020\115\026\117\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\120\125\121\110\122\123\001\002\000\114\004\111\005" +
    "\116\006\121\020\115\026\117\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\120\125\121\110\122\123\001\002\000\052\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\154\025\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\040\uff8b\050\uff8b\001\002" +
    "\000\052\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\154\025\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\040" +
    "\uff8d\050\uff8d\001\002\000\052\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\153\022" +
    "\151\023\154\025\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\033\uff8e\034\uff8e\040\uff8e\050\uff8e\001\002\000\052\011" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\023\154\025\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\040\uff8c\050\uff8c" +
    "\001\002\000\052\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\153\022\151\023\154" +
    "\025\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\040\uff8f\050\uff8f\001\002\000\024\025\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a\050" +
    "\uff9a\001\002\000\114\004\uff90\005\uff90\006\uff90\020\uff90" +
    "\026\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105" +
    "\uff90\106\uff90\107\uff90\110\uff90\111\uff90\112\uff90\113\uff90" +
    "\114\uff90\115\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122" +
    "\uff90\001\002\000\114\004\uff93\005\uff93\006\uff93\020\uff93" +
    "\026\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067" +
    "\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93" +
    "\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\105" +
    "\uff93\106\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93" +
    "\114\uff93\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\122" +
    "\uff93\001\002\000\114\004\uff92\005\uff92\006\uff92\020\uff92" +
    "\026\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92" +
    "\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105" +
    "\uff92\106\uff92\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92" +
    "\114\uff92\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\122" +
    "\uff92\001\002\000\114\004\111\005\116\006\121\020\115" +
    "\026\117\062\063\063\021\064\027\065\045\066\004\067" +
    "\052\070\043\071\034\072\031\073\017\074\057\075\012" +
    "\077\032\100\025\101\051\102\014\103\061\104\005\105" +
    "\070\106\011\107\066\110\065\111\037\112\042\113\056" +
    "\114\055\115\016\116\035\117\062\120\125\121\110\122" +
    "\123\001\002\000\114\004\uff94\005\uff94\006\uff94\020\uff94" +
    "\026\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94" +
    "\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105" +
    "\uff94\106\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94" +
    "\114\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122" +
    "\uff94\001\002\000\114\004\uff95\005\uff95\006\uff95\020\uff95" +
    "\026\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067" +
    "\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95" +
    "\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105" +
    "\uff95\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95" +
    "\114\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95\122" +
    "\uff95\001\002\000\114\004\uff91\005\uff91\006\uff91\020\uff91" +
    "\026\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105" +
    "\uff91\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91\113\uff91" +
    "\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91\122" +
    "\uff91\001\002\000\040\011\164\012\171\013\163\014\165" +
    "\015\170\016\167\025\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\040\uff97\050\uff97\001\002\000\006" +
    "\027\174\040\143\001\002\000\016\025\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\040\uff9f\050\uff9f\001\002\000\006\025\203" +
    "\040\202\001\002\000\004\030\200\001\002\000\006\025" +
    "\uff7c\040\uff7c\001\002\000\124\004\111\005\116\006\121" +
    "\020\115\024\104\026\117\035\114\047\120\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\076\105\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\006\025\uff7b\040\uff7b\001\002\000\004\117\176\001" +
    "\002\000\016\025\uff7e\027\uff7e\030\uff7e\031\uff7e\040\uff7e" +
    "\050\uff7e\001\002\000\006\025\uff7d\040\uff7d\001\002\000" +
    "\004\031\uffcd\001\002\000\004\031\uffcb\001\002\000\004" +
    "\031\uffce\001\002\000\004\031\uffcc\001\002\000\072\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\050\uffc9\001\002\000\124\004\111\005\116\006\121" +
    "\020\115\024\104\026\117\035\114\047\120\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\076\105\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\004\027\214\001\002\000\004\024\215\001\002\000" +
    "\004\057\216\001\002\000\124\004\111\005\116\006\121" +
    "\020\115\024\104\026\117\035\114\047\120\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\076\105\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\010\025\ufff3\057\ufff3\060\ufff3\001\002\000\004\030" +
    "\221\001\002\000\004\024\222\001\002\000\112\025\225" +
    "\036\006\037\041\052\024\054\013\055\064\056\071\062" +
    "\063\063\021\064\027\065\045\066\004\067\052\070\043" +
    "\071\034\072\031\073\017\074\057\075\012\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\001\002\000\112\025\ufff7\036\ufff7" +
    "\037\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\077\ufff7\100\ufff7\101" +
    "\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7" +
    "\110\ufff7\111\ufff7\112\ufff7\113\ufff7\114\ufff7\115\ufff7\116" +
    "\ufff7\117\ufff7\001\002\000\112\025\227\036\006\037\041" +
    "\052\024\054\013\055\064\056\071\062\063\063\021\064" +
    "\027\065\045\066\004\067\052\070\043\071\034\072\031" +
    "\073\017\074\057\075\012\077\032\100\025\101\051\102" +
    "\014\103\061\104\005\105\070\106\011\107\066\110\065" +
    "\111\037\112\042\113\056\114\055\115\016\116\035\117" +
    "\062\001\002\000\010\025\ufff1\057\ufff1\060\ufff1\001\002" +
    "\000\112\025\ufff8\036\ufff8\037\ufff8\052\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8" +
    "\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113" +
    "\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8\001\002\000\010" +
    "\025\ufff2\057\ufff2\060\ufff2\001\002\000\006\027\231\040" +
    "\143\001\002\000\072\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\050\uffb4\001\002\000\114" +
    "\002\ufffa\036\ufffa\037\ufffa\052\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075" +
    "\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113" +
    "\ufffa\114\ufffa\115\ufffa\116\ufffa\117\ufffa\001\002\000\006" +
    "\027\234\040\143\001\002\000\072\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\001" +
    "\002\000\006\027\236\040\143\001\002\000\072\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\050\uffb1\001\002\000\004\031\241\001\002\000\116\002" +
    "\uffd9\025\uffd9\036\uffd9\037\uffd9\052\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104" +
    "\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9" +
    "\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\001\002\000" +
    "\116\002\uffd8\025\uffd8\036\uffd8\037\uffd8\052\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103" +
    "\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8" +
    "\112\uffd8\113\uffd8\114\uffd8\115\uffd8\116\uffd8\117\uffd8\001" +
    "\002\000\120\004\111\005\116\006\121\020\115\026\117" +
    "\027\247\035\114\062\063\063\021\064\027\065\045\066" +
    "\004\067\052\070\043\071\034\072\031\073\017\074\057" +
    "\075\012\077\032\100\025\101\051\102\014\103\061\104" +
    "\005\105\070\106\011\107\066\110\065\111\037\112\042" +
    "\113\056\114\055\115\016\116\035\117\062\120\125\121" +
    "\110\122\123\001\002\000\124\004\111\005\116\006\121" +
    "\020\115\024\104\026\117\035\114\047\120\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\076\105\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\004\050\245\001\002\000\072\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\001" +
    "\002\000\006\027\250\040\143\001\002\000\072\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\050\uffa5\001\002\000\072\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\025\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\001\002\000" +
    "\004\026\242\001\002\000\004\027\253\001\002\000\072" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\050\uffb8\001\002\000\004\027\255\001\002\000" +
    "\072\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\050\uffbb\001\002\000\006\027\257\040\143" +
    "\001\002\000\072\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\050\uffae\001\002\000\006\027" +
    "\261\040\143\001\002\000\072\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\025\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\001\002" +
    "\000\116\002\ufffd\036\ufffd\037\ufffd\051\ufffd\052\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd" +
    "\103\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111" +
    "\ufffd\112\ufffd\113\ufffd\114\ufffd\115\ufffd\116\ufffd\117\ufffd" +
    "\001\002\000\114\002\ufffe\036\006\037\041\052\024\054" +
    "\013\055\064\056\071\061\040\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\001\002\000\006\027\265\040\143\001\002\000\072\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\025" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\050\uffa9\001\002\000\120\002\uffec\025\uffec\036\uffec" +
    "\037\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\077" +
    "\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec" +
    "\106\uffec\107\uffec\110\uffec\111\uffec\112\uffec\113\uffec\114" +
    "\uffec\115\uffec\116\uffec\117\uffec\001\002\000\006\024\272" +
    "\052\271\001\002\000\116\002\uffee\025\uffee\036\uffee\037" +
    "\uffee\052\uffee\054\uffee\055\uffee\056\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071" +
    "\uffee\072\uffee\073\uffee\074\uffee\075\uffee\077\uffee\100\uffee" +
    "\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107" +
    "\uffee\110\uffee\111\uffee\112\uffee\113\uffee\114\uffee\115\uffee" +
    "\116\uffee\117\uffee\001\002\000\004\026\276\001\002\000" +
    "\112\025\274\036\006\037\041\052\024\054\013\055\064" +
    "\056\071\062\063\063\021\064\027\065\045\066\004\067" +
    "\052\070\043\071\034\072\031\073\017\074\057\075\012" +
    "\077\032\100\025\101\051\102\014\103\061\104\005\105" +
    "\070\106\011\107\066\110\065\111\037\112\042\113\056" +
    "\114\055\115\016\116\035\117\062\001\002\000\112\025" +
    "\275\036\006\037\041\052\024\054\013\055\064\056\071" +
    "\062\063\063\021\064\027\065\045\066\004\067\052\070" +
    "\043\071\034\072\031\073\017\074\057\075\012\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\001\002\000\116\002\uffe6\025" +
    "\uffe6\036\uffe6\037\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105" +
    "\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6" +
    "\114\uffe6\115\uffe6\116\uffe6\117\uffe6\001\002\000\116\002" +
    "\uffe7\025\uffe7\036\uffe7\037\uffe7\052\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104" +
    "\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7" +
    "\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\001\002\000" +
    "\124\004\111\005\116\006\121\020\115\024\104\026\117" +
    "\035\114\047\120\062\063\063\021\064\027\065\045\066" +
    "\004\067\052\070\043\071\034\072\031\073\017\074\057" +
    "\075\012\076\105\077\032\100\025\101\051\102\014\103" +
    "\061\104\005\105\070\106\011\107\066\110\065\111\037" +
    "\112\042\113\056\114\055\115\016\116\035\117\062\120" +
    "\125\121\110\122\123\001\002\000\004\027\300\001\002" +
    "\000\004\024\301\001\002\000\112\025\303\036\006\037" +
    "\041\052\024\054\013\055\064\056\071\062\063\063\021" +
    "\064\027\065\045\066\004\067\052\070\043\071\034\072" +
    "\031\073\017\074\057\075\012\077\032\100\025\101\051" +
    "\102\014\103\061\104\005\105\070\106\011\107\066\110" +
    "\065\111\037\112\042\113\056\114\055\115\016\116\035" +
    "\117\062\001\002\000\112\025\304\036\006\037\041\052" +
    "\024\054\013\055\064\056\071\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\001\002\000\120\002\uffe8\025\uffe8\036\uffe8\037\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107" +
    "\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\001\002\000\120\002\uffe9\025\uffe9\036" +
    "\uffe9\037\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9" +
    "\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105" +
    "\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9" +
    "\114\uffe9\115\uffe9\116\uffe9\117\uffe9\001\002\000\116\002" +
    "\uffdd\025\uffdd\036\uffdd\037\uffdd\052\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd" +
    "\075\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104" +
    "\uffdd\105\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd" +
    "\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\001\002\000" +
    "\116\002\uffdc\025\uffdc\036\uffdc\037\uffdc\052\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc" +
    "\074\uffdc\075\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103" +
    "\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc" +
    "\112\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc\117\uffdc\001" +
    "\002\000\004\027\310\001\002\000\072\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\001\002\000\006\027\312\040\143\001\002\000\072\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\050\uffaf\001\002\000\006\031\uffd3\040\320\001\002" +
    "\000\010\031\uffd0\040\uffd0\041\316\001\002\000\006\031" +
    "\uffd1\040\uffd1\001\002\000\124\004\111\005\116\006\121" +
    "\020\115\024\104\026\117\035\114\047\120\062\063\063" +
    "\021\064\027\065\045\066\004\067\052\070\043\071\034" +
    "\072\031\073\017\074\057\075\012\076\105\077\032\100" +
    "\025\101\051\102\014\103\061\104\005\105\070\106\011" +
    "\107\066\110\065\111\037\112\042\113\056\114\055\115" +
    "\016\116\035\117\062\120\125\121\110\122\123\001\002" +
    "\000\006\031\uffcf\040\uffcf\001\002\000\004\117\314\001" +
    "\002\000\006\031\uffd2\040\uffd2\001\002\000\004\026\323" +
    "\001\002\000\006\027\326\117\324\001\002\000\006\027" +
    "\uffde\040\uffde\001\002\000\006\027\334\040\333\001\002" +
    "\000\004\024\327\001\002\000\112\025\331\036\006\037" +
    "\041\052\024\054\013\055\064\056\071\062\063\063\021" +
    "\064\027\065\045\066\004\067\052\070\043\071\034\072" +
    "\031\073\017\074\057\075\012\077\032\100\025\101\051" +
    "\102\014\103\061\104\005\105\070\106\011\107\066\110" +
    "\065\111\037\112\042\113\056\114\055\115\016\116\035" +
    "\117\062\001\002\000\112\025\332\036\006\037\041\052" +
    "\024\054\013\055\064\056\071\062\063\063\021\064\027" +
    "\065\045\066\004\067\052\070\043\071\034\072\031\073" +
    "\017\074\057\075\012\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\001\002\000\114\002\uffe3\036\uffe3\037\uffe3\052\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3" +
    "\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111" +
    "\uffe3\112\uffe3\113\uffe3\114\uffe3\115\uffe3\116\uffe3\117\uffe3" +
    "\001\002\000\114\002\uffe2\036\uffe2\037\uffe2\052\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073" +
    "\uffe2\074\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2" +
    "\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\111" +
    "\uffe2\112\uffe2\113\uffe2\114\uffe2\115\uffe2\116\uffe2\117\uffe2" +
    "\001\002\000\004\117\341\001\002\000\004\024\335\001" +
    "\002\000\112\025\337\036\006\037\041\052\024\054\013" +
    "\055\064\056\071\062\063\063\021\064\027\065\045\066" +
    "\004\067\052\070\043\071\034\072\031\073\017\074\057" +
    "\075\012\077\032\100\025\101\051\102\014\103\061\104" +
    "\005\105\070\106\011\107\066\110\065\111\037\112\042" +
    "\113\056\114\055\115\016\116\035\117\062\001\002\000" +
    "\112\025\340\036\006\037\041\052\024\054\013\055\064" +
    "\056\071\062\063\063\021\064\027\065\045\066\004\067" +
    "\052\070\043\071\034\072\031\073\017\074\057\075\012" +
    "\077\032\100\025\101\051\102\014\103\061\104\005\105" +
    "\070\106\011\107\066\110\065\111\037\112\042\113\056" +
    "\114\055\115\016\116\035\117\062\001\002\000\114\002" +
    "\uffe1\036\uffe1\037\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1" +
    "\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105" +
    "\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1" +
    "\114\uffe1\115\uffe1\116\uffe1\117\uffe1\001\002\000\114\002" +
    "\uffe0\036\uffe0\037\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0" +
    "\114\uffe0\115\uffe0\116\uffe0\117\uffe0\001\002\000\006\027" +
    "\uffdf\040\uffdf\001\002\000\006\027\343\040\143\001\002" +
    "\000\072\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\050\uffb0\001\002\000\072\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\050" +
    "\uffb6\001\002\000\004\027\346\001\002\000\072\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\050\uffb7\001\002\000\004\027\350\001\002\000\072\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\025" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\050\uffbe\001\002\000\006\027\352\040\143\001\002" +
    "\000\072\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\050\uffa7\001\002\000\004\027\354\001" +
    "\002\000\072\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\050\uffbd\001\002\000\124\004\111" +
    "\005\116\006\121\020\115\024\104\026\117\035\114\047" +
    "\120\062\063\063\021\064\027\065\045\066\004\067\052" +
    "\070\043\071\034\072\031\073\017\074\057\075\012\076" +
    "\105\077\032\100\025\101\051\102\014\103\061\104\005" +
    "\105\070\106\011\107\066\110\065\111\037\112\042\113" +
    "\056\114\055\115\016\116\035\117\062\120\125\121\110" +
    "\122\123\001\002\000\004\027\357\001\002\000\004\031" +
    "\360\001\002\000\116\002\ufffb\036\ufffb\037\ufffb\051\ufffb" +
    "\052\ufffb\054\ufffb\055\ufffb\056\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\077\ufffb\100\ufffb\101" +
    "\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb" +
    "\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114\ufffb\115\ufffb\116" +
    "\ufffb\117\ufffb\001\002\000\006\027\363\040\143\001\002" +
    "\000\072\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\050\uffab\001\002\000\072\007\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050" +
    "\uffaa\001\002\000\006\027\365\040\143\001\002\000\072" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\050\uffa8\001\002\000\124\004\111\005\116\006" +
    "\121\020\115\024\104\026\117\035\114\047\120\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\076\105\077\032" +
    "\100\025\101\051\102\014\103\061\104\005\105\070\106" +
    "\011\107\066\110\065\111\037\112\042\113\056\114\055" +
    "\115\016\116\035\117\062\120\125\121\110\122\123\001" +
    "\002\000\004\027\370\001\002\000\004\024\371\001\002" +
    "\000\112\025\373\036\006\037\041\052\024\054\013\055" +
    "\064\056\071\062\063\063\021\064\027\065\045\066\004" +
    "\067\052\070\043\071\034\072\031\073\017\074\057\075" +
    "\012\077\032\100\025\101\051\102\014\103\061\104\005" +
    "\105\070\106\011\107\066\110\065\111\037\112\042\113" +
    "\056\114\055\115\016\116\035\117\062\001\002\000\112" +
    "\025\374\036\006\037\041\052\024\054\013\055\064\056" +
    "\071\062\063\063\021\064\027\065\045\066\004\067\052" +
    "\070\043\071\034\072\031\073\017\074\057\075\012\077" +
    "\032\100\025\101\051\102\014\103\061\104\005\105\070" +
    "\106\011\107\066\110\065\111\037\112\042\113\056\114" +
    "\055\115\016\116\035\117\062\001\002\000\120\002\uffea" +
    "\025\uffea\036\uffea\037\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074" +
    "\uffea\075\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112" +
    "\uffea\113\uffea\114\uffea\115\uffea\116\uffea\117\uffea\001\002" +
    "\000\120\002\uffeb\025\uffeb\036\uffeb\037\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\077\uffeb\100\uffeb\101\uffeb" +
    "\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110" +
    "\uffeb\111\uffeb\112\uffeb\113\uffeb\114\uffeb\115\uffeb\116\uffeb" +
    "\117\uffeb\001\002\000\004\025\u0106\001\002\000\116\002" +
    "\ufff6\025\ufff6\036\ufff6\037\ufff6\052\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6" +
    "\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6\001\002\000" +
    "\004\030\u0101\001\002\000\010\025\ufff4\057\ufff4\060\ufff4" +
    "\001\002\000\004\024\u0102\001\002\000\112\025\u0104\036" +
    "\006\037\041\052\024\054\013\055\064\056\071\062\063" +
    "\063\021\064\027\065\045\066\004\067\052\070\043\071" +
    "\034\072\031\073\017\074\057\075\012\077\032\100\025" +
    "\101\051\102\014\103\061\104\005\105\070\106\011\107" +
    "\066\110\065\111\037\112\042\113\056\114\055\115\016" +
    "\116\035\117\062\001\002\000\112\025\u0105\036\006\037" +
    "\041\052\024\054\013\055\064\056\071\062\063\063\021" +
    "\064\027\065\045\066\004\067\052\070\043\071\034\072" +
    "\031\073\017\074\057\075\012\077\032\100\025\101\051" +
    "\102\014\103\061\104\005\105\070\106\011\107\066\110" +
    "\065\111\037\112\042\113\056\114\055\115\016\116\035" +
    "\117\062\001\002\000\004\025\uffef\001\002\000\004\025" +
    "\ufff0\001\002\000\116\002\ufff5\025\ufff5\036\ufff5\037\ufff5" +
    "\052\ufff5\054\ufff5\055\ufff5\056\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\077\ufff5\100\ufff5\101" +
    "\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5" +
    "\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5\115\ufff5\116" +
    "\ufff5\117\ufff5\001\002\000\116\002\uffda\025\uffda\036\uffda" +
    "\037\uffda\052\uffda\054\uffda\055\uffda\056\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\077\uffda\100" +
    "\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda" +
    "\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\114\uffda\115" +
    "\uffda\116\uffda\117\uffda\001\002\000\004\027\u0109\001\002" +
    "\000\072\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\050\uffbc\001\002\000\006\027\u010b\040" +
    "\143\001\002\000\072\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\025\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\050\uffac\001\002\000\004" +
    "\027\u010d\001\002\000\072\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\025\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9\001\002\000" +
    "\116\002\uffd7\025\uffd7\036\uffd7\037\uffd7\052\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103" +
    "\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7" +
    "\112\uffd7\113\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7\001" +
    "\002\000\004\027\u0110\001\002\000\072\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\025\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba" +
    "\001\002\000\006\027\u0112\040\143\001\002\000\072\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\050\uffb3\001\002\000\116\002\uffdb\025\uffdb\036\uffdb" +
    "\037\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\077\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\114\uffdb\115" +
    "\uffdb\116\uffdb\117\uffdb\001\002\000\004\002\001\001\002" +
    "\000\124\004\111\005\116\006\121\020\115\024\104\026" +
    "\117\035\114\047\120\062\063\063\021\064\027\065\045" +
    "\066\004\067\052\070\043\071\034\072\031\073\017\074" +
    "\057\075\012\076\105\077\032\100\025\101\051\102\014" +
    "\103\061\104\005\105\070\106\011\107\066\110\065\111" +
    "\037\112\042\113\056\114\055\115\016\116\035\117\062" +
    "\120\125\121\110\122\123\001\002\000\004\027\u0117\001" +
    "\002\000\004\031\uffa4\001\002\000\006\027\u0119\040\143" +
    "\001\002\000\072\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\050\uffb5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\046\002\006\003\066\006\052\013\047\014" +
    "\045\015\043\016\007\020\053\021\021\024\035\025\014" +
    "\026\017\027\032\030\025\031\057\037\046\041\022\044" +
    "\071\001\001\000\002\001\001\000\022\005\u0117\011\105" +
    "\012\111\020\053\021\112\022\140\031\057\044\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\u0110\011\105\012\111\020\053\021\112\022" +
    "\140\031\057\044\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u010b\001\001\000\002\001\001\000" +
    "\022\005\u0109\011\105\012\111\020\053\021\112\022\140" +
    "\031\057\044\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\374" +
    "\035\377\001\001\000\002\001\001\000\022\005\363\011" +
    "\105\012\111\020\053\021\112\022\140\031\057\044\125" +
    "\001\001\000\002\001\001\000\022\005\360\011\105\012" +
    "\111\020\053\021\112\022\140\031\057\044\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\350\011" +
    "\105\012\111\020\053\021\112\022\140\031\057\044\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\344\001\001\000\002\001\001\000\022\005\341\011\105" +
    "\012\111\020\053\021\112\022\140\031\057\044\125\001" +
    "\001\000\002\001\001\000\006\004\312\017\314\001\001" +
    "\000\022\005\310\011\105\012\111\020\053\021\112\022" +
    "\140\031\057\044\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\265\034\267\001\001\000\002\001\001\000\022\005\263" +
    "\011\105\012\111\020\053\021\112\022\140\031\057\044" +
    "\125\001\001\000\002\001\001\000\042\003\262\013\047" +
    "\014\045\015\043\016\007\020\053\021\021\024\261\025" +
    "\014\026\017\027\032\030\025\031\057\037\046\041\022" +
    "\044\071\001\001\000\002\001\001\000\022\005\257\011" +
    "\105\012\111\020\053\021\112\022\140\031\057\044\125" +
    "\001\001\000\022\005\255\011\105\012\111\020\053\021" +
    "\112\022\140\031\057\044\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\236\011\105\012\111" +
    "\020\053\021\112\022\121\023\123\031\057\044\125\001" +
    "\001\000\022\005\234\011\105\012\111\020\053\021\112" +
    "\022\140\031\057\044\125\001\001\000\022\005\232\011" +
    "\105\012\111\020\053\021\112\022\140\031\057\044\125" +
    "\001\001\000\036\013\231\014\045\015\043\016\007\020" +
    "\053\021\021\025\014\026\017\027\032\030\025\031\057" +
    "\037\046\041\022\044\071\001\001\000\022\005\227\011" +
    "\105\012\111\020\053\021\112\022\140\031\057\044\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\210\031\057\001\001\000\024\010\207\011\105\012\111" +
    "\020\053\021\112\022\121\023\123\031\057\044\125\001" +
    "\001\000\002\001\001\000\024\010\206\011\105\012\111" +
    "\020\053\021\112\022\121\023\123\031\057\044\125\001" +
    "\001\000\024\010\205\011\105\012\111\020\053\021\112" +
    "\022\121\023\123\031\057\044\125\001\001\000\024\010" +
    "\204\011\105\012\111\020\053\021\112\022\121\023\123" +
    "\031\057\044\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\106\011\105\012\111\020\053\021\112" +
    "\022\121\023\123\031\057\044\125\001\001\000\006\042" +
    "\176\043\174\001\001\000\022\005\172\011\105\012\111" +
    "\020\053\021\112\022\140\031\057\044\125\001\001\000" +
    "\004\036\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\105\012\111\020\053\021\112\022\161\031\057" +
    "\044\125\001\001\000\014\012\146\020\053\021\112\031" +
    "\057\044\125\001\001\000\002\001\001\000\020\011\105" +
    "\012\111\020\053\021\112\022\144\031\057\044\125\001" +
    "\001\000\022\005\136\011\105\012\111\020\053\021\112" +
    "\022\140\031\057\044\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\105\012\111\020" +
    "\053\021\112\022\135\031\057\044\125\001\001\000\020" +
    "\011\105\012\111\020\053\021\112\022\132\031\057\044" +
    "\125\001\001\000\020\011\105\012\111\020\053\021\112" +
    "\022\131\031\057\044\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\105\012\111\020\053\021\112" +
    "\022\134\031\057\044\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\105\012\111\020" +
    "\053\021\112\022\143\031\057\044\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\160\020\053\021\112\031\057\044\125" +
    "\001\001\000\014\012\157\020\053\021\112\031\057\044" +
    "\125\001\001\000\014\012\156\020\053\021\112\031\057" +
    "\044\125\001\001\000\014\012\155\020\053\021\112\031" +
    "\057\044\125\001\001\000\014\012\154\020\053\021\112" +
    "\031\057\044\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\171\012\111\020\053\021\112" +
    "\031\057\044\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\200\011\105\012\111" +
    "\020\053\021\112\022\121\023\123\031\057\044\125\001" +
    "\001\000\002\001\001\000\004\042\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\212\011\105\012\111\020\053\021\112\022" +
    "\121\023\123\031\057\044\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\216\001\001\000\024\010" +
    "\217\011\105\012\111\020\053\021\112\022\121\023\123" +
    "\031\057\044\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\223\014\045\015\043" +
    "\016\007\020\053\021\021\025\222\027\032\030\025\031" +
    "\057\037\046\041\022\044\071\001\001\000\002\001\001" +
    "\000\032\014\045\015\043\016\007\020\053\021\021\025" +
    "\225\027\032\030\025\031\057\037\046\041\022\044\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\245\011\105\012\111\020\053\021" +
    "\112\022\140\031\057\044\125\001\001\000\024\010\243" +
    "\011\105\012\111\020\053\021\112\022\121\023\123\031" +
    "\057\044\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\231\014\045\015\043\016\007\020\053\021" +
    "\021\025\014\026\017\027\032\030\025\031\057\037\046" +
    "\041\022\044\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\007\272\014\045\015\043\016" +
    "\007\020\053\021\021\025\222\027\032\030\025\031\057" +
    "\037\046\041\022\044\071\001\001\000\032\014\045\015" +
    "\043\016\007\020\053\021\021\025\225\027\032\030\025" +
    "\031\057\037\046\041\022\044\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\276\011\105\012\111" +
    "\020\053\021\112\022\121\023\123\031\057\044\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\301" +
    "\014\045\015\043\016\007\020\053\021\021\025\222\027" +
    "\032\030\025\031\057\037\046\041\022\044\071\001\001" +
    "\000\032\014\045\015\043\016\007\020\053\021\021\025" +
    "\225\027\032\030\025\031\057\037\046\041\022\044\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\316\011\105" +
    "\012\111\020\053\021\112\022\121\023\123\031\057\044" +
    "\125\001\001\000\002\001\001\000\004\017\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\327\014\045\015\043\016\007\020\053\021" +
    "\021\025\222\027\032\030\025\031\057\037\046\041\022" +
    "\044\071\001\001\000\032\014\045\015\043\016\007\020" +
    "\053\021\021\025\225\027\032\030\025\031\057\037\046" +
    "\041\022\044\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\335" +
    "\014\045\015\043\016\007\020\053\021\021\025\222\027" +
    "\032\030\025\031\057\037\046\041\022\044\071\001\001" +
    "\000\032\014\045\015\043\016\007\020\053\021\021\025" +
    "\225\027\032\030\025\031\057\037\046\041\022\044\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\355\011\105\012" +
    "\111\020\053\021\112\022\121\023\123\031\057\044\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\366\011" +
    "\105\012\111\020\053\021\112\022\121\023\123\031\057" +
    "\044\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\371\014\045\015\043\016\007\020\053\021\021" +
    "\025\222\027\032\030\025\031\057\037\046\041\022\044" +
    "\071\001\001\000\032\014\045\015\043\016\007\020\053" +
    "\021\021\025\225\027\032\030\025\031\057\037\046\041" +
    "\022\044\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\u0102\014\045" +
    "\015\043\016\007\020\053\021\021\025\222\027\032\030" +
    "\025\031\057\037\046\041\022\044\071\001\001\000\032" +
    "\014\045\015\043\016\007\020\053\021\021\025\225\027" +
    "\032\030\025\031\057\037\046\041\022\044\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\u0115\011\105\012\111\020\053" +
    "\021\112\022\121\023\123\031\057\044\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_fs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_fs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_fs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public LinkedList<sent> raiz;
public mng_error e = new mng_error();
public void syntax_error(Symbol s){
        e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); 
}
             
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       e.AddError("No se esperaba "+s.value,(s.left+1),(s.right+1),var.archivo,"SINTACTICO"); ;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_fs$actions {


      

  private final sintactico_fs parser;

  /** Constructor */
  CUP$sintactico_fs$actions(sintactico_fs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_fs$do_action_part00000000(
    int                        CUP$sintactico_fs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_fs$parser,
    java.util.Stack            CUP$sintactico_fs$stack,
    int                        CUP$sintactico_fs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_fs$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_fs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> start_val = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_fs$parser.done_parsing();
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LSENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LIMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= LIMP LSENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n2 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                System.out.println("aceptada");
                raiz=n1;
                for(sent s:n2)
                {
                    raiz.add(s);
                }
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIMP ::= LIMP IMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LIMP",4, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIMP ::= IMP 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LIMP",4, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMP ::= importar para COND parc ptocoma 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_importar(n1,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IMP",18, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LSENT ::= LSENT SENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LSENT",1, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LSENT ::= SENT 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LSENT",1, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINS ::= LINS INS 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LINS",5, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINS ::= INS 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LINS",5, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S_SWITCH ::= SWITCH_ llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_SWITCH",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S_SWITCH ::= SWITCH_ DEFECTO llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                n1.casos.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_SWITCH",22, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SWITCH_ ::= SWITCH_ CASO 
            {
              s_switch RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_switch n1 = (s_switch)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                n1.casos.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SWITCH_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SWITCH_ ::= selecciona para COND parc llava CASO 
            {
              s_switch RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n3 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_switch(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SWITCH_",31, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASO ::= caso COND dosptos llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("CASO",27, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASO ::= caso COND dosptos llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                 RESULT=new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("CASO",27, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFECTO ::= defecto dosptos llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(null,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DEFECTO",25, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFECTO ::= defecto dosptos llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                 RESULT=new s_bloque(null,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DEFECTO",25, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S_IF ::= IF_ SINO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                n1.bloques.add(n2);
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_IF",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S_IF ::= IF_ 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("S_IF",21, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF_ ::= IF_ BL 
            {
              s_if RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_if n1 = (s_if)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_bloque n2 = (s_bloque)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.bloques.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF_ ::= si para COND parc llava LINS llavc 
            {
              s_if RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_if(new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo));
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF_ ::= si para COND parc llava llavc 
            {
              s_if RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_if(new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo));
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IF_",29, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BL ::= sino si para COND parc llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("BL",24, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BL ::= sino si para COND parc llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_bloque(n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("BL",24, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SINO ::= sino llava LINS llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_bloque(null,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SINO",26, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SINO ::= sino llava llavc 
            {
              s_bloque RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_bloque(null,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SINO",26, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= INS 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                if(n1 instanceof s_declaraciones)
                {
                    s_declaraciones de=(s_declaraciones) n1;
                    de.IsGlobal=true;
                }
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= FUN 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("SENT",9, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUN ::= funcion er_id para parc llava llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		
                RESULT=new s_funcion(n2,new LinkedList(),new LinkedList(),(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUN ::= funcion er_id para parc llava LINS llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcion(n2,new LinkedList(),n3,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUN ::= funcion er_id para LPAR parc llava llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		
                RESULT=new s_funcion(n2,n1,new LinkedList(),(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUN ::= funcion er_id para LPAR parc llava LINS llavc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcion(n2,n1,n3,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("FUN",20, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LPAR ::= LPAR coma er_id 
            {
              LinkedList<String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<String> n1 = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LPAR",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPAR ::= er_id 
            {
              LinkedList<String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LPAR",30, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INS ::= DECLARACION ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INS ::= ASIGNACION ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INS ::= IMPRIMIR ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INS ::= OP_UNARIA ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                if(n1 instanceof oa_decremento)
                {
                    oa_decremento d=(oa_decremento)n1;
                    d.noRetorna=true;
                }else
                {
                    oa_aumento d=(oa_aumento)n1;
                    d.noRetorna=true;
                }
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INS ::= retornar ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_retornarEmpty((n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INS ::= retornar COND ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_retornar(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INS ::= detener ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                 RESULT=new s_detener((n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INS ::= LACCESO ptocoma 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                s_accesos a=(s_accesos)n1;
                a.IsSent=true;
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INS ::= S_IF 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INS ::= S_SWITCH 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("INS",19, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= varvar LDECLA 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_declaraciones(n1,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LDECLA ::= LDECLA coma DECLA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LDECLA",2, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LDECLA ::= DECLA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LDECLA",2, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLA ::= er_id 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
               RESULT= new s_declaracion(n2,null,(n2left+1),(n2right+1),var.archivo); 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLA",13, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLA ::= er_id is COND 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_declaracion(n2,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("DECLA",13, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= LACCESO is COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignacion(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= LACCESO a_mas COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaMas(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= LACCESO a_menos COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaMenos(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= LACCESO a_por COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaPor(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= LACCESO a_div COND 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new s_asignaDiv(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LACCESO ::= LACCESO pto ACCESO 
            {
              s_accesos RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.accesos.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LACCESO",34, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LACCESO ::= ACCESO 
            {
              s_accesos RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_accesos(new LinkedList());
                RESULT.accesos.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LACCESO",34, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ACCESO ::= er_id 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_acVariable(n2,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACCESO ::= er_id cora COND corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_accArray(n2,n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACCESO ::= LLAMADA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACCESO ::= ascendente 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaAscendente((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACCESO ::= descendente 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaDescendente((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACCESO ::= invertir 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaInvertir((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACCESO ::= maximo 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaMaximo((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ACCESO ::= minimo 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new s_propiaMinimo((n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACCESO ::= filter er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalFilter(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESO ::= map er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalMap(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO ::= buscar er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalBuscar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESO ::= reduce er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalReduce(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESO ::= todos er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalTodos(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ACCESO ::= alguno er_id parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_funcionalAlgunos(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ACCESO ::= cerrar LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCerrar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO ::= clic LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoClic(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ACCESO ::= cargar LLAMADA parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCargar(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACCESO ::= cargar parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nEventoCargar(null,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACCESO ::= video LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearVideo(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ACCESO ::= musica LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearReproductor(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ACCESO ::= imagen LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearImagen(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ACCESO ::= boton LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearBoton(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ACCESO ::= desple LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearDesplegable(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ACCESO ::= controln LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearCtrlNum(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACCESO ::= area LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearAreaTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACCESO ::= caja LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearCajaTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCESO ::= texto LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearTexto(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCESO ::= contenedor LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nCrearContenedor(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCESO ::= crearArrFile parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_propiaArrayFromFile(new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ACCESO ::= crearArrFile LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_propiaArrayFromFile(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCESO ::= ObtenerPorId LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nObtenerID(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ACCESO ::= ObtenerPorNombre LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nObtenerNombre(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCESO ::= ObtenerPorEtiqueta LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nObtenerEtiqueta(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAMADA ::= er_id para LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n3 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_llamada(n2,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLAMADA ::= er_id para parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		
                RESULT=new s_llamada(n2,new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IMPRIMIR ::= imprimir para COND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_imprimir(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
               RESULT=n1; 
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= cora LCOND corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_array(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COND ::= cora corc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_array(new LinkedList(),(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COND ::= OBJETO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COND ::= leerGxml LCOND parc 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new s_nativaGxml(n1,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("COND",6, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LCOND ::= LCOND coma LOGICA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<sent> n1 = (LinkedList<sent>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                n1.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LCOND",3, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LCOND ::= LOGICA 
            {
              LinkedList<sent> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LCOND",3, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOGICA ::= LOGICA op_and LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_and(n1,n3,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOGICA ::= LOGICA op_or LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_or(n1,n3,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOGICA ::= op_not LOGICA 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=new ol_not(n1,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOGICA ::= RELA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=n1;
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOGICA ::= LOGICA ques LOGICA dosptos LOGICA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)).value;
		int n0left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).left;
		int n0right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).right;
		String n0 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                    RESULT=new o_ternario(n1,n2,n3,(n0left+1),(n0right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("LOGICA",16, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RELA ::= RELA OPEREL RELA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                    RESULT=new o_relacional(n1,n3,n2,(n2left+1),(n2right+1),var.archivo);
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("RELA",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RELA ::= E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=n1;
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("RELA",7, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPEREL ::= mayor 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=">";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPEREL ::= menor 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="<";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPEREL ::= igual 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="==";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPEREL ::= dif 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="!=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPEREL ::= mayori 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT=">=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPEREL ::= menori 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                     RESULT="<=";
                
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OPEREL",28, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E mas E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_suma(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E menos E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_resta(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E mul E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_multiplicacion(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E divis E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_division(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E pote E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n3 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=new oa_potencia(n1,n3,(n2left+1),(n2right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= para LOGICA parc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=n2;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= menos E 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT=new oa_negativo(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= er_decimal 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_decimal, Double.parseDouble(n1),(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= er_entero 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_entero,  Integer.parseInt(n1),(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= er_cadena 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                 RESULT= new o_valorPuntual(var.tipo_cadena,n1,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= falso 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                
                RESULT= new o_valorPuntual(var.tipo_booleano,false,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= verdadero 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new o_valorPuntual(var.tipo_booleano,true,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= nulo 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		 
                RESULT= new o_valorPuntual(var.tipo_nulo,null,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= LACCESO 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		s_accesos n1 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT= new o_valorPuntual(null,n1,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= OP_UNARIA 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n1 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_UNARIA ::= LACCESO aumen 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n2 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_aumento(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OP_UNARIA",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_UNARIA ::= LACCESO decre 
            {
              sent RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		s_accesos n2 = (s_accesos)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new oa_decremento(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OP_UNARIA",15, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OBJETO ::= llava VALORES llavc 
            {
              sent RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).right;
		LinkedList<o_objetoValor> n2 = (LinkedList<o_objetoValor>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-1)).value;
		
                RESULT=new o_objeto(n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("OBJETO",17, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALORES ::= VALORES coma VALUE 
            {
              LinkedList<o_objetoValor> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		LinkedList<o_objetoValor> n1 = (LinkedList<o_objetoValor>)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		o_objetoValor n2 = (o_objetoValor)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=n1;
                RESULT.add(n2);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALORES",33, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALORES ::= VALUE 
            {
              LinkedList<o_objetoValor> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		o_objetoValor n1 = (o_objetoValor)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new LinkedList();
                RESULT.add(n1);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALORES",33, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALUE ::= er_id dosptos COND 
            {
              o_objetoValor RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()).right;
		sent n2 = (sent)((java_cup.runtime.Symbol) CUP$sintactico_fs$stack.peek()).value;
		
                RESULT=new o_objetoValor(n1,n2,(n1left+1),(n1right+1),var.archivo);
            
              CUP$sintactico_fs$result = parser.getSymbolFactory().newSymbol("VALUE",32, ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.elementAt(CUP$sintactico_fs$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_fs$stack.peek()), RESULT);
            }
          return CUP$sintactico_fs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_fs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_fs$do_action(
    int                        CUP$sintactico_fs$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_fs$parser,
    java.util.Stack            CUP$sintactico_fs$stack,
    int                        CUP$sintactico_fs$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_fs$do_action_part00000000(
                               CUP$sintactico_fs$act_num,
                               CUP$sintactico_fs$parser,
                               CUP$sintactico_fs$stack,
                               CUP$sintactico_fs$top);
    }
}

}
